[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/ArrayList.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * 配列\n */\nexport default class ArrayList {\n\t\n\t/**\n\t * 配列\n\t * @param {{element: any[]}} [array]\n\t */\n\tconstructor(array) {\n\n\t\t/**\n\t\t * @type {Array}\n\t\t * @private\n\t\t */\n\t\tthis.element = [];\n\n\t\tif(array !== undefined) {\n\t\t\tfor(let i = 0; i < array.element.length; i++) {\n\t\t\t\tthis.element[i] = array.element[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 内部で利用しているArrayデータのディープコピーを取得する\n\t * @return {any[]}\n\t */\n\tgetArray() {\n\t\treturn this.clone().element;\n\t}\n\n\t/**\n\t * 各要素に指定した関数を実行する\n\t * @param {function(number, any): boolean} func \n\t * @returns {boolean} result\n\t */\n\teach(func) {\n\t\tlet out = true;\n\t\tfor(let i = 0; i < this.element.length; i++) {\n\t\t\tconst x = this.element[i];\n\t\t\tif(func.call(x, i, x) === false) {\n\t\t\t\tout = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\t\n\t/**\n\t * 文字列化\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.join(\", \");\n\t}\n\t\n\t/**\n\t * 空にする\n\t * @returns {boolean}\n\t */\n\tisEmpty() {\n\t\treturn this.element.length === 0;\n\t}\n\t\n\t/**\n\t * 指定したデータが含まれるか\n\t * @param {any} object\n\t * @returns {boolean}\n\t */\n\tcontains(object) {\n\t\tfor(let i = 0; i < this.element.length; i++) {\n\t\t\tif(this.element[i] === object) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * 配列長\n\t * @returns {number}\n\t */\n\tsize() {\n\t\treturn this.element.length;\n\t}\n\n\t/**\n\t * 配列を空にする\n\t */\n\tclear() {\n\t\tthis.element.length = 0;\n\t}\n\t\n\t/**\n\t * 結合する\n\t * @param {string} [separator = \",\"]\n\t * @returns {string}\n\t */\n\tjoin(separator) {\n\t\tconst sep = separator === undefined ? \",\" : separator;\n\t\treturn this.element.join(sep);\n\t}\n\t\n\t/**\n\t * ディープコピー\n\t * @returns {ArrayList}\n\t */\n\tclone() {\n\t\tconst out = new ArrayList();\n\t\tfor(let i = 0; i < this.element.length; i++) {\n\t\t\tout.element[i] = this.element[i];\n\t\t}\n\t\treturn out;\n\t}\n\t\n\t/**\n\t * 指定したデータが何番目に含まれるか\n\t * @param {any} object \n\t * @returns {number}\n\t */\n\tindexOf(object) {\n\t\tfor(let i = 0; i < this.element.length; i++) {\n\t\t\tif(this.element[i] === object) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * 配列長\n\t * @returns {number}\n\t */\n\tlength() {\n\t\treturn this.element.length;\n\t}\n\t\n\t/**\n\t * 指定したデータが何番目に含まれるか（後ろから調べる）\n\t * @param {any} object \n\t * @returns {number}\n\t */\n\tlastIndexOf(object) {\n\t\tfor(let i = this.element.length - 1; i !== -1; i--) {\n\t\t\tif(this.element[i] === object) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\t/**\n\t * 指定した位置の配列値を取得\n\t * @param {number} index \n\t */\n\tget(index) {\n\t\treturn this.element[index];\n\t}\n\t\n\t/**\n\t * 指定したデータを挿入\n\t * @param {any|number} index_or_object\n\t * @param {any} [object]\n\t */\n\tadd(index_or_object, object) {\n\t\tif(arguments.length === 1) {\n\t\t\tthis.element.push(index_or_object);\n\t\t}\n\t\telse if(arguments.length === 2) {\n\t\t\tthis.element.splice(index_or_object, 0, object);\n\t\t}\n\t}\n\t\n\t/**\n\t * 指定した配列を挿入\n\t * @param {ArrayList|any[]|number} index_or_arraylist\n\t * @param {ArrayList|any[]} [arraylist]\n\t */\n\taddAll(index_or_arraylist, arraylist) {\n\t\tif(arguments.length === 1) {\n\t\t\tlet list;\n\t\t\tif(index_or_arraylist instanceof ArrayList) {\n\t\t\t\tlist = index_or_arraylist.element;\n\t\t\t}\n\t\t\telse if(typeof index_or_arraylist !== \"number\") {\n\t\t\t\tlist = index_or_arraylist;\n\t\t\t}\n\t\t\tlet j = this.element.length;\n\t\t\tfor(let i = 0; i < list.length; i++) {\n\t\t\t\tthis.element[j++] = list[i];\n\t\t\t}\n\t\t}\n\t\telse if(arguments.length === 2) {\n\t\t\tif(typeof index_or_arraylist === \"number\") {\n\t\t\t\tlet index = index_or_arraylist;\n\t\t\t\tlet list;\n\t\t\t\tif(arraylist instanceof ArrayList) {\n\t\t\t\t\tlist = arraylist.element;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlist = arraylist;\n\t\t\t\t}\n\t\t\t\tif(list === this.element) {\n\t\t\t\t\tlist = this.element.slice(0);\n\t\t\t\t}\n\t\t\t\tlet size = this.element.length - index;\n\t\t\t\tlet target_i = this.element.length + list.length - 1;\n\t\t\t\tlet source_i = this.element.length - 1;\n\t\t\t\tfor(let i = 0; i < size ; i++ ) {\n\t\t\t\t\tthis.element[target_i--] = this.element[source_i--];\n\t\t\t\t}\n\t\t\t\tsize = list.length;\n\t\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\t\tthis.element[index++] = list[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 指定したデータで置き換える\n\t * @param {number} index \n\t * @param {any} object \n\t */\n\tset(index, object) {\n\t\tthis.element[index] = object;\n\t}\n\t\n\t/**\n\t * 指定した位置のデータを削除\n\t * @param {number} index \n\t */\n\tremove(index) {\n\t\tthis.element.splice(index, 1);\n\t}\n\t\n\t/**\n\t * 指定した範囲を削除\n\t * @param {number} fromIndex \n\t * @param {number} toIndex \n\t */\n\tremoveRange(fromIndex, toIndex) {\n\t\tthis.element.splice(fromIndex, toIndex - fromIndex);\n\t}\n\t\n\t/**\n\t * 安定ソート\n\t * @param { function(any, any): number } [compareFunction]\n\t */\n\tsort(compareFunction) {\n\t\tlet compare;\n\t\tif(arguments.length === 0) {\n\t\t\t// 比較関数\n\t\t\tcompare = ArrayList.COMPARE_DEFAULT;\n\t\t}\n\t\telse {\n\t\t\tcompare = compareFunction;\n\t\t}\n\t\t/**\n\t\t * @type {any[]}\n\t\t * @private\n\t\t */\n\t\tconst temp = [];\n\t\t/**\n\t\t * ソート関数（安定マージソート）\n\t\t * @param {any[]} element \n\t\t * @param {number} first \n\t\t * @param {number} last \n\t\t * @param {function(any, any): number} cmp_function\n\t\t * @private\n\t\t */\n\t\tconst sort = function(element, first, last, cmp_function) { \n\t\t\tif(first < last) {\n\t\t\t\tconst middle = Math.floor((first + last) / 2);\n\t\t\t\tsort(element, first, middle, cmp_function);\n\t\t\t\tsort(element, middle + 1, last, cmp_function);\n\t\t\t\tlet p = 0, i, j, k;\n\t\t\t\tfor(i = first; i <= middle; i++) {\n\t\t\t\t\ttemp[p++] = element[i];\n\t\t\t\t}\n\t\t\t\ti = middle + 1;\n\t\t\t\tj = 0;\n\t\t\t\tk = first;\n\t\t\t\twhile((i <= last) && (j < p)) {\n\t\t\t\t\tif(cmp_function(element[i], temp[j]) >= 0) {\n\t\t\t\t\t\telement[k++] = temp[j++];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\telement[k++] = element[i++];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile(j < p) {\n\t\t\t\t\telement[k++] = temp[j++];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\tsort(this.element, 0, this.element.length - 1, compare);\n\t}\n\n\t/**\n\t * 昇順ソート用の関数\n\t * @param {any} a\n\t * @param {any} b\n\t * @returns {number}\n\t */\n\tstatic COMPARE_DEFAULT(a, b) {\n\t\tif(a === b) {\n\t\t\treturn 0;\n\t\t}\n\t\tif(typeof a === typeof b) {\n\t\t\treturn (a < b ? -1 : 1);\n\t\t}\n\t\treturn ((typeof a < typeof b) ? -1 : 1);\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/ArrayList.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "ArrayList",
    "memberof": "src/ArrayList.js",
    "static": true,
    "longname": "src/ArrayList.js~ArrayList",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/ArrayList.js",
    "importStyle": "ArrayList",
    "description": "配列",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#constructor",
    "access": "public",
    "description": "配列",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "{element: any[]}"
        ],
        "spread": false,
        "optional": true,
        "name": "array",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "element",
    "memberof": "src/ArrayList.js~ArrayList",
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#element",
    "access": "private",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "getArray",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#getArray",
    "access": "public",
    "description": "内部で利用しているArrayデータのディープコピーを取得する",
    "lineNumber": 39,
    "return": {
      "nullable": null,
      "types": [
        "any[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "each",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#each",
    "access": "public",
    "description": "各要素に指定した関数を実行する",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(number, any): boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "toString",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#isEmpty",
    "access": "public",
    "description": "空にする",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "contains",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#contains",
    "access": "public",
    "description": "指定したデータが含まれるか",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "size",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#size",
    "access": "public",
    "description": "配列長",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "clear",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#clear",
    "access": "public",
    "description": "配列を空にする",
    "lineNumber": 101,
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "join",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#join",
    "access": "public",
    "description": "結合する",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " \",\"",
        "defaultRaw": ",",
        "name": "separator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "clone",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#clone",
    "access": "public",
    "description": "ディープコピー",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ArrayList}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ArrayList"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "indexOf",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#indexOf",
    "access": "public",
    "description": "指定したデータが何番目に含まれるか",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "length",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#length",
    "access": "public",
    "description": "配列長",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "lastIndexOf",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#lastIndexOf",
    "access": "public",
    "description": "指定したデータが何番目に含まれるか（後ろから調べる）",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "get",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#get",
    "access": "public",
    "description": "指定した位置の配列値を取得",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "add",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#add",
    "access": "public",
    "description": "指定したデータを挿入",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "any",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index_or_object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": true,
        "name": "object",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "addAll",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#addAll",
    "access": "public",
    "description": "指定した配列を挿入",
    "lineNumber": 190,
    "params": [
      {
        "nullable": null,
        "types": [
          "ArrayList",
          "any[]",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index_or_arraylist",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ArrayList",
          "any[]"
        ],
        "spread": false,
        "optional": true,
        "name": "arraylist",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "set",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#set",
    "access": "public",
    "description": "指定したデータで置き換える",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "remove",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#remove",
    "access": "public",
    "description": "指定した位置のデータを削除",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "removeRange",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#removeRange",
    "access": "public",
    "description": "指定した範囲を削除",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fromIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "toIndex",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "sort",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ArrayList.js~ArrayList#sort",
    "access": "public",
    "description": "安定ソート",
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          " function(any, any): number "
        ],
        "spread": false,
        "optional": true,
        "name": "compareFunction",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "COMPARE_DEFAULT",
    "memberof": "src/ArrayList.js~ArrayList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ArrayList.js~ArrayList.COMPARE_DEFAULT",
    "access": "public",
    "description": "昇順ソート用の関数",
    "lineNumber": 318,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/CSV.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * CSVを扱う\n */\nexport default class CSV {\n\t\n\t/**\n\t * CSVテキストから配列を作成\n\t * @param {string} text \n\t * @param {string} [separator=\",\"]\n\t * @returns {Array<Array<string>>}\n\t */\n\tstatic parse(text, separator) {\n\t\tconst iseparator = separator === undefined ? \",\" : separator;\n\t\t// 改行コードの正規化\n\t\tconst itext = text.replace(/\\r\\n?|\\n/g, \"\\n\");\n\t\tconst CODE_SEPARATOR = iseparator.charCodeAt(0);\n\t\tconst CODE_CR    = 0x0D;\n\t\tconst CODE_LF    = 0x0A;\n\t\tconst CODE_DOUBLEQUOTES = 0x22;\n\t\tconst out = [];\n\t\tconst length = itext.length;\n\t\tlet element = \"\";\n\t\tlet count_rows    = 0;\n\t\tlet count_columns = 0;\n\t\tlet isnextelement = false;\n\t\tlet isnextline    = false;\n\t\tfor(let i = 0; i < length; i++) {\n\t\t\tlet code = itext.charCodeAt(i);\n\t\t\t// 複数行なら一気に全て読み込んでしまう(1文字目がダブルクォーテーションかどうか)\n\t\t\tif((code === CODE_DOUBLEQUOTES)&&(element.length === 0)) {\n\t\t\t\ti++;\n\t\t\t\tfor(;i < length;i++) {\n\t\t\t\t\tcode = itext.charCodeAt(i);\n\t\t\t\t\tif(code === CODE_DOUBLEQUOTES) {\n\t\t\t\t\t\t// フィールドの終了か？\n\t\t\t\t\t\t// 文字としてのダブルクォーテーションなのか\n\t\t\t\t\t\tif((i + 1) !== (length - 1)) {\n\t\t\t\t\t\t\tif(itext.charCodeAt(i + 1) === CODE_DOUBLEQUOTES) {\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\telement += \"\\\"\"; \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\telement += itext.charAt(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 複数行以外なら1文字ずつ解析\n\t\t\telse {\n\t\t\t\tswitch(code) {\n\t\t\t\t\tcase(CODE_SEPARATOR):\n\t\t\t\t\t\tisnextelement = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase(CODE_CR):\n\t\t\t\t\tcase(CODE_LF):\n\t\t\t\t\t\tisnextline = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(isnextelement) {\n\t\t\t\t\tisnextelement = false;\n\t\t\t\t\tif(out[count_rows] === undefined) {\n\t\t\t\t\t\tout[count_rows] = [];\n\t\t\t\t\t}\n\t\t\t\t\tout[count_rows][count_columns] = element;\n\t\t\t\t\telement = \"\";\n\t\t\t\t\tcount_columns += 1;\n\t\t\t\t}\n\t\t\t\telse if(isnextline) {\n\t\t\t\t\tisnextline = false;\n\t\t\t\t\t//文字があったり、改行がある場合は処理\n\t\t\t\t\t//例えば CR+LF や 最後のフィールド で改行しているだけなどは無視できる\n\t\t\t\t\tif((element !== \"\")||(count_columns !== 0)) {\n\t\t\t\t\t\tif(out[count_rows] === undefined) {\n\t\t\t\t\t\t\tout[count_rows] = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout[count_rows][count_columns] = element;\n\t\t\t\t\t\telement = \"\";\n\t\t\t\t\t\tcount_rows    += 1;\n\t\t\t\t\t\tcount_columns  = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\telement += itext.charAt(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 最終行に改行がない場合\n\t\t\tif(i === length - 1) {\n\t\t\t\tif(count_columns !== 0) {\n\t\t\t\t\tout[count_rows][count_columns] = element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\t\n\t/**\n\t * 配列からCSVテキストを作成\n\t * @param {Array<Array<string>>} csv_array \n\t * @param {string} [separator=\",\"]\n\t * @param {string} [newline=\"\\r\\n\"]\n\t * @returns {string}\n\t */\n\tstatic create(csv_array, separator, newline) {\n\t\tconst iseparator = separator === undefined ? \",\" : separator;\n\t\tconst inewline = newline === undefined ? \"\\r\\n\" : newline;\n\t\tlet out = \"\";\n\t\tconst escape = /[\"\\r\\n,\\t]/;\n\t\tif(csv_array !== undefined) {\n\t\t\tfor(let i = 0;i < csv_array.length;i++) {\n\t\t\t\tif(csv_array[i] !== undefined) {\n\t\t\t\t\tfor(let j = 0;j < csv_array[i].length;j++) {\n\t\t\t\t\t\tlet element = csv_array[i][j];\n\t\t\t\t\t\tif(escape.test(element)) {\n\t\t\t\t\t\t\telement = element.replace(/\"/g, \"\\\"\\\"\");\n\t\t\t\t\t\t\telement = \"\\\"\" + element + \"\\\"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout += element;\n\t\t\t\t\t\tif(j !== csv_array[i].length - 1) {\n\t\t\t\t\t\t\tout += iseparator;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tout += inewline;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 1行目に列名が記載しているCSVをJSON配列に変換\n\t * @param {Array<Array<string>>} csv_array \n\t * @returns {Array<Object<string, string>>}\n\t */\n\tstatic toJSONArrayFromCSVArray(csv_array) {\n\t\tconst title_line = csv_array[0];\n\t\tconst key_name = [];\n\t\tfor(let i = 0; i < title_line.length; i++) {\n\t\t\tkey_name.push(title_line[i]);\n\t\t}\n\t\tconst json_array = [];\n\t\tfor(let i = 1; i < csv_array.length; i++) {\n\t\t\tconst line = csv_array[i];\n\t\t\t/**\n\t\t\t * @type {Object<string, string>}\n\t\t\t * @private\n\t\t\t */\n\t\t\tconst json_data = {};\n\t\t\tfor(let j = 0; j < line.length; j++) {\n\t\t\t\tjson_data[key_name[j]] = line[j];\n\t\t\t}\n\t\t\tjson_array.push(json_data);\n\t\t}\n\t\treturn json_array;\n\t}\n\n\t/**\n\t * 共通の型のJSON配列をCSV配列へ変換\n\t * @param {Array<Object<string, string>>} json_array \n\t * @param {Array<string>} [title_array] \n\t * @returns {Array<Array<string>>}\n\t */\n\tstatic toCSVArrayFromJSONArray(json_array, title_array) {\n\t\tconst csv_array = [];\n\t\tlet title_list = null;\n\t\tif(title_array === undefined) {\n\t\t\ttitle_list = [];\n\t\t\tfor(const key in json_array[0]) {\n\t\t\t\ttitle_list.push(key);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttitle_list = title_array;\n\t\t}\n\t\tcsv_array.push(title_list);\n\t\tfor(let i = 0; i < json_array.length; i++) {\n\t\t\tconst line = json_array[i];\n\t\t\tconst data_list = [];\n\t\t\tfor(let j = 0; j < title_list.length; j++) {\n\t\t\t\tdata_list.push(line[title_list[j]]);\n\t\t\t}\n\t\t\tcsv_array.push(data_list);\n\t\t}\n\t\treturn csv_array;\n\t}\n\n}\n\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/CSV.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "CSV",
    "memberof": "src/CSV.js",
    "static": true,
    "longname": "src/CSV.js~CSV",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/CSV.js",
    "importStyle": "CSV",
    "description": "CSVを扱う",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "parse",
    "memberof": "src/CSV.js~CSV",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/CSV.js~CSV.parse",
    "access": "public",
    "description": "CSVテキストから配列を作成",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\",\"",
        "defaultRaw": ",",
        "name": "separator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "create",
    "memberof": "src/CSV.js~CSV",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/CSV.js~CSV.create",
    "access": "public",
    "description": "配列からCSVテキストを作成",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "csv_array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\",\"",
        "defaultRaw": ",",
        "name": "separator",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\\r\\n\"",
        "defaultRaw": "\r\n",
        "name": "newline",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "toJSONArrayFromCSVArray",
    "memberof": "src/CSV.js~CSV",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/CSV.js~CSV.toJSONArrayFromCSVArray",
    "access": "public",
    "description": "1行目に列名が記載しているCSVをJSON配列に変換",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object<string, string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "csv_array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object<string, string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "toCSVArrayFromJSONArray",
    "memberof": "src/CSV.js~CSV",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/CSV.js~CSV.toCSVArrayFromJSONArray",
    "access": "public",
    "description": "共通の型のJSON配列をCSV配列へ変換",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object<string, string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "json_array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "title_array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/Dialog.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * ダイアログ\n */\nexport default class Dialog {\n\t\n\t/**\n\t * ダイアログを表示する\n\t * \n\t * 利用例\n\t * - Dialog.popup(\"test\", 0, \"test\", Dialog.MB_YESNOCANCEL | Dialog.MB_DEFBUTTON3);\n\t * @param {string} text \n\t * @param {number} [secondstowait=0]\n\t * @param {string} [caption=\"\"]\n\t * @param {number} [type=0]\n\t * @returns {number}\n\t */\n\tstatic popup(text) {\n\t\tlet secondstowait = 0;\n\t\tlet caption = \"\";\n\t\tlet type = 0;\n\t\tlet istype = false;\n\t\tfor(let j = 1; j < arguments.length; j++) {\n\t\t\tif(typeof arguments[j] === \"string\") {\n\t\t\t\tcaption = arguments[j];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(istype) {\n\t\t\t\t\tsecondstowait = type;\n\t\t\t\t\ttype = arguments[j];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttype = arguments[j];\n\t\t\t\t\tistype = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn WScript.CreateObject(\"WScript.Shell\").Popup( text, secondstowait, caption, type );\n\t}\n\n}\n\n/**\n * 「OK」のボタン配置\n * @type {number}\n */\nDialog.MB_OK\t\t\t\t=  0;\n\n/**\n * 「OK」、「キャンセル」のボタン配置\n * @type {number}\n */\nDialog.MB_OKCANCEL\t\t\t=  1;\n\n/**\n * 「中止」、「再試行」、「無視」のボタン配置\n * @type {number}\n */\nDialog.MB_ABORTRETRYIGNORE\t=  2;\n\n/**\n * 「はい」、「いいえ」、「キャンセル」のボタン配置\n * @type {number}\n */\nDialog.MB_YESNOCANCEL\t\t=  3;\n\n/**\n * 「はい」、「いいえ」のボタン配置\n * @type {number}\n */\nDialog.MB_YESNO\t\t\t\t=  4;\n\n/**\n * 「再試行」、「キャンセル」のボタン配置\n * @type {number}\n */\nDialog.MB_RETRYCANCEL\t\t=  5;\n\n/**\n * 中止「Stop」のアイコンのダイアログ\n * @type {number}\n */\nDialog.MB_ICONSTOP\t\t\t= 16;\n\n/**\n * 質問「?」のアイコンのダイアログ\n * @type {number}\n */\nDialog.MB_ICONQUESTION\t\t= 32;\n\n/**\n * 警告「!」のアイコンのダイアログ\n * @type {number}\n */\nDialog.MB_ICONWARNING\t\t= 48;\n\n/**\n * 情報「i」のアイコンのダイアログ\n * @type {number}\n */\nDialog.MB_ICONINFORMATION\t= 64;\n\n/**\n * 「ボタン1」を選択\n * @type {number}\n */\nDialog.MB_DEFBUTTON1\t= 0x0000;\n\n/**\n * 「ボタン2」を選択\n * @type {number}\n */\nDialog.MB_DEFBUTTON2\t= 0x0100;\n\n/**\n * 「ボタン3」を選択\n * @type {number}\n */\nDialog.MB_DEFBUTTON3\t= 0x0200;\n\n/**\n * 「ボタン4」を選択\n * @type {number}\n */\nDialog.MB_DEFBUTTON4\t= 0x0300;\n\n/**\n * タイムアウトが発生\n * @type {number}\n */\nDialog.IDTIMEOUT\t\t= -1;\n\n/**\n * 「OK」を選択\n * @type {number}\n */\nDialog.IDOK\t\t\t\t= 1;\n\n/**\n * 「キャンセル」を選択\n * @type {number}\n */\nDialog.IDCANCEL\t\t\t= 2;\n\n/**\n * 「中止」を選択\n * @type {number}\n */\nDialog.IDABORT\t\t\t= 3;\n\n/**\n * 「再試行」を選択\n * @type {number}\n */\nDialog.IDRETRY\t\t\t= 4;\n\n/**\n * 「無視」を選択\n * @type {number}\n */\nDialog.IDIGNORE\t\t\t= 5;\n\n/**\n * 「はい」を選択\n * @type {number}\n */\nDialog.IDYES\t\t\t= 6;\n\n/**\n * 「いいえ」を選択\n * @type {number}\n */\nDialog.IDNO\t\t\t\t= 7;\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/Dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "Dialog",
    "memberof": "src/Dialog.js",
    "static": true,
    "longname": "src/Dialog.js~Dialog",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/Dialog.js",
    "importStyle": "Dialog",
    "description": "ダイアログ",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "popup",
    "memberof": "src/Dialog.js~Dialog",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Dialog.js~Dialog.popup",
    "access": "public",
    "description": "ダイアログを表示する\n\n利用例\n- Dialog.popup(\"test\", 0, \"test\", Dialog.MB_YESNOCANCEL | Dialog.MB_DEFBUTTON3);",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "secondstowait",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "caption",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/Format.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * 書式に合わせて文字列を組み立てるメソッドを提供\n */\nexport default class Format {\n\n\t/**\n\t * 書式に合わせて文字列を組み立てる\n\t * - ロケール、日付時刻等はサポートしていません。\n\t * - sprintfの変換指定子のpとnはサポートしていません。\n\t * @param {String} text \n\t * @param {...any} parm パラメータは可変引数\n\t * @returns {String}\n\t */\n\tstatic textf() {\n\t\tlet parm_number = 1;\n\t\tconst parm = arguments;\n\t\t/**\n\t\t * @param {number} x\n\t\t * @returns {number}\n\t\t * @private\n\t\t */\n\t\tconst toUnsign  = function(x) {\n\t\t\tif(x >= 0) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst ix = -x;\n\t\t\t\t//16ビットごとに分けてビット反転\n\t\t\t\tlet high = ((~ix) >> 16) & 0xFFFF;\n\t\t\t\thigh *= 0x00010000;\n\t\t\t\tconst low  =  (~ix) & 0xFFFF;\n\t\t\t\treturn high + low + 1;\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * @param {string} istr\n\t\t * @returns {string}\n\t\t * @private\n\t\t */\n\t\tconst func = function(istr) {\n\t\t\t// 1文字目の%を除去\n\t\t\tlet str = istr.substring(1, istr.length);\n\t\t\tlet buff;\n\t\t\t// [6] 変換指定子(最後の1文字を取得)\n\t\t\tbuff = str.match(/.$/);\n\t\t\tconst type = buff[0];\n\t\t\tif(type === \"%\") {\n\t\t\t\treturn(\"%\");\n\t\t\t}\n\t\t\t// ここからパラメータの解析開始\n\t\t\t// [1] 引数順\n\t\t\tbuff = str.match(/^[0-9]+\\$/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\t// 数字だけ切り出す\n\t\t\t\tbuff = buff.substring(0, buff.length - 1);\n\t\t\t\t// 整数へ\n\t\t\t\tparm_number = parseInt(buff , 10);\n\t\t\t}\n\t\t\t// 引数を取得\n\t\t\tlet parameter = parm[parm_number];\n\t\t\tif(typeof parameter !== \"string\" && typeof parameter !== \"number\") {\n\t\t\t\tparameter = parameter.toString();\n\t\t\t}\n\t\t\tparm_number = parm_number + 1;\n\t\t\t// [2] フラグ\n\t\t\tbuff = str.match(/^[-+ #0]+/);\n\t\t\tlet isFlagSharp = false;\n\t\t\tlet isFlagTextAlignLeft = false;\n\t\t\tconst isFlagFill = false;\n\t\t\tlet sFillCharacter = \" \";\n\t\t\tlet isFlagFillZero = false;\n\t\t\tlet isFlagDrawSign = false;\n\t\t\tlet sSignCharacter = \"\";\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tif(buff.indexOf(\"#\") !== -1) {\n\t\t\t\t\tisFlagSharp = true;\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\t\tisFlagTextAlignLeft = true;\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\" \") !== -1) {\n\t\t\t\t\tisFlagDrawSign = true;\n\t\t\t\t\tsSignCharacter = \" \";\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"+\") !== -1) {\n\t\t\t\t\tisFlagDrawSign = true;\n\t\t\t\t\tsSignCharacter = \"+\";\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"0\") !== -1) {\n\t\t\t\t\tisFlagFillZero = true;\n\t\t\t\t\tsFillCharacter = \"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t// [3] 最小フィールド幅\n\t\t\tlet width = 0;\n\t\t\tbuff = str.match(/^([0-9]+|\\*)/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tif(buff.indexOf(\"*\") !== -1) { // 引数で最小フィールド幅を指定\n\t\t\t\t\twidth = parameter;\n\t\t\t\t\tparameter = parm[parm_number];\n\t\t\t\t\tparm_number = parm_number + 1;\n\t\t\t\t}\n\t\t\t\telse { // 数字で指定\n\t\t\t\t\twidth = parseInt(buff , 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// [4] 精度の指定\n\t\t\tlet isPrecision = false;\n\t\t\tlet precision = 0;\n\t\t\tbuff = str.match(/^(\\.((-?[0-9]+)|\\*)|\\.)/); //.-3, .* , .\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tisPrecision = true;\n\t\t\t\tif(buff.indexOf(\"*\") !== -1) { // 引数で精度を指定\n\t\t\t\t\tprecision = parameter;\n\t\t\t\t\tparameter = parm[parm_number];\n\t\t\t\t\tparm_number = parm_number + 1;\n\t\t\t\t}\n\t\t\t\telse if(buff.length === 1) { // 小数点だけの指定\n\t\t\t\t\tprecision = 0;\n\t\t\t\t}\n\t\t\t\telse { // 数字で指定\n\t\t\t\t\tbuff = buff.substring(1, buff.length);\n\t\t\t\t\tprecision = parseInt(buff , 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 長さ修飾子(非サポート)\n\t\t\tbuff = str.match(/^hh|h|ll|l|L|z|j|t/);\n\t\t\tif(buff !== null) {\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t}\n\t\t\t// 文字列を作成する\n\t\t\tlet output = \"\";\n\t\t\tlet isInteger = false;\n\t\t\tswitch(type.toLowerCase()) {\n\t\t\t\t// 数字関連\n\t\t\t\tcase \"d\":\n\t\t\t\tcase \"i\":\n\t\t\t\tcase \"u\":\n\t\t\t\tcase \"b\":\n\t\t\t\tcase \"o\":\n\t\t\t\tcase \"x\":\n\t\t\t\t\tisInteger = true;\n\t\t\t\t\t// falls through\n\t\t\t\tcase \"e\":\n\t\t\t\tcase \"f\":\n\t\t\t\tcase \"g\":\n\t\t\t\t{\n\t\t\t\t\tlet sharpdata = \"\";\n\t\t\t\t\tlet textlength = 0; // 現在の文字を構成するために必要な長さ\n\t\t\t\t\tlet spacesize;  // 追加する横幅\n\t\t\t\t\t// 整数\n\t\t\t\t\tif(isInteger) {\n\t\t\t\t\t\t// 数字に変換\n\t\t\t\t\t\tif(isNaN(parameter)) {\n\t\t\t\t\t\t\tparameter = parseInt(parameter, 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 正負判定\n\t\t\t\t\t\tif((type === \"d\") || (type === \"i\")) {\n\t\t\t\t\t\t\tif(parameter < 0) {\n\t\t\t\t\t\t\t\tsSignCharacter = \"-\";\n\t\t\t\t\t\t\t\tparameter  = -parameter;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparameter  = Math.floor(parameter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif(parameter >= 0) {\n\t\t\t\t\t\t\t\tparameter  = Math.floor(parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tparameter  = Math.ceil(parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 実数\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 数字に変換\n\t\t\t\t\t\tif(isNaN(parameter)) {\n\t\t\t\t\t\t\tparameter = parseFloat(parameter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 正負判定\n\t\t\t\t\t\tif(parameter < 0) {\n\t\t\t\t\t\t\tsSignCharacter = \"-\";\n\t\t\t\t\t\t\tparameter  = -parameter;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!isPrecision) {\n\t\t\t\t\t\t\tprecision = 6;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 文字列を作成していく\n\t\t\t\t\tswitch(type.toLowerCase()) {\n\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\tcase \"i\":\n\t\t\t\t\t\t\toutput += parameter.toString(10);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"u\":\n\t\t\t\t\t\t\toutput += toUnsign(parameter).toString(10);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"b\":\n\t\t\t\t\t\t\toutput += toUnsign(parameter).toString(2);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0b\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"o\":\n\t\t\t\t\t\t\toutput  += toUnsign(parameter).toString(8);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"x\":\n\t\t\t\t\t\tcase \"X\":\n\t\t\t\t\t\t\toutput  += toUnsign(parameter).toString(16);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0x\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"e\":\n\t\t\t\t\t\t\toutput += parameter.toExponential(precision);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"f\":\n\t\t\t\t\t\t\toutput += parameter.toFixed(precision);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"g\":\n\t\t\t\t\t\t\tif(precision === 0) { // 0は1とする\n\t\t\t\t\t\t\t\tprecision = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toutput += parameter.toPrecision(precision);\n\t\t\t\t\t\t\t// 小数点以下の語尾の0の削除\n\t\t\t\t\t\t\tif((!isFlagSharp) && (output.indexOf(\".\") !== -1)) {\n\t\t\t\t\t\t\t\toutput = output.replace(/\\.?0+$/, \"\");  // 1.00 , 1.10\n\t\t\t\t\t\t\t\toutput = output.replace(/\\.?0+e/, \"e\"); // 1.0e , 1.10e\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 上でチェックしているため、ありえない\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// 整数での後処理\n\t\t\t\t\tif(isInteger) {\n\t\t\t\t\t\tif(isPrecision) { // 精度の付け足し\n\t\t\t\t\t\t\tspacesize  = precision - output.length;\n\t\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\t\toutput = \"0\" + output;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 実数での後処理\n\t\t\t\t\telse {\n\t\t\t\t\t\tif(isFlagSharp) { \n\t\t\t\t\t\t\t// sharp指定の時は小数点を必ず残す\n\t\t\t\t\t\t\tif(output.indexOf(\".\") === -1) {\n\t\t\t\t\t\t\t\tif(output.indexOf(\"e\") !== -1) {\n\t\t\t\t\t\t\t\t\toutput = output.replace(\"e\", \".e\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\toutput += \".\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 指数表記は、3桁表示(double型のため)\n\t\t\t\t\tif(output.indexOf(\"e\") !== -1) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @param {string} str\n\t\t\t\t\t\t * @returns {string}\n\t\t\t\t\t\t * @private\n\t\t\t\t\t\t */\n\t\t\t\t\t\tconst buff = function(str) {\n\t\t\t\t\t\t\tconst l   = str.length;\n\t\t\t\t\t\t\tif(str.length === 3) { // e+1 -> e+001\n\t\t\t\t\t\t\t\treturn(str.substring(0, l - 1) + \"00\" + str.substring(l - 1, l));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse { // e+10 -> e+010\n\t\t\t\t\t\t\t\treturn(str.substring(0, l - 2) + \"0\" + str.substring(l - 2, l));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\toutput = output.replace(/e[+-][0-9]{1,2}$/, buff);\n\t\t\t\t\t}\n\t\t\t\t\ttextlength = output.length + sharpdata.length + sSignCharacter.length;\n\t\t\t\t\tspacesize  = width - textlength;\n\t\t\t\t\t// 左よせ\n\t\t\t\t\tif(isFlagTextAlignLeft) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = output + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 0を埋める場合\n\t\t\t\t\tif(isFlagFillZero) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = \"0\" + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// マイナスや、「0x」などを接続\n\t\t\t\t\toutput = sharpdata + output;\n\t\t\t\t\toutput = sSignCharacter + output;\n\t\t\t\t\t// 0 で埋めない場合\n\t\t\t\t\tif((!isFlagFillZero) && (!isFlagTextAlignLeft)) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = \" \" + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 大文字化\n\t\t\t\t\tif(type.toUpperCase() === type) {\n\t\t\t\t\t\toutput = output.toUpperCase();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// 文字列の場合\n\t\t\t\tcase \"c\":\n\t\t\t\t\tif(!isNaN(parameter)) {\n\t\t\t\t\t\tparameter = String.fromCharCode(parameter);\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\tcase \"s\":\n\t\t\t\t{\n\t\t\t\t\tif(!isNaN(parameter)) {\n\t\t\t\t\t\tparameter = parameter.toString(10);\n\t\t\t\t\t}\n\t\t\t\t\toutput = parameter;\n\t\t\t\t\tif(isPrecision) { // 最大表示文字数\n\t\t\t\t\t\tif(output.length > precision) {\n\t\t\t\t\t\t\toutput = output.substring(0, precision);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst s_textlength = output.length; // 現在の文字を構成するために必要な長さ\n\t\t\t\t\tconst s_spacesize  = width - s_textlength;  // 追加する横幅\n\t\t\t\t\t// 左よせ / 右よせ\n\t\t\t\t\tif(isFlagTextAlignLeft) {\n\t\t\t\t\t\tfor(let i = 0; i < s_spacesize; i++) {\n\t\t\t\t\t\t\toutput = output + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 拡張\n\t\t\t\t\t\tconst s = isFlagFillZero ? \"0\" : \" \";\n\t\t\t\t\t\tfor(let i = 0; i < s_spacesize; i++) {\n\t\t\t\t\t\t\toutput = s + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// パーセント\n\t\t\t\tcase \"%\":\n\t\t\t\t\toutput = \"%\";\n\t\t\t\t\tbreak;\n\t\t\t\t// 未サポート\n\t\t\t\tcase \"p\":\n\t\t\t\tcase \"n\":\n\t\t\t\t\toutput = \"(unsupported)\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// 正規表現でチェックしているため、ありえない\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn (output);\t\n\t\t};\n\t\treturn (parm[0].replace(/%[^diubBoxXeEfFgGaAcspn%]*[diubBoxXeEfFgGaAcspn%]/g, func));\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/Format.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "class",
    "name": "Format",
    "memberof": "src/Format.js",
    "static": true,
    "longname": "src/Format.js~Format",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/Format.js",
    "importStyle": "Format",
    "description": "書式に合わせて文字列を組み立てるメソッドを提供",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "textf",
    "memberof": "src/Format.js~Format",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Format.js~Format.textf",
    "access": "public",
    "description": "書式に合わせて文字列を組み立てる\n- ロケール、日付時刻等はサポートしていません。\n- sprintfの変換指定子のpとnはサポートしていません。",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "parm",
        "description": "パラメータは可変引数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/HashMap.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * 文字列と任意のデータを組み合わせるハッシュマップ\n */\nexport default class HashMap {\n\t\n\t/**\n\t * 初期化\n\t * @param {HashMap|Object<string, any>} [hash_map]\n\t */\n\tconstructor(hash_map) {\n\n\t\t/**\n\t\t * @type {Object<string, any>}\n\t\t * @private\n\t\t */\n\t\tthis.map = {};\n\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t */\n\t\tthis._size = 0;\n\t\t\n\t\tif(hash_map !== undefined) {\n\t\t\tif(hash_map.map && hash_map._size) {\n\t\t\t\tfor(const key in hash_map.map) {\n\t\t\t\t\tthis.map[key] = hash_map.map[key];\n\t\t\t\t}\n\t\t\t\tthis._size = hash_map._size;\n\t\t\t}\n\t\t\telse if(typeof hash_map === \"object\") {\n\t\t\t\tfor(const key in hash_map) {\n\t\t\t\t\tif(typeof key === \"string\") {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tthis.map[key] = hash_map[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 内部で利用しているArrayデータのディープコピーを取得する\n\t * @return {any}\n\t */\n\tgetArray() {\n\t\treturn this.clone().map;\n\t}\n\n\t/**\n\t * 各要素に指定した関数を実行する\n\t * @param {function(number, any): boolean} func \n\t * @returns {boolean} result\n\t */\n\teach(func) {\n\t\tlet out = true;\n\t\tfor(const key in this.map) {\n\t\t\tconst x = this.map[key];\n\t\t\tif(func.call(x, key, x) === false) {\n\t\t\t\tout = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\t\n\t/**\n\t * 文字列化\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tlet output = \"\";\n\t\tlet i = 0;\n\t\tfor(const key in this.map) {\n\t\t\toutput += key + \"=>\" + this.map[key];\n\t\t\ti++;\n\t\t\tif(i !== this._size) {\n\t\t\t\toutput += \"\\n\";\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\t\n\t/**\n\t * 指定したキーが含まれるか\n\t * @param {string} key \n\t * @returns {boolean}\n\t */\n\tcontainsKey(key) {\n\t\treturn typeof this.map[key] !== \"undefined\";\n\t}\n\t\n\t/**\n\t * 指定した値が含まれるか\n\t * @param {any} value \n\t * @returns {boolean}\n\t */\n\tcontainsValue(value) {\n\t\tfor(const key in this.map) {\n\t\t\tif(this.map[key] === value) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * 空かどうか\n\t * @returns {boolean}\n\t */\n\tisEmpty() {\n\t\treturn this._size === 0;\n\t}\n\t\n\t/**\n\t * 空にする\n\t */\n\tclear() {\n\t\tthis.map = [];\n\t\tthis._size = 0;\n\t}\n\t\n\t/**\n\t * ディープコピー\n\t * @returns {HashMap}\n\t */\n\tclone() {\n\t\tconst out = new HashMap();\n\t\tfor(const key in this.map) {\n\t\t\tout.map[key] = this.map[key];\n\t\t}\n\t\tout._size = this._size;\n\t\treturn out;\n\t}\n\t\n\t/**\n\t * ハッシュの長さ\n\t * @returns {number}\n\t */\n\tsize() {\n\t\treturn this._size;\n\t}\n\t\n\t/**\n\t * 指定したキーに対して対応する値を取得\n\t * @param {string} key \n\t * @returns {any}\n\t */\n\tget(key) {\n\t\treturn this.map[key];\n\t}\n\t\n\t/**\n\t * 指定したキー、その値を登録\n\t * @param {string} key \n\t * @param {any} value \n\t * @returns {null|any}\n\t */\n\tput(key, value) {\n\t\tif(this.containsKey(key) === false) {\n\t\t\tthis.map[key] = value;\n\t\t\tthis._size = this._size + 1;\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\tconst output = this.map[key];\n\t\t\tthis.map[key] = value;\n\t\t\treturn output;\n\t\t}\n\t}\n\t\n\t/**\n\t * 指定したキー、その値を全て登録\n\t * @param {HashMap|Object<string, any>} hashmap \n\t */\n\tputAll(hashmap) {\n\t\tlet list;\n\t\tif(hashmap instanceof HashMap) {\n\t\t\tlist = hashmap.map;\n\t\t}\n\t\telse {\n\t\t\tlist = hashmap;\n\t\t}\n\t\tfor(const key in list) {\n\t\t\tif(typeof this.map[key] === \"undefined\") {\n\t\t\t\tthis.map[key] = list[key];\n\t\t\t\tthis._size = this._size + 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 指定したキーの値を削除\n\t * @param {string} key \n\t * @returns {null|any}\n\t */\n\tremove(key) {\n\t\tif(this.containsKey(key) === false) {\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\tconst output = this.map[key];\n\t\t\tdelete this.map[key];\n\t\t\tthis._size = this._size - 1;\n\t\t\treturn output;\n\t\t}\n\t}\n}\n\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/HashMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "HashMap",
    "memberof": "src/HashMap.js",
    "static": true,
    "longname": "src/HashMap.js~HashMap",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/HashMap.js",
    "importStyle": "HashMap",
    "description": "文字列と任意のデータを組み合わせるハッシュマップ",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#constructor",
    "access": "public",
    "description": "初期化",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "HashMap",
          "Object<string, any>"
        ],
        "spread": false,
        "optional": true,
        "name": "hash_map",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "map",
    "memberof": "src/HashMap.js~HashMap",
    "static": false,
    "longname": "src/HashMap.js~HashMap#map",
    "access": "private",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "_size",
    "memberof": "src/HashMap.js~HashMap",
    "static": false,
    "longname": "src/HashMap.js~HashMap#_size",
    "access": "private",
    "description": "",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "getArray",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#getArray",
    "access": "public",
    "description": "内部で利用しているArrayデータのディープコピーを取得する",
    "lineNumber": 56,
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "each",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#each",
    "access": "public",
    "description": "各要素に指定した関数を実行する",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(number, any): boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "toString",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "containsKey",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#containsKey",
    "access": "public",
    "description": "指定したキーが含まれるか",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "containsValue",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#containsValue",
    "access": "public",
    "description": "指定した値が含まれるか",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#isEmpty",
    "access": "public",
    "description": "空かどうか",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "clear",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#clear",
    "access": "public",
    "description": "空にする",
    "lineNumber": 128,
    "params": [],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "clone",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#clone",
    "access": "public",
    "description": "ディープコピー",
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HashMap}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HashMap"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "size",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#size",
    "access": "public",
    "description": "ハッシュの長さ",
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "get",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#get",
    "access": "public",
    "description": "指定したキーに対して対応する値を取得",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "put",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#put",
    "access": "public",
    "description": "指定したキー、その値を登録",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "putAll",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#putAll",
    "access": "public",
    "description": "指定したキー、その値を全て登録",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "HashMap",
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "hashmap",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "remove",
    "memberof": "src/HashMap.js~HashMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/HashMap.js~HashMap#remove",
    "access": "public",
    "description": "指定したキーの値を削除",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/Random.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * Collection of tools used in the Random.\n * @private\n */\nclass RandomTool {\n\n\t/**\n\t * Create a 32-bit nonnegative integer.\n\t * @param {number} x \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic unsigned32(x) {\n\t\treturn ((x < 0) ? ((x & 0x7FFFFFFF) + 0x80000000) : x);\n\t}\n\n\t/**\n\t * Multiply two 32-bit integers and output a 32-bit integer.\n\t * @param {number} x1 \n\t * @param {number} x2 \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic multiplication32(x1, x2) {\n\t\tlet b = (x1 & 0xFFFF) * (x2 & 0xFFFF);\n\t\tlet y = RandomTool.unsigned32(b);\n\t\tb = (x1 & 0xFFFF) * (x2 >>> 16);\n\t\ty = RandomTool.unsigned32(y + ((b & 0xFFFF) << 16));\n\t\tb = (x1 >>> 16) * (x2 & 0xFFFF);\n\t\ty = RandomTool.unsigned32(y + ((b & 0xFFFF) << 16));\n\t\treturn (y & 0xFFFFFFFF);\n\t}\n\n}\n\n/**\n * 乱数\n */\nexport default class Random {\n\t\n\t/**\n\t * 初期化\n\t * @param {number} [seed] - Seed number for random number generation. If not specified, create from time.\n\t */\n\tconstructor(seed) {\n\t\t// 「M系列乱数」で乱数を作成します。\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// 比較的長い 2^521 - 1通りを出力します。\n\t\t// 乱数はCでの動作と同じ値が出ることを確認。(seed = 1として1000番目の値が等しいことを確認)\n\n\t\t/**\n\t\t * Random number array.\n\t\t * @private\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.x = [];\n\t\tfor(let i = 0;i < 521;i++) {\n\t\t\tthis.x[i] = 0;\n\t\t}\n\t\tif(arguments.length >= 1) {\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t\telse {\n\t\t\t// 線形合同法で適当に乱数を作成する\n\t\t\tconst seed = ((new Date()).getTime() + Random.seedUniquifier) & 0xFFFFFFFF;\n\t\t\tRandom.seedUniquifier = (Random.seedUniquifier + 1) & 0xFFFFFFFF;\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t}\n\n\t/**\n\t * 内部データをシャッフル\n\t * @private\n\t */\n\t_rnd521() {\n\t\tconst x = this.x;\n\t\tfor(let i = 0; i < 32; i++) {\n\t\t\tx[i] ^= x[i + 489];\n\t\t}\n\t\tfor(let i = 32; i < 521; i++) {\n\t\t\tx[i] ^= x[i - 32];\n\t\t}\n\t}\n\n\t/**\n\t * シード値の初期化\n\t * @param {number} seed\n\t */\n\tsetSeed(seed) {\n\t\t// 伏見「乱数」東京大学出版会,1989 の方法により初期値を設定\n\t\tlet u = 0;\n\t\tconst x = this.x;\n\t\t// seedを使用して線形合同法でx[0-16]まで初期値を設定\n\t\tlet random_seed = seed;\n\t\tfor(let i = 0; i <= 16; i++) {\n\t\t\tfor(let j = 0; j < 32; j++) {\n\t\t\t\trandom_seed = RandomTool.multiplication32(random_seed, 0x5D588B65) + 1;\n\t\t\t\tu = (u >>> 1) + ((random_seed < 0) ? 0x80000000 : 0);\n\t\t\t}\n\t\t\tx[i] = u;\n\t\t}\n\t\t// 残りのビットはx[i] = x[i-32] ^ x[i-521]で生成\n\t\tfor(let i = 16; i < 521; i++) {\n\t\t\tu = (i === 16) ? i : (i - 17);\n\t\t\tx[i] = ((x[u] << 23) & 0xFFFFFFFF) ^ (x[i - 16] >>> 9) ^ x[i - 1];\n\t\t}\n\t\t// ビットをシャッフル\n\t\tfor(let i = 0; i < 4; i++) {\n\t\t\tthis._rnd521();\n\t\t}\n\t\t\n\t\t/**\n\t\t * Number of random number array to use.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.xi = 0;\n\t\t\n\t\t/**\n\t\t * Is keep random numbers based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.haveNextNextGaussian = false;\n\t\t\n\t\t/**\n\t\t * Next random number based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.nextNextGaussian = 0;\n\t}\n\n\t/**\n\t * 32-bit random number.\n\t * @returns {number} - 32ビットの乱数\n\t * @private\n\t */\n\tgenrand_int32() {\n\t\t// 全て使用したら、再び混ぜる\n\t\tif(this.xi === 521) {\n\t\t\tthis._rnd521();\n\t\t\tthis.xi = 0;\n\t\t}\n\t\tconst y = RandomTool.unsigned32(this.x[this.xi]);\n\t\tthis.xi = this.xi + 1;\n\t\treturn y;\n\t}\n\n\t/**\n\t * 指定したビット長以下で表せられる乱数生成\n\t * @param {number} bits - Required number of bits (up to 64 possible).\n\t * @returns {number}\n\t */\n\tnext(bits) {\n\t\tif(bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(bits === 32) {\n\t\t\treturn this.genrand_int32();\n\t\t}\n\t\telse if(bits < 32) {\n\t\t\t// 線形合同法ではないため\n\n\t\t\t// 上位のビットを使用しなくてもいいがJavaっぽく。\n\t\t\treturn (this.genrand_int32() >>> (32 - bits));\n\t\t}\n\t\t// double型のため、52ビットまでは、整数として出力可能\n\t\telse if(bits === 63) {\n\t\t\t// 正の値を出力するように調節\n\t\t\treturn (this.next(32) * 0x80000000 + this.next(32));\n\t\t}\n\t\telse if(bits === 64) {\n\t\t\treturn (this.next(32) * 0x100000000 + this.next(32));\n\t\t}\n\t\telse if(bits < 64) {\n\t\t\treturn (this.genrand_int32() * (1 << (bits - 32)) + (this.genrand_int32()  >>> (64 - bits)));\n\t\t}\n\t}\n\n\t/**\n\t * 8ビット長整数の乱数の配列\n\t * @param {number} size - 必要な長さ\n\t * @returns {Array<number>}\n\t */\n\tnextBytes(size) {\n\t\tconst y = new Array(size);\n\t\t// 配列yに乱数を入れる\n\t\t// 8ビットのために、32ビット乱数を1回回すのはもったいない\n\t\tfor(let i = 0;i < y.length; i++) {\n\t\t\ty[i] = this.next(8);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 16ビット長整数の乱数\n\t * @returns {number}\n\t */\n\tnextShort() {\n\t\treturn (this.next(16));\n\t}\n\n\t/**\n\t * 32ビット長整数の乱数\n\t * @param {number} [x] - 指定した値未満の数値を作る\n\t * @returns {number}\n\t */\n\tnextInt(x) {\n\t\tif((x !== undefined) && (typeof x === \"number\")) {\n\t\t\tlet r, y;\n\t\t\tdo {\n\t\t\t\tr = RandomTool.unsigned32(this.genrand_int32());\n\t\t\t\ty = r % x;\n\t\t\t} while((r - y + x) > 0x100000000 );\n\t\t\treturn y;\n\t\t}\n\t\treturn (this.next(32) & 0xFFFFFFFF);\n\t}\n\n\t/**\n\t * 64ビット長整数の乱数\n\t * @returns {number}\n\t */\n\tnextLong() {\n\t\treturn this.next(64);\n\t}\n\n\t/**\n\t * bool値の乱数\n\t * @returns {boolean}\n\t */\n\tnextBoolean() {\n\t\t// 1ビットのために、32ビット乱数を1回回すのはもったいない\n\t\treturn (this.next(1) !== 0);\n\t}\n\n\t/**\n\t * float精度の実数\n\t * @returns {number}\n\t */\n\tnextFloat() {\n\t\treturn (this.next(24) / 0x1000000);\n\t}\n\n\t/**\n\t * double精度の実数\n\t * @returns {number}\n\t */\n\tnextDouble() {\n\t\tconst a1 = this.next(26) * 0x8000000 + this.next(27);\n\t\tconst a2 = 0x8000000 * 0x4000000;\n\t\treturn (a1 / a2);\n\t}\n\n\t/**\n\t * ガウシアン分布に従う乱数\n\t * @returns {number}\n\t */\n\tnextGaussian() {\n\t\tif(this.haveNextNextGaussian) {\n\t\t\tthis.haveNextNextGaussian = false;\n\t\t\treturn this.nextNextGaussian;\n\t\t}\n\t\t// Box-Muller法\n\t\tconst a = Math.sqrt( -2 * Math.log( this.nextDouble() ) );\n\t\tconst b = 2 * Math.PI * this.nextDouble();\n\t\tconst y = a * Math.sin(b);\n\t\tthis.nextNextGaussian = a * Math.cos(b);\n\t\tthis.haveNextNextGaussian = true;\n\t\treturn y;\n\t}\n}\n\n/**\n * 乱数生成用の初期シード値\n * @type {number}\n * @ignore\n */\nRandom.seedUniquifier = 0x87654321;\n\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/Random.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "class",
    "name": "RandomTool",
    "memberof": "src/Random.js",
    "static": true,
    "longname": "src/Random.js~RandomTool",
    "access": "private",
    "export": false,
    "importPath": "senkowsh/src/Random.js",
    "importStyle": null,
    "description": "Collection of tools used in the Random.",
    "lineNumber": 15,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "unsigned32",
    "memberof": "src/Random.js~RandomTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Random.js~RandomTool.unsigned32",
    "access": "private",
    "description": "Create a 32-bit nonnegative integer.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "multiplication32",
    "memberof": "src/Random.js~RandomTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Random.js~RandomTool.multiplication32",
    "access": "private",
    "description": "Multiply two 32-bit integers and output a 32-bit integer.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "Random",
    "memberof": "src/Random.js",
    "static": true,
    "longname": "src/Random.js~Random",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/Random.js",
    "importStyle": "Random",
    "description": "乱数",
    "lineNumber": 49,
    "interface": false
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#constructor",
    "access": "public",
    "description": "初期化",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "seed",
        "description": "Seed number for random number generation. If not specified, create from time."
      }
    ]
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "x",
    "memberof": "src/Random.js~Random",
    "static": false,
    "longname": "src/Random.js~Random#x",
    "access": "private",
    "description": "Random number array.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "_rnd521",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#_rnd521",
    "access": "private",
    "description": "内部データをシャッフル",
    "lineNumber": 85,
    "params": [],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "setSeed",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#setSeed",
    "access": "public",
    "description": "シード値の初期化",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "xi",
    "memberof": "src/Random.js~Random",
    "static": false,
    "longname": "src/Random.js~Random#xi",
    "access": "private",
    "description": "Number of random number array to use.",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "haveNextNextGaussian",
    "memberof": "src/Random.js~Random",
    "static": false,
    "longname": "src/Random.js~Random#haveNextNextGaussian",
    "access": "private",
    "description": "Is keep random numbers based on Gaussian distribution.",
    "lineNumber": 134,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "nextNextGaussian",
    "memberof": "src/Random.js~Random",
    "static": false,
    "longname": "src/Random.js~Random#nextNextGaussian",
    "access": "private",
    "description": "Next random number based on Gaussian distribution.",
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "genrand_int32",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#genrand_int32",
    "access": "private",
    "description": "32-bit random number.",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - 32ビットの乱数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "32ビットの乱数"
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "next",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#next",
    "access": "public",
    "description": "指定したビット長以下で表せられる乱数生成",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "Required number of bits (up to 64 possible)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "nextBytes",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#nextBytes",
    "access": "public",
    "description": "8ビット長整数の乱数の配列",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "必要な長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "nextShort",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#nextShort",
    "access": "public",
    "description": "16ビット長整数の乱数",
    "lineNumber": 210,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "nextInt",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#nextInt",
    "access": "public",
    "description": "32ビット長整数の乱数",
    "lineNumber": 219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "x",
        "description": "指定した値未満の数値を作る"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "nextLong",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#nextLong",
    "access": "public",
    "description": "64ビット長整数の乱数",
    "lineNumber": 235,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "nextBoolean",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#nextBoolean",
    "access": "public",
    "description": "bool値の乱数",
    "lineNumber": 243,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "nextFloat",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#nextFloat",
    "access": "public",
    "description": "float精度の実数",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "nextDouble",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#nextDouble",
    "access": "public",
    "description": "double精度の実数",
    "lineNumber": 260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "nextGaussian",
    "memberof": "src/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Random.js~Random#nextGaussian",
    "access": "public",
    "description": "ガウシアン分布に従う乱数",
    "lineNumber": 270,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/SenkoWSH.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport typeArrayList from \"./ArrayList.js\";\nimport typeCSV from \"./CSV.js\";\nimport typeDialog from \"./Dialog.js\";\nimport typeSFile from \"./SFile.js\";\nimport typeFormat from \"./Format.js\";\nimport typeHashMap from \"./HashMap.js\";\nimport typeRandom from \"./Random.js\";\nimport typeSystem from \"./System.js\";\n\n/**\n * @type {typeof typeArrayList}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nArrayList = typeArrayList;\n\n/**\n * @type {typeof typeCSV}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nCSV = typeCSV;\n\n/**\n * @type {typeof typeDialog}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nDialog = typeDialog;\n\n/**\n * @type {typeof typeSFile}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nSFile = typeSFile;\n\n/**\n * @type {typeof typeFormat}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nFormat = typeFormat;\n\n/**\n * @type {typeof typeHashMap}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nHashMap = typeHashMap;\n\n/**\n * @type {typeof typeRandom}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nRandom = typeRandom;\n\n/**\n * @type {typeof typeSystem}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nSystem = typeSystem;\n\nimport StringWSH from \"./StringWSH.js\";\n\n/**\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-global-assign\nconsole = {\n\t// @ts-ignore\n\tlog : function(text) {\n\t\t// eslint-disable-next-line no-undef\n\t\tSystem.out.println(text);\n\t}\n};\n\n// @ts-ignore\nString.prototype.replaceAll = function(target, replacement) {\n\t// @ts-ignore\n\treturn StringWSH.replaceAll(this, target, replacement);\n};\n\n// @ts-ignore\nString.prototype.trim = function() {\n\t// @ts-ignore\n\treturn StringWSH.trim(this);\n};\n\n// @ts-ignore\nString.prototype.each = function(func) {\n\t// @ts-ignore\n\treturn StringWSH.each(this, func);\n};\n\n// @ts-ignore\nString.prototype.isHighSurrogateAt = function(index) {\n\t// @ts-ignore\n\treturn StringWSH.isHighSurrogateAt(this, index);\n};\n\n// @ts-ignore\nString.prototype.isLowSurrogateAt = function(index) {\n\t// @ts-ignore\n\treturn StringWSH.isLowSurrogateAt(this, index);\n};\n\n// @ts-ignore\nString.prototype.isSurrogatePairAt = function(index) {\n\t// @ts-ignore\n\treturn StringWSH.isSurrogatePairAt(this, index);\n};\n\n// @ts-ignore\nString.prototype.codePointAt = function(index) {\n\t// @ts-ignore\n\treturn StringWSH.codePointAt(this, index);\n};\n\n// @ts-ignore\nString.prototype.codePointBefore = function(index) {\n\t// @ts-ignore\n\treturn StringWSH.codePointBefore(this, index);\n};\n\n// @ts-ignore\nString.prototype.codePointCount = function(beginIndex, endIndex) {\n\t// @ts-ignore\n\treturn StringWSH.codePointCount(this, beginIndex, endIndex);\n};\n\n// @ts-ignore\nString.prototype.offsetByCodePoints = function(index, codePointOffset) {\n\t// @ts-ignore\n\treturn StringWSH.codePointoffsetByCodePointsCount(this, index, codePointOffset);\n};\n\n// @ts-ignore\nString.fromCodePoint = function(codepoint) {\n\t// @ts-ignore\n\treturn StringWSH.fromCodePoint(codepoint);\n};\n\n// @ts-ignore\nString.prototype.startsWith = function(prefix) {\n\t// @ts-ignore\n\treturn StringWSH.startsWith(this, prefix);\n};\n\n// @ts-ignore\nString.prototype.endsWith = function(prefix) {\n\t// @ts-ignore\n\treturn StringWSH.endsWith(this, prefix);\n};\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/SenkoWSH.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "replaceAll",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~replaceAll",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "replacement",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "trim",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~trim",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "each",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~each",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "isHighSurrogateAt",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~isHighSurrogateAt",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "isLowSurrogateAt",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~isLowSurrogateAt",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "isSurrogatePairAt",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~isSurrogatePairAt",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "codePointAt",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~codePointAt",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "codePointBefore",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~codePointBefore",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "codePointCount",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~codePointCount",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "beginIndex",
        "types": [
          "*"
        ]
      },
      {
        "name": "endIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "offsetByCodePoints",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~offsetByCodePoints",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "codePointOffset",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "fromCodePoint",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~fromCodePoint",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "codepoint",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "startsWith",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~startsWith",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "endsWith",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~endsWith",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/SFile.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * ファイル／フォルダ／URL\n */\nexport default class SFile {\n\n\t/**\n\t * 初期化\n\t * @param {string|SFile} pathname ファイル名／フォルダ名／URLアドレス\n\t */\n\tconstructor(pathname) {\n\t\tif(arguments.length !== 1) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\n\t\t/**\n\t\t * @type {string}\n\t\t * @private\n\t\t */\n\t\tthis.pathname = \"\";\n\n\t\tif((typeof pathname === \"string\")||(pathname instanceof String)) {\n\t\t\t// \\を/に置き換える\n\t\t\tthis.pathname = pathname.replace(/\\\\/g, \"/\" );\n\t\t}\n\t\telse if(pathname instanceof SFile) {\n\t\t\tthis.pathname = pathname.getAbsolutePath();\n\t\t}\n\t\telse {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @private\n\t\t */\n\t\tthis.is_http = /^htt/.test(this.pathname);\n\n\t\t/**\n\t\t * @type {any}\n\t\t * @private\n\t\t */\n\t\tthis.fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n\t}\n\n\t/**\n\t * ファイルの削除\n\t * @returns {boolean}\n\t */\n\tremove() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(this.isFile()) {\n\t\t\treturn this.fso.DeleteFile(this.pathname);\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\treturn this.fso.DeleteFolder(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * ファイルが存在するか\n\t * @returns {boolean}\n\t */\n\texists() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tlet out = this.isFile();\n\t\tif(out === false) {\n\t\t\tout = this.isDirectory();\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * ファイルのコピー\n\t * @param {string|SFile} file_obj\n\t * @returns {boolean}\n\t */\n\tcopy(file_obj) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst file = new SFile(file_obj);\n\t\tif(this.isFile()) {\n\t\t\treturn this.fso.CopyFile(this.pathname, file.getAbsolutePath(), true);\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\treturn this.fso.CopyFolder(this.pathname, file.getAbsolutePath(), true);\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * ファイルの移動\n\t * @param {string|SFile} file_obj\n\t * @returns {boolean}\n\t */\n\tmove(file_obj) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst file = new SFile(file_obj);\n\t\tif(this.isFile()) {\n\t\t\tthis.fso.MoveFile(this.pathname, file.getAbsolutePath());\n\t\t\tthis.pathname = file.getAbsolutePath();\n\t\t\treturn true;\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\tthis.fso.MoveFolder(this.pathname, file.getAbsolutePath());\n\t\t\tthis.pathname = file.getAbsolutePath();\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * ファイル名を変更\n\t * @param {string|SFile} file_obj\n\t * @returns {boolean}\n\t */\n\trenameTo(file_obj) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst name = new SFile(file_obj);\n\t\tif(this.isFile()) {\n\t\t\t// 例えばファイル名を大文字から小文字に変換といった場合、\n\t\t\t// Scripting.FileSystemObject の仕様によりエラーが発生するため、\n\t\t\t// 別のファイル名を経由する\n\t\t\tconst file = this.fso.getFile(this.pathname);\n\t\t\tconst key = ((Math.random() * 0x7FFFFFFF) & 0x7FFFFFFF).toString(16);\n\t\t\tfile.Name = name.getName() + key;\n\t\t\tfile.Name = name.getName();\n\t\t\tthis.pathname = name.getAbsolutePath();\n\t\t\treturn true;\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\tconst file = this.fso.getFolder(this.pathname);\n\t\t\tconst key = ((Math.random() * 0x7FFFFFFF) & 0x7FFFFFFF).toString(16);\n\t\t\tfile.Name = name.getName() + key;\n\t\t\tfile.Name = name.getName();\n\t\t\tthis.pathname = name.getAbsolutePath();\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * 文字列化\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.getAbsolutePath();\n\t}\n\n\t/**\n\t * 名前を取得\n\t * @returns {string}\n\t */\n\tgetName() {\n\t\tif(this.is_http) {\n\t\t\t// 最後がスラッシュで終えている場合は、ファイル名取得できない\n\t\t\tif(this.isDirectory()) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tconst slashsplit = this.pathname.split(\"/\");\n\t\t\treturn slashsplit[slashsplit.length - 1];\n\t\t}\n\t\telse {\n\t\t\treturn this.fso.GetFileName(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * 親フォルダの絶対パス\n\t * @returns {string}\n\t */\n\tgetParent() {\n\t\tconst x = this.getAbsolutePath().match(/.*[/\\\\]/)[0];\n\t\treturn x.substring(0 ,x.length - 1);\n\t}\n\n\t/**\n\t * 親フォルダ\n\t * @returns {SFile}\n\t */\n\tgetParentFile() {\n\t\treturn new SFile(this.getParent());\n\t}\n\n\t/**\n\t * 拡張子（ドットを含まない）\n\t * @returns {string}\n\t */\n\tgetExtensionName() {\n\t\tif(this.is_http) {\n\t\t\tconst dotlist = this.getName().split(\".\");\n\t\t\treturn dotlist[dotlist.length - 1];\n\t\t}\n\t\telse {\n\t\t\treturn this.fso.GetExtensionName(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * 絶対パスかどうか\n\t * @returns {boolean}\n\t */\n\tisAbsolute() {\n\t\tif(this.is_http) {\n\t\t\treturn this.getAbsolutePath() === this.pathname;\n\t\t}\n\t\telse {\n\t\t\tconst name = this.pathname.replace(\"/\", \"\\\\\");\n\t\t\treturn this.fso.GetAbsolutePathName(this.pathname) === name;\n\t\t}\n\t}\n\n\t/**\n\t * フォルダかどうか\n\t * @returns {boolean}\n\t */\n\tisDirectory() {\n\t\tif(this.is_http) {\n\t\t\t// 最後がスラッシュで終えている場合はディレクトリ\n\t\t\treturn /\\/$/.test(this.pathname);\n\t\t}\n\t\telse {\n\t\t\treturn this.fso.FolderExists(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * ファイルかどうか\n\t * @returns {boolean}\n\t */\n\tisFile() {\n\t\tif(this.is_http) {\n\t\t\t// 最後がスラッシュで終えていない場合はファイル\n\t\t\treturn /[^/]$/.test(this.pathname);\n\t\t}\n\t\telse {\n\t\t\treturn this.fso.FileExists(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * 隠しファイルかどうか\n\t * @returns {boolean}\n\t */\n\tisHidden() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(this.isFile()) {\n\t\t\tconst file = this.fso.getFile(this.pathname);\n\t\t\treturn (file.Attributes & 2) !== 0;\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\tconst folder = this.fso.getFolder(this.pathname);\n\t\t\treturn (folder.Attributes & 2) !== 0;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * 更新日を取得\n\t * @returns {Date}\n\t */\n\tlastModified() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(this.isFile()) {\n\t\t\treturn new Date(this.fso.getFile(this.pathname).DateLastModified);\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\treturn new Date(this.fso.getFolder(this.pathname).DateLastModified);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * 更新日を設定（ファイルのみ対応）\n\t * @param {Date} date\n\t * @returns {boolean}\n\t */\n\tsetLastModified(date) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(this.isFile()) {\n\t\t\tconst shell = new ActiveXObject(\"Shell.Application\");\n\t\t\tconst folder = shell.NameSpace(this.getParent());\n\t\t\tconst file = folder.ParseName(this.getName());\n\t\t\tconst date_string =\n\t\t\t\tdate.getFullYear() + \"/\" + (date.getMonth() + 1) + \"/\" + (date.getDate()) + \" \" +\n\t\t\t\tdate.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\t\t\tfile.ModifyDate = date_string;\n\t\t\treturn true;\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * ファイルサイズ\n\t * @returns {number}\n\t */\n\tlength() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(this.isFile()) {\n\t\t\treturn this.fso.getFile(this.pathname).Size;\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\treturn this.fso.getFolder(this.pathname).Size;\n\t\t}\n\t\telse {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * 配下のファイル名の一覧を取得\n\t * @returns {string[]}\n\t */\n\tgetFiles() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isDirectory) {\n\t\t\treturn null;\n\t\t}\n\t\tconst out = [];\n\t\tconst list = new Enumerator(this.fso.getFolder(this.pathname).Files);\n\t\tfor(let i = 0; !list.atEnd(); list.moveNext()) {\n\t\t\tout[i++] = list.item().Name;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 配下のサブフォルダ名の一覧を取得\n\t * @returns {string[]}\n\t */\n\tgetSubFolders() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isDirectory) {\n\t\t\treturn null;\n\t\t}\n\t\tconst out = [];\n\t\tconst list = new Enumerator(this.fso.getFolder(this.pathname).SubFolders);\n\t\tfor(let i = 0; !list.atEnd(); list.moveNext()) {\n\t\t\tout[i++] = list.item().Name;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 区切り文字と終端を正規化した文字列を取得\n\t * @returns {string}\n\t */\n\tgetNormalizedPathName() {\n\t\tif(this.pathname === \"\") {\n\t\t\treturn \".\\\\\";\n\t\t}\n\t\tlet name = this.pathname.replace(/\\//g, \"\\\\\");\n\t\tif(name.slice(-1) !== \"\\\\\") {\n\t\t\tname += \"\\\\\";\n\t\t}\n\t\treturn name;\n\t}\n\n\t/**\n\t * サブフォルダの中まで探索して全てのファイルとフォルダを取得\n\t * @returns {string[]}\n\t */\n\tgetAllFiles() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isDirectory) {\n\t\t\treturn null;\n\t\t}\n\t\tconst out = [];\n\t\tconst path = [];\n\t\tconst collection = [];\n\t\tlet pointer = 0;\n\t\tlet list;\n\t\tlet targetfolder;\n\t\tpath[pointer] = this.getNormalizedPathName();\n\t\ttargetfolder = this.fso.getFolder(path[pointer]);\n\t\tlist = new Enumerator(this.fso.getFolder(targetfolder).Files);\n\t\tfor(; !list.atEnd(); list.moveNext()) {\n\t\t\tout.push(path[pointer] + list.item().Name);\n\t\t}\n\t\tif(targetfolder.SubFolders.Count === 0) {\n\t\t\treturn out;\n\t\t}\n\t\tcollection[pointer] = new Enumerator(targetfolder.SubFolders);\n\t\tpointer++;\n\t\twhile(true) {\n\t\t\tpath[pointer] = path[pointer - 1] + collection[pointer - 1].item().Name;\n\t\t\tout.push(path[pointer]);\n\t\t\tpath[pointer] += \"\\\\\";\n\t\t\ttargetfolder = this.fso.getFolder(path[pointer]);\n\t\t\tlist = new Enumerator(targetfolder.Files);\n\t\t\tfor(; !list.atEnd(); list.moveNext()) {\n\t\t\t\tout.push(path[pointer] + list.item().Name);\n\t\t\t}\n\t\t\tif(targetfolder.SubFolders.Count === 0) {\n\t\t\t\twhile(true) {\n\t\t\t\t\tif(pointer === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcollection[pointer - 1].moveNext();\n\t\t\t\t\tif(collection[pointer - 1].atEnd()) {\n\t\t\t\t\t\tpointer--;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(pointer === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcollection[pointer] = new Enumerator(targetfolder.SubFolders);\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 配下のファイル名とフォルダ名を取得\n\t * @returns {string[]}\n\t */\n\tlist() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isDirectory) {\n\t\t\treturn null;\n\t\t}\n\t\tconst files = this.getFiles();\n\t\tconst subfolders = this.getSubFolders();\n\t\tconst out = [];\n\t\tfor(let j = 0; j < subfolders.length;) {\n\t\t\tout.push(subfolders[j++]);\n\t\t}\n\t\tfor(let j = 0; j < files.length;) {\n\t\t\tout.push(files[j++]);\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 絶対パスを取得\n\t * @returns {string}\n\t */\n\tgetAbsolutePath() {\n\t\tif(this.is_http) {\n\t\t\t// ホストとファイルに分ける\n\t\t\tconst hosttext = this.pathname.match(/^http[^/]+\\/\\/[^/]+\\//)[0];\n\t\t\tconst filetext = this.pathname.substr(hosttext.length);\n\t\t\t// パスを1つずつ解析しながら辿っていく\n\t\t\tlet name = hosttext;\n\t\t\tconst namelist = filetext.split(\"/\");\n\t\t\tlet i;\n\t\t\tfor(i = 0; i < namelist.length; i++) {\n\t\t\t\tif((namelist[i] === \"\") || (namelist[i] === \".\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(namelist[i] === \"..\") {\n\t\t\t\t\tname = name.substring(0 ,name.length - 1).match(/.*\\//)[0];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tname += namelist[i];\n\t\t\t\tif(i !== namelist.length - 1) {\n\t\t\t\t\tname += \"/\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t\telse {\n\t\t\treturn this.fso.GetAbsolutePathName(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * フォルダを作成\n\t * - フォルダは1つのみ指定可能\n\t * - すでにフォルダがある場合はエラーを返す。\n\t * @returns {boolean}\n\t */\n\tmkdir() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst filename = this.getAbsolutePath();\n\t\tif(this.fso.FileExists(filename)) {\n\t\t\t// ファイルがあるため、フォルダを作れない\n\t\t\treturn false;\n\t\t}\n\t\telse if(this.fso.FolderExists(filename)) {\n\t\t\t// フォルダが既にあるため、TRUEで返す\n\t\t\treturn true;\n\t\t}\n\t\t// フォルダがないので作成する\n\t\tthis.fso.CreateFolder(filename);\n\t\t// 10秒間作られるまで待つ\n\t\tfor(let i = 0; i < (20 * 10); i++) {\n\t\t\tif(this.fso.FolderExists(filename)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tWScript.Sleep(50); // 50ms\n\t\t}\n\t\t// いつまで待ってもフォルダが作られないので失敗\n\t\treturn false;\n\t}\n\n\t/**\n\t * フォルダを作成\n\t * - 作成したいフォルダを続けて記載が可能\n\t * - フォルダがない場合はフォルダを作成していく\n\t * @returns {boolean}\n\t */\n\tmkdirs() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst name = this.pathname.replace(\"/\", \"\\\\\").split(\"\\\\\");\n\t\tlet dir  = \"\";\n\t\tfor(let i = 0; i < name.length; i++) {\n\t\t\tdir += name[i];\n\t\t\tif(!(new SFile(dir)).mkdir()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tdir += \"\\\\\";\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * ファイルを開く\n\t * @param {number} [style=1] - 起動オプション\n\t * @param {boolean} [is_wait=false] - プロセスが終了するまで待つ\n\t * @returns {void}\n\t */\n\trun(style, is_wait) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst NormalFocus = 1;\n\t\tconst intWindowStyle = style !== undefined ? style : NormalFocus;\n\t\tconst bWaitOnReturn = is_wait !== undefined ? is_wait : false;\n\t\tconst objWShell = new ActiveXObject(\"WScript.Shell\");\n\t\t// @ts-ignore\n\t\tobjWShell.Run(this.getAbsolutePath(), intWindowStyle, bWaitOnReturn);\n\t}\n\n\t/**\n\t * 1行書き加える\n\t * @param {string} text\n\t * @returns {boolean}\n\t */\n\twriteLine(text) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tlet file;\n\t\tif(this.isFile()) {\n\t\t\tconst ForAppending = 8;\n\t\t\tfile = this.fso.OpenTextFile(this.pathname, ForAppending);\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tfile = this.fso.CreateTextFile(this.pathname, true);\n\t\t}\n\t\tfile.WriteLine(text);\n\t\tfile.Close();\n\t\treturn true;\n\t}\n\n\t/**\n\t * テキストファイルを開く\n\t * @param {string} [charset=\"_autodetect_all\"] - 文字コード\n\t * @returns {string}\n\t */\n\tgetTextFile(charset) {\n\t\tconst icharset = charset !== undefined ? charset : \"_autodetect_all\";\n\t\tconst inewline = \"\\n\"; //javascript上での改行\n\t\tlet text = null;\n\t\tif(/^htt/.test(this.pathname)) {\n\t\t\tconst http = SFile.createXMLHttpRequest();\n\t\t\tif(http === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\thttp.open(\"GET\", this.pathname, false);\n\t\t\ttry {\n\t\t\t\thttp.send(null);\n\t\t\t\ttext = http.responseText;\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\ttext = \"error\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(/shift_jis|sjis|ascii|unicode|utf-16le/i.test(icharset)) {\n\t\t\t\t// Scripting.FileSystemObject で開く\n\t\t\t\tconst forreading = 1;\n\t\t\t\tlet tristate = 0;\n\t\t\t\tif(/ascii/i.test(icharset)) {\n\t\t\t\t\t// ASCII\n\t\t\t\t\ttristate = 0;\n\t\t\t\t}\n\t\t\t\telse if(/shift_jis|sjis/i.test(icharset)) {\n\t\t\t\t\t// システムのデフォルト(日本語のOSだと仮定)\n\t\t\t\t\ttristate = -2;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// utf-16le\n\t\t\t\t\ttristate = -1;\n\t\t\t\t}\n\t\t\t\tconst open_file = this.fso.OpenTextFile(this.pathname, forreading, true, tristate );\n\t\t\t\ttext = open_file.ReadAll();\n\t\t\t\topen_file.Close();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// より自由なコードで開く（速度は遅い）\n\t\t\t\t// 使用可能な charset については下記を参照\n\t\t\t\t// HKEY_CLASSES_ROOT\\MIME\\Database\\Charset\n\t\t\t\tconst adTypeText = 2;\n\t\t\t\tconst adReadAll = -1;\n\t\t\t\tconst stream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\t\tstream.type = adTypeText;\n\t\t\t\tstream.charset = icharset;\n\t\t\t\tstream.open();\n\t\t\t\tstream.loadFromFile(this.pathname);\n\t\t\t\ttext = stream.readText(adReadAll);\n\t\t\t\tstream.close();\n\t\t\t\t// 文字コードが自動取得の場合、BOMまで読み込んでしまうのを防止する\n\t\t\t\tif((icharset === \"_autodetect_all\")||(icharset === \"_autodetect\")) {\n\t\t\t\t\tlet newcharset = \"\";\n\t\t\t\t\t// 1文字以上のとき\n\t\t\t\t\tif(text.length > 1) {\n\t\t\t\t\t\t// utf-16le\n\t\t\t\t\t\tif(text.charCodeAt(0) === 0xfeff) {\n\t\t\t\t\t\t\t// 通常は、このルートはBOM付きutf-16leのときに通るが、\n\t\t\t\t\t\t\t// BOM付きutf-8でも通る場合がなぜかある。（後述）\n\t\t\t\t\t\t\tnewcharset = \"unicode\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// utf-16be\n\t\t\t\t\t\telse if(text.charCodeAt(0) === 0xfffe) {\n\t\t\t\t\t\t\tnewcharset = \"unicodeFFFE\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 2文字以上のとき\n\t\t\t\t\tif(text.length > 2) {\n\t\t\t\t\t\t// BOM付きutf-8でなぜかこの文字がくっつく場合がある。\n\t\t\t\t\t\tif(\t(text.charCodeAt(0) === 0x30fb) &&\n\t\t\t\t\t\t\t(text.charCodeAt(1) === 0xff7f)) {\n\t\t\t\t\t\t\tnewcharset = \"utf-8\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 3文字以上のとき\n\t\t\t\t\tif(text.length > 3) {\n\t\t\t\t\t\t// utf-8\n\t\t\t\t\t\tif(\t(text.charCodeAt(0) === 0xef) &&\n\t\t\t\t\t\t\t(text.charCodeAt(1) === 0xbb) &&\n\t\t\t\t\t\t\t(text.charCodeAt(2) === 0xbf)) {\n\t\t\t\t\t\t\tnewcharset = \"utf-8\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 上判定でBOM付きが分かった場合、正しい文字コードで取得する\n\t\t\t\t\tif(newcharset !== \"\") {\n\t\t\t\t\t\tconst stream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\t\t\t\tstream.type = adTypeText;\n\t\t\t\t\t\tstream.charset = newcharset;\n\t\t\t\t\t\tstream.open();\n\t\t\t\t\t\tstream.loadFromFile(this.pathname);\n\t\t\t\t\t\ttext = stream.readText(adReadAll);\n\t\t\t\t\t\tstream.close();\n\t\t\t\t\t}\n\t\t\t\t\t// BOM付きutf-8 でも BOM付きutf-16le と判定した場合の対処\n\t\t\t\t\tif((text.length > 1) && (text.charCodeAt(0) === 0xbbef)) {\n\t\t\t\t\t\tconst stream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\t\t\t\tstream.type = adTypeText;\n\t\t\t\t\t\tstream.charset = \"utf-8\";\n\t\t\t\t\t\tstream.open();\n\t\t\t\t\t\tstream.loadFromFile(this.pathname);\n\t\t\t\t\t\ttext = stream.readText(adReadAll);\n\t\t\t\t\t\tstream.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(text !== null) {\n\t\t\treturn text.replace(/\\r\\n?|\\n/g, inewline); //改行コードを統一\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * テキストファイルを保存\n\t * @param {string} text\n\t * @param {string} [charset=\"utf-8\"] - 文字コード\n\t * @param {string} [newline=\"\\n\"] - 改行コード\n\t * @param {boolean} [issetBOM=true] - BOMの有無(utf-8のみ有効 )\n\t * @returns {boolean}\n\t */\n\tsetTextFile(text, charset, newline, issetBOM) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst icharset = charset !== undefined ? charset : \"utf-8\";\n\t\tconst inewline = newline !== undefined ? newline : \"\\n\";\n\t\tconst iissetBOM = issetBOM !== undefined ? issetBOM : true; //utf-8のみ有効 BOMありかなし\n\t\tif(/shift_jis|sjis|ascii|unicode|utf-16le/i.test(icharset)) {\n\t\t\t// Scripting.FileSystemObject で書き込む\n\t\t\tconst forwriting = 2;\n\t\t\tlet tristate = 0;\n\t\t\tif(/ascii/i.test(icharset)) {\n\t\t\t\t// ASCII\n\t\t\t\ttristate = 0;\n\t\t\t}\n\t\t\telse if(/shift_jis|sjis/i.test(icharset)) {\n\t\t\t\t// システムのデフォルト(日本語のOSだと仮定)\n\t\t\t\ttristate = -2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// utf-16le\n\t\t\t\ttristate = -1;\n\t\t\t}\n\t\t\tconst open_file = this.fso.OpenTextFile(this.pathname, forwriting, true, tristate );\n\t\t\topen_file.Write(text.replace(/\\r\\n?|\\n/g, inewline));\n\t\t\topen_file.Close();\n\t\t}\n\t\telse {\n\t\t\t// ADODB.Streamで書き込む\n\t\t\tconst adTypeBinary = 1;\n\t\t\tconst adTypeText = 2;\n\t\t\tconst adSaveCreateOverWrite = 2;\n\t\t\t// 使用可能な charset については下記を参照\n\t\t\t// HKEY_CLASSES_ROOT\\MIME\\Database\\Charset\n\t\t\tlet stream;\n\t\t\tstream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\tstream.type = adTypeText;\n\t\t\tstream.charset = icharset;\n\t\t\tstream.open();\n\t\t\tstream.writeText(text.replace(/\\r\\n?|\\n/g, inewline)); //改行コードを統一\n\t\t\tif(/utf-8/.test(icharset.toLowerCase()) && (!iissetBOM)) {\n\t\t\t\tstream.position = 0;\n\t\t\t\tstream.type = adTypeBinary;\n\t\t\t\tstream.position = 3;\n\t\t\t\tconst binary = stream.read();\n\t\t\t\tstream.close();\n\t\t\t\tstream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\t\tstream.type = adTypeBinary;\n\t\t\t\tstream.open();\n\t\t\t\tstream.write(binary);\n\t\t\t}\n\t\t\tstream.saveToFile(this.pathname, adSaveCreateOverWrite);\n\t\t\tstream.close();\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * バイナリファイルを開く（激重）\n\t * @returns {number[]}\n\t */\n\tgetBinaryFile() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst adTypeText = 2;\n\t\tconst adReadAll = -1;\n\t\tconst charset = \"iso-8859-1\";\n\t\t\n\t\t/**\n\t\t * @type {Object<number, number>}\n\t\t * @private\n\t\t */\n\t\tconst map = {\n\t\t\t0x20AC\t:\t0x80\t,\t//\t8364\t128\n\t\t\t0x201A\t:\t0x82\t,\t//\t8218\t130\n\t\t\t0x0192\t:\t0x83\t,\t//\t402\t131\n\t\t\t0x201E\t:\t0x84\t,\t//\t8222\t132\n\t\t\t0x2026\t:\t0x85\t,\t//\t8230\t133\n\t\t\t0x2020\t:\t0x86\t,\t//\t8224\t134\n\t\t\t0x2021\t:\t0x87\t,\t//\t8225\t135\n\t\t\t0x02C6\t:\t0x88\t,\t//\t710\t136\n\t\t\t0x2030\t:\t0x89\t,\t//\t8240\t137\n\t\t\t0x0160\t:\t0x8A\t,\t//\t352\t138\n\t\t\t0x2039\t:\t0x8B\t,\t//\t8249\t139\n\t\t\t0x0152\t:\t0x8C\t,\t//\t338\t140\n\t\t\t0x017D\t:\t0x8E\t,\t//\t381\t142\n\t\t\t0x2018\t:\t0x91\t,\t//\t8216\t145\n\t\t\t0x2019\t:\t0x92\t,\t//\t8217\t146\n\t\t\t0x201C\t:\t0x93\t,\t//\t8220\t147\n\t\t\t0x201D\t:\t0x94\t,\t//\t8221\t148\n\t\t\t0x2022\t:\t0x95\t,\t//\t8226\t149\n\t\t\t0x2013\t:\t0x96\t,\t//\t8211\t150\n\t\t\t0x2014\t:\t0x97\t,\t//\t8212\t151\n\t\t\t0x02DC\t:\t0x98\t,\t//\t732\t152\n\t\t\t0x2122\t:\t0x99\t,\t//\t8482\t153\n\t\t\t0x0161\t:\t0x9A\t,\t//\t353\t154\n\t\t\t0x203A\t:\t0x9B\t,\t//\t8250\t155\n\t\t\t0x0153\t:\t0x9C\t,\t//\t339\t156\n\t\t\t0x017E\t:\t0x9E\t,\t//\t382\t158\n\t\t\t0x0178\t:\t0x9F\t\t//\t376\t159\n\t\t};\n\t\tconst stream = new ActiveXObject(\"ADODB.Stream\");\n\t\tstream.type = adTypeText;\n\t\tstream.charset = charset;\n\t\tstream.open();\n\t\tstream.loadFromFile(this.pathname);\n\t\tconst text = stream.readText(adReadAll);\n\t\tstream.close();\n\t\tconst out = new Array(text.length);\n\t\tfor(let i = 0;i < text.length;i++) {\n\t\t\tconst x = text.charCodeAt(i);\n\t\t\tif(0xFF < x) {\n\t\t\t\tout[i] = map[x];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tout[i] = x;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * バイナリファイルを保存（激重）\n\t * @param {number[]} array_\n\t */\n\tsetBinaryFile(array_) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst adTypeText = 2;\n\t\tconst adSaveCreateOverWrite = 2;\n\t\tconst charset = \"iso-8859-1\";\n\t\tconst buffersize = 512;\n\t\tconst stream = new ActiveXObject(\"ADODB.Stream\");\n\t\tstream.type = adTypeText;\n\t\tstream.charset = charset;\n\t\tstream.open();\n\t\tfor(let i = 0;i < array_.length;) {\n\t\t\tconst text = [];\n\t\t\tfor(let j = 0; (j < buffersize) && (i < array_.length); j++, i++) {\n\t\t\t\ttext[j] = String.fromCharCode(array_[i]);\n\t\t\t}\n\t\t\tstream.writeText(text.join(\"\"));\n\t\t}\n\t\tstream.saveToFile(this.pathname, adSaveCreateOverWrite);\n\t\tstream.close();\n\t}\n\n\t/**\n\t * XMLHttpRequestを作成\n\t * @returns {XMLHttpRequest}\n\t */\n\tstatic createXMLHttpRequest() {\n\t\ttry {\n\t\t\treturn new XMLHttpRequest();\n\t\t}\n\t\tcatch (e) {\n\t\t\tconst MSXMLHTTP = [\n\t\t\t\t\"WinHttp.WinHttpRequest.5.1\",\n\t\t\t\t\"WinHttp.WinHttpRequest.5\",\n\t\t\t\t\"WinHttp.WinHttpRequest\",\n\t\t\t\t\"Msxml2.ServerXMLHTTP.6.0\",\n\t\t\t\t\"Msxml2.ServerXMLHTTP.5.0\",\n\t\t\t\t\"Msxml2.ServerXMLHTTP.4.0\",\n\t\t\t\t\"Msxml2.ServerXMLHTTP.3.0\",\n\t\t\t\t\"Msxml2.ServerXMLHTTP\",\n\t\t\t\t\"Microsoft.ServerXMLHTTP\",\n\t\t\t\t\"Msxml2.XMLHTTP.6.0\",\n\t\t\t\t\"Msxml2.XMLHTTP.5.0\",\n\t\t\t\t\"Msxml2.XMLHTTP.4.0\",\n\t\t\t\t\"Msxml2.XMLHTTP.3.0\",\n\t\t\t\t\"Msxml2.XMLHTTP\",\n\t\t\t\t\"Microsoft.XMLHTTP\"\n\t\t\t];\n\t\t\t// ※ WinHttp.WinHttpRequest は onreadystatechange の書き換えができない\n\t\t\tlet i;\n\t\t\tfor(i = 0; i < MSXMLHTTP.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\treturn new ActiveXObject(MSXMLHTTP[i]);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\t/**\n\t * テンポラリフォルダ内の適当なファイル名を取得\n\t * @returns {SFile}\n\t */\n\tstatic createTempFile() {\n\t\tconst TemporaryFolder = 2;\n\t\tconst fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n\t\t// テンポラリフォルダ内の適当なファイル名を取得します\n\t\treturn new SFile(fso.GetSpecialFolder(TemporaryFolder) + \"\\\\\" + fso.GetTempName());\n\t}\n\n\t/**\n\t * カレントディレクトリを取得\n\t * @returns {SFile}\n\t */\n\tstatic getCurrentDirectory() {\n\t\tconst shell = new ActiveXObject(\"WScript.Shell\");\n\t\treturn new SFile(shell.CurrentDirectory);\n\t}\n\n\t/**\n\t * カレントディレクトリを設定\n\t * @param {string|SFile} file_obj\n\t */\n\tstatic setCurrentDirectory(file_obj) {\n\t\tconst file = new SFile(file_obj);\n\t\tconst shell = WScript.CreateObject (\"WScript.Shell\");\n\t\tconst fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n\t\tshell.CurrentDirectory = fso.getFolder(file.getAbsolutePath()).Name;\n\t}\n\n\t/**\n\t * 指定した条件にあうファイルを探す\n\t * @param {string|SFile|function(string, string): boolean} file_obj\n\t * @returns {SFile|null}\n\t */\n\tstatic searchFile(file_obj) {\n\t\tconst fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n\t\tconst path = [];\n\t\tconst collection = [];\n\t\tlet pointer = 0;\n\t\tlet list;\n\t\tlet targetfolder;\n\t\t/**\n\t\t * @type {function(string, string): boolean}\n\t\t * @private\n\t\t */\n\t\tlet isTarget;\n\t\tif(typeof file_obj !== \"function\") {\n\t\t\tconst file = new SFile(file_obj);\n\t\t\tconst buffer = file.getName();\n\t\t\tisTarget = function(name, fullpath) {\n\t\t\t\treturn name === buffer;\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tisTarget = file_obj;\n\t\t}\n\t\tpath[pointer] = SFile.getCurrentDirectory().getNormalizedPathName();\n\t\ttargetfolder = fso.getFolder(path[pointer]);\n\t\tlist = new Enumerator(fso.getFolder(targetfolder).Files);\n\t\tfor(let i = 0; !list.atEnd(); list.moveNext()) {\n\t\t\tif(isTarget(list.item().Name, path[pointer] + list.item().Name)) {\n\t\t\t\treturn new SFile(path[pointer] + list.item().Name);\n\t\t\t}\n\t\t}\n\t\tif(targetfolder.SubFolders.Count === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tcollection[pointer] = new Enumerator(targetfolder.SubFolders);\n\t\tpointer++;\n\t\twhile(true) {\n\t\t\tpath[pointer] = path[pointer - 1] + collection[pointer - 1].item().Name + \"\\\\\";\n\t\t\ttargetfolder = fso.getFolder(path[pointer]);\n\t\t\tlist = new Enumerator(targetfolder.Files);\n\t\t\tfor(; !list.atEnd(); list.moveNext()) {\n\t\t\t\tif(isTarget(list.item().Name, path[pointer] + list.item().Name)) {\n\t\t\t\t\treturn new SFile(path[pointer] + list.item().Name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(targetfolder.SubFolders.Count === 0) {\n\t\t\t\twhile(true) {\n\t\t\t\t\tif(pointer === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcollection[pointer - 1].moveNext();\n\t\t\t\t\tif(collection[pointer - 1].atEnd()) {\n\t\t\t\t\t\tpointer--;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(pointer === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcollection[pointer] = new Enumerator(targetfolder.SubFolders);\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/SFile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "class",
    "name": "SFile",
    "memberof": "src/SFile.js",
    "static": true,
    "longname": "src/SFile.js~SFile",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/SFile.js",
    "importStyle": "SFile",
    "description": "ファイル／フォルダ／URL",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#constructor",
    "access": "public",
    "description": "初期化",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile"
        ],
        "spread": false,
        "optional": false,
        "name": "pathname",
        "description": "ファイル名／フォルダ名／URLアドレス"
      }
    ]
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "pathname",
    "memberof": "src/SFile.js~SFile",
    "static": false,
    "longname": "src/SFile.js~SFile#pathname",
    "access": "private",
    "description": "",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "is_http",
    "memberof": "src/SFile.js~SFile",
    "static": false,
    "longname": "src/SFile.js~SFile#is_http",
    "access": "private",
    "description": "",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "fso",
    "memberof": "src/SFile.js~SFile",
    "static": false,
    "longname": "src/SFile.js~SFile#fso",
    "access": "private",
    "description": "",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "remove",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#remove",
    "access": "public",
    "description": "ファイルの削除",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "exists",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#exists",
    "access": "public",
    "description": "ファイルが存在するか",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "copy",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#copy",
    "access": "public",
    "description": "ファイルのコピー",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file_obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "move",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#move",
    "access": "public",
    "description": "ファイルの移動",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file_obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "renameTo",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#renameTo",
    "access": "public",
    "description": "ファイル名を変更",
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file_obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "toString",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "getName",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getName",
    "access": "public",
    "description": "名前を取得",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "getParent",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getParent",
    "access": "public",
    "description": "親フォルダの絶対パス",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "getParentFile",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getParentFile",
    "access": "public",
    "description": "親フォルダ",
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "getExtensionName",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getExtensionName",
    "access": "public",
    "description": "拡張子（ドットを含まない）",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "isAbsolute",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#isAbsolute",
    "access": "public",
    "description": "絶対パスかどうか",
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "isDirectory",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#isDirectory",
    "access": "public",
    "description": "フォルダかどうか",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "isFile",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#isFile",
    "access": "public",
    "description": "ファイルかどうか",
    "lineNumber": 255,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "isHidden",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#isHidden",
    "access": "public",
    "description": "隠しファイルかどうか",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "lastModified",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#lastModified",
    "access": "public",
    "description": "更新日を取得",
    "lineNumber": 290,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Date}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "setLastModified",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#setLastModified",
    "access": "public",
    "description": "更新日を設定（ファイルのみ対応）",
    "lineNumber": 310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "length",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#length",
    "access": "public",
    "description": "ファイルサイズ",
    "lineNumber": 333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "getFiles",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getFiles",
    "access": "public",
    "description": "配下のファイル名の一覧を取得",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "getSubFolders",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getSubFolders",
    "access": "public",
    "description": "配下のサブフォルダ名の一覧を取得",
    "lineNumber": 371,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "getNormalizedPathName",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getNormalizedPathName",
    "access": "public",
    "description": "区切り文字と終端を正規化した文字列を取得",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "getAllFiles",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getAllFiles",
    "access": "public",
    "description": "サブフォルダの中まで探索して全てのファイルとフォルダを取得",
    "lineNumber": 405,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "list",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#list",
    "access": "public",
    "description": "配下のファイル名とフォルダ名を取得",
    "lineNumber": 468,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "getAbsolutePath",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getAbsolutePath",
    "access": "public",
    "description": "絶対パスを取得",
    "lineNumber": 491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "mkdir",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#mkdir",
    "access": "public",
    "description": "フォルダを作成\n- フォルダは1つのみ指定可能\n- すでにフォルダがある場合はエラーを返す。",
    "lineNumber": 526,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "mkdirs",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#mkdirs",
    "access": "public",
    "description": "フォルダを作成\n- 作成したいフォルダを続けて記載が可能\n- フォルダがない場合はフォルダを作成していく",
    "lineNumber": 558,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "run",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#run",
    "access": "public",
    "description": "ファイルを開く",
    "lineNumber": 580,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "style",
        "description": "起動オプション"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_wait",
        "description": "プロセスが終了するまで待つ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "writeLine",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#writeLine",
    "access": "public",
    "description": "1行書き加える",
    "lineNumber": 597,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "getTextFile",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getTextFile",
    "access": "public",
    "description": "テキストファイルを開く",
    "lineNumber": 622,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"_autodetect_all\"",
        "defaultRaw": "_autodetect_all",
        "name": "charset",
        "description": "文字コード"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "setTextFile",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#setTextFile",
    "access": "public",
    "description": "テキストファイルを保存",
    "lineNumber": 746,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"utf-8\"",
        "defaultRaw": "utf-8",
        "name": "charset",
        "description": "文字コード"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\\n\"",
        "defaultRaw": "\n",
        "name": "newline",
        "description": "改行コード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "issetBOM",
        "description": "BOMの有無(utf-8のみ有効 )"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "getBinaryFile",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#getBinaryFile",
    "access": "public",
    "description": "バイナリファイルを開く（激重）",
    "lineNumber": 807,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "setBinaryFile",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/SFile.js~SFile#setBinaryFile",
    "access": "public",
    "description": "バイナリファイルを保存（激重）",
    "lineNumber": 872,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array_",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "createXMLHttpRequest",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SFile.js~SFile.createXMLHttpRequest",
    "access": "public",
    "description": "XMLHttpRequestを作成",
    "lineNumber": 899,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XMLHttpRequest}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XMLHttpRequest"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "createTempFile",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SFile.js~SFile.createTempFile",
    "access": "public",
    "description": "テンポラリフォルダ内の適当なファイル名を取得",
    "lineNumber": 939,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "getCurrentDirectory",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SFile.js~SFile.getCurrentDirectory",
    "access": "public",
    "description": "カレントディレクトリを取得",
    "lineNumber": 950,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "setCurrentDirectory",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SFile.js~SFile.setCurrentDirectory",
    "access": "public",
    "description": "カレントディレクトリを設定",
    "lineNumber": 959,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file_obj",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "searchFile",
    "memberof": "src/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SFile.js~SFile.searchFile",
    "access": "public",
    "description": "指定した条件にあうファイルを探す",
    "lineNumber": 971,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile",
          "function(string, string): boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "file_obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile",
        "null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/StringWSH.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * ES3相当のJScirptのString拡張用\n * - String.prototypeに拡張します\n */\nexport default class StringWSH {\n\n\t/**\n\t * @param {string} text\n\t * @param {string} target\n\t * @param {string} replacement\n\t * @returns {string}\n\t */\n\tstatic replaceAll(text, target, replacement) {\n\t\t//正規表現のgを使って全置換する\n\t\t//従って正規表現にならないようにエスケープしておく\n\t\tconst regex = new RegExp(target.replace(/([\\\\/*+.?{}()[\\]^$\\-|])/g, \"\\\\$1\" ), \"g\");\n\t\tconst ireplacement = replacement.replace(/\\$/g, \"$$$$\");\n\t\treturn text.replace(regex, ireplacement);\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @returns {string}\n\t */\n\tstatic trim(text) {\n\t\treturn text.replace(/^\\s+|\\s+$/g, \"\");\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {function(number, string, number): boolean} func\n\t * @returns {boolean} result\n\t */\n\tstatic each(text, func) {\n\t\tlet out = true;\n\t\tconst len = this.length;\n\t\tfor(let i = 0; i < len; i = StringWSH.offsetByCodePoints(text, i, 1)) {\n\t\t\tconst codepoint = StringWSH.codePointAt(text, i);\n\t\t\tconst str = StringWSH.fromCodePoint(codepoint);\n\t\t\tif(func.call(func, i, str, codepoint) === false) {\n\t\t\t\tout = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 上位のサロゲートペアの判定\n\t * @param {String} text - 対象テキスト\n\t * @param {number} index - インデックス\n\t * @returns {Boolean} 確認結果\n\t */\n\tstatic isHighSurrogateAt(text, index) {\n\t\tconst ch = text.charCodeAt(index);\n\t\treturn (0xD800 <= ch) && (ch <= 0xDBFF);\n\t}\n\n\t/**\n\t * 下位のサロゲートペアの判定\n\t * @param {String} text - 対象テキスト\n\t * @param {number} index - インデックス\n\t * @returns {Boolean} 確認結果\n\t */\n\tstatic isLowSurrogateAt(text, index) {\n\t\tconst ch = text.charCodeAt(index);\n\t\treturn (0xDC00 <= ch) && (ch <= 0xDFFF);\n\t}\n\t\n\t/**\n\t * サロゲートペアの判定\n\t * @param {String} text - 対象テキスト\n\t * @param {number} index - インデックス\n\t * @returns {Boolean} 確認結果\n\t */\n\tstatic isSurrogatePairAt(text, index) {\n\t\tconst ch = text.charCodeAt(index);\n\t\treturn (0xD800 <= ch) && (ch <= 0xDFFF);\n\t}\n\t\n\t/**\n\t * サロゲートペア対応のコードポイント取得\n\t * @param {String} text - 対象テキスト\n\t * @param {number} [index = 0] - インデックス\n\t * @returns {number} コードポイント\n\t */\n\tstatic codePointAt(text, index) {\n\t\tconst index_ = (index !== undefined) ? index : 0;\n\t\tif(StringWSH.isHighSurrogateAt(text, index_)) {\n\t\t\tconst high = text.charCodeAt(index_);\n\t\t\tconst low  = text.charCodeAt(index_ + 1);\n\t\t\treturn (((high - 0xD800) << 10) | (low - 0xDC00)) + 0x10000;\n\t\t}\n\t\telse {\n\t\t\treturn text.charCodeAt(index_);\n\t\t}\n\t}\n\n\t/**\n\t * インデックスの前にあるコードポイント\n\t * @param {String} text - 対象テキスト\n\t * @param {number} index - インデックス\n\t * @returns {number} コードポイント\n\t */\n\tstatic codePointBefore(text, index) {\n\t\tif(!StringWSH.isLowSurrogateAt(text, index - 1)) {\n\t\t\treturn text.charCodeAt(index - 1);\n\t\t}\n\t\telse {\n\t\t\treturn text.codePointAt(index - 2);\n\t\t}\n\t}\n\n\t/**\n\t * コードポイント換算で文字列数をカウント\n\t * @param {string} text - 対象テキスト\n\t * @param {number} [beginIndex=0] - 最初のインデックス（省略可）\n\t * @param {number} [endIndex] - 最後のインデックス（ここは含めない）（省略可）\n\t * @returns {number} 文字数\n\t */\n\tstatic codePointCount(text, beginIndex, endIndex) {\n\t\tlet ibeginIndex = beginIndex !== undefined ? beginIndex : 0;\n\t\tlet iendIndex = endIndex !== undefined ? endIndex : text.length;\n\t\tlet count = 0;\n\t\tfor(;beginIndex < iendIndex;ibeginIndex++) {\n\t\t\tcount++;\n\t\t\tif(StringWSH.isSurrogatePairAt(text, beginIndex)) {\n\t\t\t\tiendIndex++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * コードポイント換算で文字列配列の位置を計算\n\t * @param {string} text - 対象テキスト\n\t * @param {number} index - オフセット\n\t * @param {number} codePointOffset - ずらすコードポイント数\n\t * @returns {number} ずらしたインデックス\n\t */\n\tstatic offsetByCodePoints(text, index, codePointOffset) {\n\t\tlet count = 0;\n\t\tlet icodePointOffset = codePointOffset;\n\t\tlet i = index;\n\t\tif(icodePointOffset === 0) {\n\t\t\treturn i;\n\t\t}\n\t\tif(icodePointOffset > 0) {\n\t\t\tfor(;i < text.length;i++) {\n\t\t\t\tcount++;\n\t\t\t\tif(StringWSH.isHighSurrogateAt(text, i)) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tif(count === icodePointOffset) {\n\t\t\t\t\treturn i + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\ticodePointOffset = -icodePointOffset;\n\t\t\tfor(;i >= 0;i--) {\n\t\t\t\tcount++;\n\t\t\t\tif(StringWSH.isLowSurrogateAt(text, i - 1)) {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t\tif(count === icodePointOffset) {\n\t\t\t\t\treturn i - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow \"error offsetByCodePoints\";\n\t}\n\n\t/**\n\t * コードポイントの数値データをUTF16の配列に変換\n\t * @param {...(number|Array<number>)} codepoint - 変換したいUTF-32の配列、又はコードポイントを並べた可変引数\n\t * @returns {Array<number>} 変換後のテキスト\n\t * @private\n\t */\n\tstatic toUTF16ArrayfromCodePoint() {\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t * @private\n\t\t */\n\t\tconst utf16_array = [];\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t * @private\n\t\t */\n\t\tlet codepoint_array = [];\n\t\tif(arguments[0].length) {\n\t\t\tcodepoint_array = arguments[0];\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0;i < arguments.length;i++) {\n\t\t\t\tcodepoint_array[i] = arguments[i];\n\t\t\t}\n\t\t}\n\t\tfor(let i = 0;i < codepoint_array.length;i++) {\n\t\t\tconst codepoint = codepoint_array[i];\n\t\t\tif(0x10000 <= codepoint) {\n\t\t\t\tconst high = (( codepoint - 0x10000 ) >> 10) + 0xD800;\n\t\t\t\tconst low  = (codepoint & 0x3FF) + 0xDC00;\n\t\t\t\tutf16_array.push(high);\n\t\t\t\tutf16_array.push(low);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tutf16_array.push(codepoint);\n\t\t\t}\n\t\t}\n\t\treturn utf16_array;\n\t}\n\n\t/**\n\t * コードポイントの数値データを文字列に変換\n\t * @param {...(number|Array<number>)} codepoint - 変換したいコードポイントの数値配列、又は数値を並べた可変引数\n\t * @returns {string} 変換後のテキスト\n\t */\n\tstatic fromCodePoint(codepoint) {\n\t\tlet utf16_array = null;\n\t\tif(codepoint instanceof Array) {\n\t\t\tutf16_array = StringWSH.toUTF16ArrayfromCodePoint(codepoint);\n\t\t}\n\t\telse {\n\t\t\tconst codepoint_array = [];\n\t\t\tfor(let i = 0;i < arguments.length;i++) {\n\t\t\t\tcodepoint_array[i] = arguments[i];\n\t\t\t}\n\t\t\tutf16_array = StringWSH.toUTF16ArrayfromCodePoint(codepoint_array);\n\t\t}\n\t\tconst text = [];\n\t\tfor(let i = 0;i < utf16_array.length;i++) {\n\t\t\ttext[text.length] = String.fromCharCode(utf16_array[i]);\n\t\t}\n\t\treturn text.join(\"\");\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {string} prefix\n\t * @returns {boolean}\n\t */\n\tstatic startsWith(text, prefix) {\n\t\treturn text.indexOf(prefix) === 0;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {string} suffix\n\t * @returns {boolean}\n\t */\n\tstatic endsWith(text, suffix) {\n\t\tif(text.length < suffix.length) {\n\t\t\treturn(false);\n\t\t}\n\t\treturn text.indexOf(suffix) === (text.length - suffix.length);\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/StringWSH.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "class",
    "name": "StringWSH",
    "memberof": "src/StringWSH.js",
    "static": true,
    "longname": "src/StringWSH.js~StringWSH",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/StringWSH.js",
    "importStyle": "StringWSH",
    "description": "ES3相当のJScirptのString拡張用\n- String.prototypeに拡張します",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "replaceAll",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.replaceAll",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "replacement",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "trim",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.trim",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "each",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.each",
    "access": "public",
    "description": "",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(number, string, number): boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "isHighSurrogateAt",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.isHighSurrogateAt",
    "access": "public",
    "description": "上位のサロゲートペアの判定",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} 確認結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "確認結果"
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "isLowSurrogateAt",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.isLowSurrogateAt",
    "access": "public",
    "description": "下位のサロゲートペアの判定",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} 確認結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "確認結果"
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "isSurrogatePairAt",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.isSurrogatePairAt",
    "access": "public",
    "description": "サロゲートペアの判定",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} 確認結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "確認結果"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "codePointAt",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.codePointAt",
    "access": "public",
    "description": "サロゲートペア対応のコードポイント取得",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} コードポイント"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 0",
        "defaultRaw": 0,
        "name": "index",
        "description": "インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "コードポイント"
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "codePointBefore",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.codePointBefore",
    "access": "public",
    "description": "インデックスの前にあるコードポイント",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} コードポイント"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "コードポイント"
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "codePointCount",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.codePointCount",
    "access": "public",
    "description": "コードポイント換算で文字列数をカウント",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 文字数"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "beginIndex",
        "description": "最初のインデックス（省略可）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "endIndex",
        "description": "最後のインデックス（ここは含めない）（省略可）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文字数"
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "offsetByCodePoints",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.offsetByCodePoints",
    "access": "public",
    "description": "コードポイント換算で文字列配列の位置を計算",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} ずらしたインデックス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "オフセット"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "codePointOffset",
        "description": "ずらすコードポイント数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ずらしたインデックス"
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "toUTF16ArrayfromCodePoint",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.toUTF16ArrayfromCodePoint",
    "access": "private",
    "description": "コードポイントの数値データをUTF16の配列に変換",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...(number|Array<number>)"
        ],
        "spread": true,
        "optional": false,
        "name": "codepoint",
        "description": "変換したいUTF-32の配列、又はコードポイントを並べた可変引数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "fromCodePoint",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.fromCodePoint",
    "access": "public",
    "description": "コードポイントの数値データを文字列に変換",
    "lineNumber": 230,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...(number|Array<number>)"
        ],
        "spread": true,
        "optional": false,
        "name": "codepoint",
        "description": "変換したいコードポイントの数値配列、又は数値を並べた可変引数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "startsWith",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.startsWith",
    "access": "public",
    "description": "",
    "lineNumber": 254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "endsWith",
    "memberof": "src/StringWSH.js~StringWSH",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringWSH.js~StringWSH.endsWith",
    "access": "public",
    "description": "",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "suffix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/System.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Format from \"./Format.js\";\n\n/**\n * @type {boolean}\n * @private\n */\nconst is_wscript = /wscript\\.exe$/i.test(WSH.FullName);\n\n/**\n * @type {boolean}\n * @private\n */\nconst is_cscript = /cscript\\.exe$/i.test(WSH.FullName);\n\n/**\n * 出力関数\n * @typedef {Object} _OUTPUT_\n * @property {function(any): void} print 文字列を表示（最終行で自動で改行されない）\n * @property {function(any): void} println 文字列を表示（最終行で自動で改行される）\n * @property {function(string, ...any): void} printf 指定したフォーマットで整形した文字列を表示\n */\n\n/**\n * システム関数\n * @typedef {Object} _SYSTEM_\n * @property {_OUTPUT_} out\n * @property {function(): string} readLine キーボードのテキスト入力を取得\n * @property {function(): number} currentTimeMillis UNIX時間をミリ秒で取得\n * @property {function(number): void} sleep 処理を一時停止\n * @property {function(): void} stop 処理を停止\n * @property {function(boolean): void} executeOnCScript CUIで起動しなおす\n * @property {function(): void} executeOnWScript GUIで起動しなおす\n * @property {function(): string[]} getArguments スクリプトファイルへの引数を取得\n * @property {function(string): void} setCurrentDirectory カレントディレクトリを設定\n * @property {function(): string} getCurrentDirectory カレントディレクトリを取得\n * @property {function(): string} getScriptDirectory 実行中のスクリプトがあるカレントディレクトリを取得\n * @property {function(string): void} initializeCurrentDirectory 実行中のスクリプトがあるディレクトリをカレントディレクトリに設定\n */\n\n/**\n * システム関数\n * @type {_SYSTEM_}\n */\nconst System = {\n\n\t/**\n\t * 出力用途\n\t */\n\tout : {\n\t\t\n\t\t/**\n\t\t * 文字列を表示（最終行で自動で改行されない）\n\t\t * @param {any} text\n\t\t */\n\t\tprint : function(text) {\n\t\t\tconst output = text.toString();\n\t\t\tif(is_cscript) {\n\t\t\t\tWSH.StdOut.Write(output);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tWScript.Echo(output);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * 文字列を表示（最終行で自動で改行される）\n\t\t * @param {any} text\n\t\t */\n\t\tprintln : function(text) {\n\t\t\tconst output = text.toString();\n\t\t\tif(is_cscript) {\n\t\t\t\tWSH.StdOut.Write(output + \"\\n\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tWScript.Echo(output);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * 指定したフォーマットで整形した文字列を表示\n\t\t * @param {any} text \n\t\t * @param {...any} parm パラメータは可変引数\n\t\t */\n\t\tprintf : function() {\n\t\t\tconst x = [];\n\t\t\tfor(let i = 0 ; i < arguments.length ; i++) {\n\t\t\t\tx[i] = arguments[i];\n\t\t\t\tif(i === 0) {\n\t\t\t\t\tx[i] = x[i].toString();\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(Format.textf.apply(this, x));\n\t\t}\n\n\t},\n\n\t/**\n\t * キーボードのテキスト入力を取得\n\t * @returns {string}\n\t */\n\treadLine : function() {\n\t\treturn WScript.StdIn.ReadLine();\n\t},\n\t\n\t/**\n\t * UNIX時間をミリ秒で取得\n\t * @returns {number}\n\t */\n\tcurrentTimeMillis : function() {\n\t\tconst date = new Date();\n\t\treturn date.getTime();\n\t},\n\n\t/**\n\t * 処理を一時停止\n\t * @param {number} time_sec\n\t */\n\tsleep : function(time_sec) {\n\t\tWScript.Sleep((time_sec * 1000) | 0);\n\t},\n\t\n\t/**\n\t * 処理を停止\n\t */\n\tstop : function() {\n\t\twhile(true) {\n\t\t\tWScript.Sleep(1000);\n\t\t}\n\t},\n\t\n\t/**\n\t * CUIで起動しなおす\n\t * @param {boolean} is_use_chakra - 高速なChakraエンジンを利用する（wsfが開けなくなる）\n\t */\n\texecuteOnCScript : function(is_use_chakra) {\n\t\tconst iis_use_chakra = is_use_chakra !== undefined ? is_use_chakra : false;\n\t\tif(is_wscript) {\n\t\t\t// CScript で起動しなおす\n\t\t\tconst shell = WScript.CreateObject(\"WScript.Shell\");\n\t\t\tconst run = [];\n\t\t\tconst args = WScript.Arguments; // 引数\n\t\t\trun.push(\"\\\"C:\\\\Windows\\\\System32\\\\cscript.exe\\\"\");\n\t\t\trun.push(\"//NoLogo\");\n\t\t\tif(iis_use_chakra) {\n\t\t\t\trun.push(\"//E:{16d51579-a30b-4c8b-a276-0ff4dc41e755}\");\n\t\t\t}\n\t\t\trun.push(\"\\\"\" + WSH.ScriptFullName + \"\\\"\");\n\t\t\tfor(let i = 0; i < args.length; i++) {\n\t\t\t\trun.push(\"\\\"\" + args(i) + \"\\\"\");\n\t\t\t}\n\t\t\tshell.Run( run.join(\" \") );\n\t\t\tWSH.Quit();\n\t\t}\n\t},\n\t\n\t/**\n\t * GUIで起動しなおす\n\t */\n\texecuteOnWScript : function() {\n\t\t// cscriptで起動しているか\n\t\tif(is_cscript) {\n\t\t\t// WScript で起動しなおす\n\t\t\tconst shell = WScript.CreateObject(\"WScript.Shell\");\n\t\t\tconst run = [];\n\t\t\tconst args = WScript.Arguments; // 引数\n\t\t\trun.push(\"\\\"C:\\\\Windows\\\\System32\\\\wscript.exe\\\"\");\n\t\t\trun.push(\"\\\"\" + WSH.ScriptFullName + \"\\\"\");\n\t\t\tfor(let i = 0; i < args.length; i++) {\n\t\t\t\trun.push(\"\\\"\" + args(i) + \"\\\"\");\n\t\t\t}\n\t\t\tshell.Run( run.join(\" \") );\n\t\t\tWSH.Quit();\n\t\t}\n\t},\n\t\n\t/**\n\t * スクリプトファイルへの引数を取得\n\t * @returns {string[]}\n\t */\n\tgetArguments : function() {\n\t\tconst args = [];\n\t\tfor(let i = 0; i < WScript.Arguments.length; i++) {\n\t\t\targs[i] = WScript.Arguments(i);\n\t\t}\n\t\treturn args;\n\t},\n\t\n\t/**\n\t * カレントディレクトリを設定\n\t * @param {string} filename\n\t */\n\tsetCurrentDirectory : function(filename) {\n\t\tconst shell = new ActiveXObject(\"WScript.Shell\");\n\t\tshell.CurrentDirectory = filename.toString();\n\t},\n\t\n\t/**\n\t * カレントディレクトリを取得\n\t * @returns {string}\n\t */\n\tgetCurrentDirectory : function() {\n\t\tconst shell = new ActiveXObject(\"WScript.Shell\");\n\t\treturn shell.CurrentDirectory;\n\t},\n\n\t/**\n\t * 実行中のスクリプトがあるカレントディレクトリを取得\n\t * @returns {string}\n\t */\n\tgetScriptDirectory : function() {\n\t\tconst x = WSH.ScriptFullName.match(/.*\\\\/)[0];\n\t\treturn(x.substring(0 ,x.length - 1));\n\t},\n\t\n\t/**\n\t * 実行中のスクリプトがあるディレクトリをカレントディレクトリに設定\n\t */\n\tinitializeCurrentDirectory : function() {\n\t\tconst shell = new ActiveXObject(\"WScript.Shell\");\n\t\tshell.CurrentDirectory = System.getScriptDirectory();\n\t}\n};\n\nexport default System;\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/System.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "is_wscript",
    "memberof": "src/System.js",
    "static": true,
    "longname": "src/System.js~is_wscript",
    "access": "private",
    "export": false,
    "importPath": "senkowsh/src/System.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "is_cscript",
    "memberof": "src/System.js",
    "static": true,
    "longname": "src/System.js~is_cscript",
    "access": "private",
    "export": false,
    "importPath": "senkowsh/src/System.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "typedef",
    "name": "_OUTPUT_",
    "memberof": "src/System.js",
    "static": true,
    "longname": "src/System.js~_OUTPUT_",
    "access": "private",
    "description": "出力関数",
    "properties": [
      {
        "nullable": null,
        "types": [
          "function(any): void"
        ],
        "spread": false,
        "optional": false,
        "name": "print",
        "description": "文字列を表示（最終行で自動で改行されない）"
      },
      {
        "nullable": null,
        "types": [
          "function(any): void"
        ],
        "spread": false,
        "optional": false,
        "name": "println",
        "description": "文字列を表示（最終行で自動で改行される）"
      },
      {
        "nullable": null,
        "types": [
          "function(string, ...any): void"
        ],
        "spread": false,
        "optional": false,
        "name": "printf",
        "description": "指定したフォーマットで整形した文字列を表示"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "_OUTPUT_"
    }
  },
  {
    "__docId__": 217,
    "kind": "typedef",
    "name": "_SYSTEM_",
    "memberof": "src/System.js",
    "static": true,
    "longname": "src/System.js~_SYSTEM_",
    "access": "private",
    "description": "システム関数",
    "properties": [
      {
        "nullable": null,
        "types": [
          "_OUTPUT_"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(): string"
        ],
        "spread": false,
        "optional": false,
        "name": "readLine",
        "description": "キーボードのテキスト入力を取得"
      },
      {
        "nullable": null,
        "types": [
          "function(): number"
        ],
        "spread": false,
        "optional": false,
        "name": "currentTimeMillis",
        "description": "UNIX時間をミリ秒で取得"
      },
      {
        "nullable": null,
        "types": [
          "function(number): void"
        ],
        "spread": false,
        "optional": false,
        "name": "sleep",
        "description": "処理を一時停止"
      },
      {
        "nullable": null,
        "types": [
          "function(): void"
        ],
        "spread": false,
        "optional": false,
        "name": "stop",
        "description": "処理を停止"
      },
      {
        "nullable": null,
        "types": [
          "function(boolean): void"
        ],
        "spread": false,
        "optional": false,
        "name": "executeOnCScript",
        "description": "CUIで起動しなおす"
      },
      {
        "nullable": null,
        "types": [
          "function(): void"
        ],
        "spread": false,
        "optional": false,
        "name": "executeOnWScript",
        "description": "GUIで起動しなおす"
      },
      {
        "nullable": null,
        "types": [
          "function(): string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "getArguments",
        "description": "スクリプトファイルへの引数を取得"
      },
      {
        "nullable": null,
        "types": [
          "function(string): void"
        ],
        "spread": false,
        "optional": false,
        "name": "setCurrentDirectory",
        "description": "カレントディレクトリを設定"
      },
      {
        "nullable": null,
        "types": [
          "function(): string"
        ],
        "spread": false,
        "optional": false,
        "name": "getCurrentDirectory",
        "description": "カレントディレクトリを取得"
      },
      {
        "nullable": null,
        "types": [
          "function(): string"
        ],
        "spread": false,
        "optional": false,
        "name": "getScriptDirectory",
        "description": "実行中のスクリプトがあるカレントディレクトリを取得"
      },
      {
        "nullable": null,
        "types": [
          "function(string): void"
        ],
        "spread": false,
        "optional": false,
        "name": "initializeCurrentDirectory",
        "description": "実行中のスクリプトがあるディレクトリをカレントディレクトリに設定"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "_SYSTEM_"
    }
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "System",
    "memberof": "src/System.js",
    "static": true,
    "longname": "src/System.js~System",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/System.js",
    "importStyle": "System",
    "description": "システム関数",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "_SYSTEM_"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "index",
    "content": "# SenkoWSH 2 #\r\n\r\n## 概要 ##\r\n- Windows の JScript用汎用ライブラリ\r\n- Visual Studio Code で JScript での開発を目的とするため型定義ファイルを完備\r\n\r\nJScriptによるバッチ処理で以下のような処理が作れます\r\n- ファイルのテキストの読み書きやファイル操作\r\n- `System.sleep(1)`で1秒停止や、`System.stop()`で処理を停止\r\n- `sprintf` のような文字列のフォーマット変換\r\n- ArrayList クラス、HashTable クラス、Random クラスの利用\r\n\r\n## 使い方 ##\r\n- とりあえず`examples`の`Example.wsf`を実行してみればわかります\r\n- ビルドは、`npm run build`\r\n- 型定義ファイル(`d.ts`)の作成は、`npm run dts`\r\n- ヘルプファイルの作成は、`npm run doc`\r\n- サンプルファイルの実行は、`npm run start` (`JScript`でサンプルファイルが実行される)\r\n\r\n## フォルダ構成 ##\r\n- build - `JScirpt` で動作するようにコンパイルしたライブラリ及び、Visual Studio Code 用の型定義ファイル\r\n- src - コンパイル前のソースコードフォルダ\r\n- docs - 自動生成したヘルプファイル\r\n- scripts - `Node.js` で実行するスクリプトファイル（`package.json`の`scripts`を参照）\r\n\r\n## Author ##\r\n- [natade-jp](https://github.com/natade-jp/)\r\n",
    "longname": "D:\\JavaScript\\SenkoWSH\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n\t\"name\": \"senkowsh\",\n\t\"version\": \"2.0.0\",\n\t\"description\": \"JScirpt library for WSH that gathers various functions.\",\n\t\"author\": \"natade-jp <natade3@gmail.com> (https://github.com/natade-jp)\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/natade-jp/SenkoWSH\"\n\t},\n\t\"license\": \"MIT\",\n\t\"main\": \"./build/SenkoWSH.js\",\n\t\"keywords\": [\n\t\t\"wsh\"\n\t],\n\t\"directories\": {\n\t\t\"src\": \"src\",\n\t\t\"build\": \"build\",\n\t\t\"example\": \"examples\"\n\t},\n\t\"scripts\": {\n\t\t\"build\": \"node ./scripts/package.build.js\",\n\t\t\"dts\": \"node ./scripts/package.dts.js\",\n\t\t\"doc\": \"node ./scripts/package.doc.js\",\n\t\t\"start\": \"node ./scripts/execExample.js\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@types/windows-script-host\": \"^5.8.3\",\n\t\t\"esdoc\": \"^1.1.0\",\n\t\t\"esdoc-standard-plugin\": \"^1.0.0\",\n\t\t\"eslint\": \"^6.5.1\",\n\t\t\"jsdoc\": \"^3.6.3\",\n\t\t\"jsdoc-export-default-interop\": \"^0.3.1\",\n\t\t\"mojijs\": \"^3.0.3\",\n\t\t\"rollup\": \"^1.23.1\",\n\t\t\"rollup-plugin-buble\": \"^0.19.8\",\n\t\t\"rollup-plugin-uglify\": \"^6.0.3\",\n\t\t\"rollup-plugin-uglify-es\": \"0.0.1\",\n\t\t\"tsd-jsdoc\": \"^2.4.0\"\n\t}\n}\n",
    "longname": "D:\\JavaScript\\SenkoWSH\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]