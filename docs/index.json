[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/konpeito/Random.js",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * Multiply two 32-bit integers and output a 32-bit integer.\n * @param {number} x1 \n * @param {number} x2 \n * @returns {number}\n * @private\n * @ignore\n */\nconst multiplication32 = function(x1, x2) {\n\tlet y = ((x1 & 0xFFFF) * (x2 & 0xFFFF)) >>> 0;\n\tlet b = (x1 & 0xFFFF) * (x2 >>> 16);\n\ty = (y + ((b & 0xFFFF) << 16)) >>> 0;\n\tb = (x1 >>> 16) * (x2 & 0xFFFF);\n\ty = (y + ((b & 0xFFFF) << 16)) >>> 0;\n\treturn y;\n};\n\n/**\n * 乱数を扱うクラス\n */\nexport default class Random {\n\t\n\t/**\n\t * 初期化\n\t * @param {number} [seed] - Seed number for random number generation. If not specified, create from time.\n\t */\n\tconstructor(seed) {\n\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.x = 123456789;\n\t\t\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.y = 362436069;\n\t\t\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.z = 521288629;\n\t\t\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.w = 88675123;\n\n\t\tif(seed !== undefined) {\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t\telse {\n\t\t\t// 線形合同法で適当に乱数を作成する\n\t\t\tconst new_seed = ((new Date()).getTime() + Random.seedUniquifier) & 0xFFFFFFFF;\n\t\t\tRandom.seedUniquifier = (Random.seedUniquifier + 1) & 0xFFFFFFFF;\n\t\t\tthis.setSeed(new_seed);\n\t\t}\n\t}\n\n\t/**\n\t * シード値の初期化\n\t * @param {number} seed\n\t */\n\tsetSeed(seed) {\n\t\t// seedを使用して線形合同法で初期値を設定\n\t\tlet random_seed = seed;\n\t\trandom_seed = (multiplication32(random_seed, 214013) + 2531011) >>> 0;\n\t\tthis.z = random_seed;\n\t\trandom_seed = (multiplication32(random_seed, 214013) + 2531011) >>> 0;\n\t\tthis.w = random_seed;\n\n\t\t/**\n\t\t * Is keep random numbers based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.haveNextNextGaussian = false;\n\t\t\n\t\t/**\n\t\t * Next random number based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.nextNextGaussian = 0;\n\t}\n\n\t/**\n\t * 32-bit random number.\n\t * @returns {number} - 32ビットの乱数\n\t * @private\n\t */\n\tgenrand_int32() {\n\t\tconst t = this.x ^ (this.x << 11);\n\t\tthis.x = this.y;\n\t\tthis.y = this.z;\n\t\tthis.z = this.w;\n\t\tthis.w = (this.w ^ (this.w >>> 19)) ^ (t ^ (t >>> 8));\n\t\treturn this.w;\n\t}\n\n\t/**\n\t * 指定したビット長以下で表せられる乱数生成\n\t * @param {number} bits - Required number of bits (up to 64 possible).\n\t * @returns {number}\n\t */\n\tnext(bits) {\n\t\tif(bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(bits === 32) {\n\t\t\treturn this.genrand_int32();\n\t\t}\n\t\telse if(bits < 32) {\n\t\t\t// 線形合同法ではないため\n\t\t\t// 上位のビットを使用しなくてもいいがJavaっぽく。\n\t\t\treturn this.genrand_int32() >>> (32 - bits);\n\t\t}\n\t\t// double型のため、52ビットまでは、整数として出力可能\n\t\telse if(bits === 63) {\n\t\t\t// 正の値を出力するように調節\n\t\t\treturn this.next(32) * 0x80000000 + this.next(32);\n\t\t}\n\t\telse if(bits === 64) {\n\t\t\treturn this.next(32) * 0x100000000 + this.next(32);\n\t\t}\n\t\telse if(bits < 64) {\n\t\t\treturn this.genrand_int32() * (1 << (bits - 32)) + (this.genrand_int32()  >>> (64 - bits));\n\t\t}\n\t}\n\n\t/**\n\t * 8ビット長整数の乱数の配列\n\t * @param {number} size - 必要な長さ\n\t * @returns {Array<number>}\n\t */\n\tnextBytes(size) {\n\t\tconst y = new Array(size);\n\t\t// 配列yに乱数を入れる\n\t\t// 8ビットのために、32ビット乱数を1回回すのはもったいない\n\t\tfor(let i = 0;i < y.length; i++) {\n\t\t\ty[i] = this.next(8);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 16ビット長整数の乱数\n\t * @returns {number}\n\t */\n\tnextShort() {\n\t\treturn this.next(16);\n\t}\n\n\t/**\n\t * 32ビット長整数の乱数\n\t * @param {number} [x] - 指定した値未満の数値を作る\n\t * @returns {number}\n\t */\n\tnextInt(x) {\n\t\tif((x !== undefined) && (typeof x === \"number\")) {\n\t\t\tlet r, y;\n\t\t\tdo {\n\t\t\t\tr = this.genrand_int32() >>> 0;\n\t\t\t\ty = r % x;\n\t\t\t} while((r - y + x) > 0x100000000 );\n\t\t\treturn y;\n\t\t}\n\t\treturn this.next(32) | 0;\n\t}\n\n\t/**\n\t * 64ビット長整数の乱数\n\t * @returns {number}\n\t */\n\tnextLong() {\n\t\treturn this.next(64);\n\t}\n\n\t/**\n\t * bool値の乱数\n\t * @returns {boolean}\n\t */\n\tnextBoolean() {\n\t\t// 1ビットのために、32ビット乱数を1回回すのはもったいない\n\t\treturn (this.next(1) !== 0);\n\t}\n\n\t/**\n\t * float精度の実数\n\t * @returns {number}\n\t */\n\tnextFloat() {\n\t\treturn (this.next(24) / 0x1000000);\n\t}\n\n\t/**\n\t * double精度の実数\n\t * @returns {number}\n\t */\n\tnextDouble() {\n\t\tconst a1 = this.next(26) * 0x8000000 + this.next(27);\n\t\tconst a2 = 0x8000000 * 0x4000000;\n\t\treturn (a1 / a2);\n\t}\n\n\t/**\n\t * ガウシアン分布に従う乱数\n\t * @returns {number}\n\t */\n\tnextGaussian() {\n\t\tif(this.haveNextNextGaussian) {\n\t\t\tthis.haveNextNextGaussian = false;\n\t\t\treturn this.nextNextGaussian;\n\t\t}\n\t\t// Box-Muller法\n\t\tconst a = Math.sqrt( -2 * Math.log( this.nextDouble() ) );\n\t\tconst b = 2 * Math.PI * this.nextDouble();\n\t\tconst y = a * Math.sin(b);\n\t\tthis.nextNextGaussian = a * Math.cos(b);\n\t\tthis.haveNextNextGaussian = true;\n\t\treturn y;\n\t}\n\n}\n\n/**\n * 乱数生成用の初期シード値\n * @type {number}\n * @private\n * @ignore\n */\nRandom.seedUniquifier = 0x87654321;\n\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/konpeito/Random.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "multiplication32",
    "memberof": "src/konpeito/Random.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito/Random.js~multiplication32",
    "access": "private",
    "export": false,
    "importPath": "senkowsh/src/konpeito/Random.js",
    "importStyle": null,
    "description": "Multiply two 32-bit integers and output a 32-bit integer.",
    "lineNumber": 19,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "Random",
    "memberof": "src/konpeito/Random.js",
    "static": true,
    "longname": "src/konpeito/Random.js~Random",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/konpeito/Random.js",
    "importStyle": "Random",
    "description": "乱数を扱うクラス",
    "lineNumber": 31,
    "interface": false
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#constructor",
    "access": "public",
    "description": "初期化",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "seed",
        "description": "Seed number for random number generation. If not specified, create from time."
      }
    ]
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "x",
    "memberof": "src/konpeito/Random.js~Random",
    "static": false,
    "longname": "src/konpeito/Random.js~Random#x",
    "access": "private",
    "description": "",
    "lineNumber": 44,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "y",
    "memberof": "src/konpeito/Random.js~Random",
    "static": false,
    "longname": "src/konpeito/Random.js~Random#y",
    "access": "private",
    "description": "",
    "lineNumber": 51,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "z",
    "memberof": "src/konpeito/Random.js~Random",
    "static": false,
    "longname": "src/konpeito/Random.js~Random#z",
    "access": "private",
    "description": "",
    "lineNumber": 58,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "w",
    "memberof": "src/konpeito/Random.js~Random",
    "static": false,
    "longname": "src/konpeito/Random.js~Random#w",
    "access": "private",
    "description": "",
    "lineNumber": 65,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "setSeed",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#setSeed",
    "access": "public",
    "description": "シード値の初期化",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "haveNextNextGaussian",
    "memberof": "src/konpeito/Random.js~Random",
    "static": false,
    "longname": "src/konpeito/Random.js~Random#haveNextNextGaussian",
    "access": "private",
    "description": "Is keep random numbers based on Gaussian distribution.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "nextNextGaussian",
    "memberof": "src/konpeito/Random.js~Random",
    "static": false,
    "longname": "src/konpeito/Random.js~Random#nextNextGaussian",
    "access": "private",
    "description": "Next random number based on Gaussian distribution.",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "genrand_int32",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#genrand_int32",
    "access": "private",
    "description": "32-bit random number.",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - 32ビットの乱数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "32ビットの乱数"
    },
    "params": []
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "next",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#next",
    "access": "public",
    "description": "指定したビット長以下で表せられる乱数生成",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "Required number of bits (up to 64 possible)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "nextBytes",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#nextBytes",
    "access": "public",
    "description": "8ビット長整数の乱数の配列",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "必要な長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "nextShort",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#nextShort",
    "access": "public",
    "description": "16ビット長整数の乱数",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "nextInt",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#nextInt",
    "access": "public",
    "description": "32ビット長整数の乱数",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "x",
        "description": "指定した値未満の数値を作る"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "nextLong",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#nextLong",
    "access": "public",
    "description": "64ビット長整数の乱数",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "nextBoolean",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#nextBoolean",
    "access": "public",
    "description": "bool値の乱数",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "nextFloat",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#nextFloat",
    "access": "public",
    "description": "float精度の実数",
    "lineNumber": 210,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "nextDouble",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#nextDouble",
    "access": "public",
    "description": "double精度の実数",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "nextGaussian",
    "memberof": "src/konpeito/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/konpeito/Random.js~Random#nextGaussian",
    "access": "public",
    "description": "ガウシアン分布に従う乱数",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/mojijs/Japanese.js",
    "content": "﻿/**\n * The script is part of MojiJS.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Unicode from \"./Unicode.js\";\n\n/**\n * 日本語の変換を扱うクラス\n */\nexport default class Japanese {\n\n\t/**\n\t * カタカナをひらがなに変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toHiragana(text) {\n\t\t/**\n\t\t * @param {string} ch \n\t\t * @private\n\t\t */\n\t\tconst func = function(ch) {\n\t\t\treturn(String.fromCharCode(ch.charCodeAt(0) - 0x0060));\n\t\t};\n\t\treturn (text.replace(/[\\u30A1-\\u30F6]/g, func));\n\t}\n\n\t/**\n\t * ひらがなをカタカナに変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toKatakana(text) {\n\t\t/**\n\t\t * @param {string} ch \n\t\t * @private\n\t\t */\n\t\tconst func = function(ch) {\n\t\t\treturn(String.fromCharCode(ch.charCodeAt(0) + 0x0060));\n\t\t};\n\t\treturn (text.replace(/[\\u3041-\\u3096]/g, func));\n\t}\n\t\n\t/**\n\t * スペースを半角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toHalfWidthSpace(text) {\n\t\treturn (text.replace(/\\u3000/g, String.fromCharCode(0x0020)));\n\t}\n\t\n\t/**\n\t * スペースを全角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toFullWidthSpace(text) {\n\t\treturn (text.replace(/\\u0020/g, String.fromCharCode(0x3000)));\n\t}\n\t\n\t/**\n\t * 英数記号を半角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toHalfWidthAsciiCode(text) {\n\t\tlet out = text;\n\t\tout = out.replace(/\\u3000/g, \"\\u0020\");\t\t\t\t//全角スペース\n\t\tout = out.replace(/[\\u2018-\\u201B]/g, \"\\u0027\");\t//シングルクォーテーション\n\t\tout = out.replace(/[\\u201C-\\u201F]/g, \"\\u0022\");\t//ダブルクォーテーション\n\t\t/**\n\t\t * @param {string} ch \n\t\t * @private\n\t\t */\n\t\tconst func = function(ch) {\n\t\t\tconst code = ch.charCodeAt(0);\n\t\t\treturn (String.fromCharCode(code - 0xFEE0));\n\t\t};\n\t\treturn (out.replace(/[\\uFF01-\\uFF5E]/g, func));\n\t}\n\t\n\t/**\n\t * 英数記号を全角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toFullWidthAsciiCode(text) {\n\t\tlet out = text;\n\t\tout = out.replace(/\\u0020/g, \"\\u3000\");\t//全角スペース\n\t\tout = out.replace(/\\u0022/g, \"\\u201D\");\t//ダブルクォーテーション\n\t\tout = out.replace(/\\u0027/g, \"\\u2019\");\t//アポストロフィー\n\t\t/**\n\t\t * @param {string} ch \n\t\t * @private\n\t\t */\n\t\tconst func = function(ch) {\n\t\t\tconst code = ch.charCodeAt(0);\n\t\t\treturn (String.fromCharCode(code + 0xFEE0));\n\t\t};\n\t\treturn (out.replace(/[\\u0020-\\u007E]/g, func));\n\t}\n\t\n\t/**\n\t * アルファベットを半角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toHalfWidthAlphabet(text) {\n\t\t/**\n\t\t * @param {string} ch \n\t\t * @private\n\t\t */\n\t\tconst func = function(ch) {\n\t\t\treturn (String.fromCharCode(ch.charCodeAt(0) - 0xFEE0));\n\t\t};\n\t\treturn (text.replace(/[\\uFF21-\\uFF3A\\uFF41-\\uFF5A]/g, func));\n\t}\n\t\n\t/**\n\t * アルファベットを全角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toFullWidthAlphabet(text) {\n\t\t/**\n\t\t * @param {string} ch \n\t\t * @private\n\t\t */\n\t\tconst func = function(ch) {\n\t\t\treturn (String.fromCharCode(ch.charCodeAt(0) + 0xFEE0));\n\t\t};\n\t\treturn (text.replace(/[A-Za-z]/g, func));\n\t}\n\t\n\t/**\n\t * 数値を半角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toHalfWidthNumber(text) {\n\t\t/**\n\t\t * @param {string} ch \n\t\t * @private\n\t\t */\n\t\tconst func = function(ch) {\n\t\t\treturn(String.fromCharCode(ch.charCodeAt(0) - 0xFEE0));\n\t\t};\n\t\treturn (text.replace(/[\\uFF10-\\uFF19]/g, func));\n\t}\n\t\n\t/**\n\t * 数値を全角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toFullWidthNumber(text) {\n\t\t/**\n\t\t * @param {string} ch \n\t\t * @private\n\t\t */\n\t\tconst func = function(ch) {\n\t\t\treturn(String.fromCharCode(ch.charCodeAt(0) + 0xFEE0));\n\t\t};\n\t\treturn (text.replace(/[0-9]/g, func));\n\t}\n\t\n\t/**\n\t * カタカナを半角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toHalfWidthKana(text) {\n\t\t/**\n\t\t * @type {Object<number, string>}\n\t\t * @private\n\t\t */\n\t\tconst map = {\n\t\t\t0x3001\t:\t\"\\uFF64\"\t,\t//\t､\n\t\t\t0x3002\t:\t\"\\uFF61\"\t,\t//\t。\t｡\n\t\t\t0x300C\t:\t\"\\uFF62\"\t,\t//\t「\t｢\n\t\t\t0x300D\t:\t\"\\uFF63\"\t,\t//\t」\t｣\n\t\t\t0x309B\t:\t\"\\uFF9E\"\t,\t//\t゛\tﾞ\n\t\t\t0x309C\t:\t\"\\uFF9F\"\t,\t//\t゜\tﾟ\n\t\t\t0x30A1\t:\t\"\\uFF67\"\t,\t//\tァ\tｧ\n\t\t\t0x30A2\t:\t\"\\uFF71\"\t,\t//\tア\tｱ\n\t\t\t0x30A3\t:\t\"\\uFF68\"\t,\t//\tィ\tｨ\n\t\t\t0x30A4\t:\t\"\\uFF72\"\t,\t//\tイ\tｲ\n\t\t\t0x30A5\t:\t\"\\uFF69\"\t,\t//\tゥ\tｩ\n\t\t\t0x30A6\t:\t\"\\uFF73\"\t,\t//\tウ\tｳ\n\t\t\t0x30A7\t:\t\"\\uFF6A\"\t,\t//\tェ\tｪ\n\t\t\t0x30A8\t:\t\"\\uFF74\"\t,\t//\tエ\tｴ\n\t\t\t0x30A9\t:\t\"\\uFF6B\"\t,\t//\tォ\tｫ\n\t\t\t0x30AA\t:\t\"\\uFF75\"\t,\t//\tオ\tｵ\n\t\t\t0x30AB\t:\t\"\\uFF76\"\t,\t//\tカ\tｶ\n\t\t\t0x30AC\t:\t\"\\uFF76\\uFF9E\"\t,\t//\tガ\tｶﾞ\n\t\t\t0x30AD\t:\t\"\\uFF77\"\t,\t//\tキ\tｷ\n\t\t\t0x30AE\t:\t\"\\uFF77\\uFF9E\"\t,\t//\tギ\tｷﾞ\n\t\t\t0x30AF\t:\t\"\\uFF78\"\t,\t//\tク\tｸ\n\t\t\t0x30B0\t:\t\"\\uFF78\\uFF9E\"\t,\t//\tグ\tｸﾞ\n\t\t\t0x30B1\t:\t\"\\uFF79\"\t,\t//\tケ\tｹ\n\t\t\t0x30B2\t:\t\"\\uFF79\\uFF9E\"\t,\t//\tゲ\tｹﾞ\n\t\t\t0x30B3\t:\t\"\\uFF7A\"\t,\t//\tコ\tｺ\n\t\t\t0x30B4\t:\t\"\\uFF7A\\uFF9E\"\t,\t//\tゴ\tｺﾞ\n\t\t\t0x30B5\t:\t\"\\uFF7B\"\t,\t//\tサ\tｻ\n\t\t\t0x30B6\t:\t\"\\uFF7B\\uFF9E\"\t,\t//\tザ\tｻﾞ\n\t\t\t0x30B7\t:\t\"\\uFF7C\"\t,\t//\tシ\tｼ\n\t\t\t0x30B8\t:\t\"\\uFF7C\\uFF9E\"\t,\t//\tジ\tｼﾞ\n\t\t\t0x30B9\t:\t\"\\uFF7D\"\t,\t//\tス\tｽ\n\t\t\t0x30BA\t:\t\"\\uFF7D\\uFF9E\"\t,\t//\tズ\tｽﾞ\n\t\t\t0x30BB\t:\t\"\\uFF7E\"\t,\t//\tセ\tｾ\n\t\t\t0x30BC\t:\t\"\\uFF7E\\uFF9E\"\t,\t//\tゼ\tｾﾞ\n\t\t\t0x30BD\t:\t\"\\uFF7F\"\t,\t//\tソ\tｿ\n\t\t\t0x30BE\t:\t\"\\uFF7F\\uFF9E\"\t,\t//\tゾ\tｿﾞ\n\t\t\t0x30BF\t:\t\"\\uFF80\"\t,\t//\tタ\tﾀ\n\t\t\t0x30C0\t:\t\"\\uFF80\\uFF9E\"\t,\t//\tダ\tﾀﾞ\n\t\t\t0x30C1\t:\t\"\\uFF81\"\t,\t//\tチ\tﾁ\n\t\t\t0x30C2\t:\t\"\\uFF81\\uFF9E\"\t,\t//\tヂ\tﾁﾞ\n\t\t\t0x30C3\t:\t\"\\uFF6F\"\t,\t//\tッ\tｯ\n\t\t\t0x30C4\t:\t\"\\uFF82\"\t,\t//\tツ\tﾂ\n\t\t\t0x30C5\t:\t\"\\uFF82\\uFF9E\"\t,\t//\tヅ\tﾂﾞ\n\t\t\t0x30C6\t:\t\"\\uFF83\"\t,\t//\tテ\tﾃ\n\t\t\t0x30C7\t:\t\"\\uFF83\\uFF9E\"\t,\t//\tデ\tﾃﾞ\n\t\t\t0x30C8\t:\t\"\\uFF84\"\t,\t//\tト\tﾄ\n\t\t\t0x30C9\t:\t\"\\uFF84\\uFF9E\"\t,\t//\tド\tﾄﾞ\n\t\t\t0x30CA\t:\t\"\\uFF85\"\t,\t//\tナ\tﾅ\n\t\t\t0x30CB\t:\t\"\\uFF86\"\t,\t//\tニ\tﾆ\n\t\t\t0x30CC\t:\t\"\\uFF87\"\t,\t//\tヌ\tﾇ\n\t\t\t0x30CD\t:\t\"\\uFF88\"\t,\t//\tネ\tﾈ\n\t\t\t0x30CE\t:\t\"\\uFF89\"\t,\t//\tノ\tﾉ\n\t\t\t0x30CF\t:\t\"\\uFF8A\"\t,\t//\tハ\tﾊ\n\t\t\t0x30D0\t:\t\"\\uFF8A\\uFF9E\"\t,\t//\tバ\tﾊﾞ\n\t\t\t0x30D1\t:\t\"\\uFF8A\\uFF9F\"\t,\t//\tパ\tﾊﾟ\n\t\t\t0x30D2\t:\t\"\\uFF8B\"\t,\t//\tヒ\tﾋ\n\t\t\t0x30D3\t:\t\"\\uFF8B\\uFF9E\"\t,\t//\tビ\tﾋﾞ\n\t\t\t0x30D4\t:\t\"\\uFF8B\\uFF9F\"\t,\t//\tピ\tﾋﾟ\n\t\t\t0x30D5\t:\t\"\\uFF8C\"\t,\t//\tフ\tﾌ\n\t\t\t0x30D6\t:\t\"\\uFF8C\\uFF9E\"\t,\t//\tブ\tﾌﾞ\n\t\t\t0x30D7\t:\t\"\\uFF8C\\uFF9F\"\t,\t//\tプ\tﾌﾟ\n\t\t\t0x30D8\t:\t\"\\uFF8D\"\t,\t//\tヘ\tﾍ\n\t\t\t0x30D9\t:\t\"\\uFF8D\\uFF9E\"\t,\t//\tベ\tﾍﾞ\n\t\t\t0x30DA\t:\t\"\\uFF8D\\uFF9F\"\t,\t//\tペ\tﾍﾟ\n\t\t\t0x30DB\t:\t\"\\uFF8E\"\t,\t//\tホ\tﾎ\n\t\t\t0x30DC\t:\t\"\\uFF8E\\uFF9E\"\t,\t//\tボ\tﾎﾞ\n\t\t\t0x30DD\t:\t\"\\uFF8E\\uFF9F\"\t,\t//\tポ\tﾎﾟ\n\t\t\t0x30DE\t:\t\"\\uFF8F\"\t,\t//\tマ\tﾏ\n\t\t\t0x30DF\t:\t\"\\uFF90\"\t,\t//\tミ\tﾐ\n\t\t\t0x30E0\t:\t\"\\uFF91\"\t,\t//\tム\tﾑ\n\t\t\t0x30E1\t:\t\"\\uFF92\"\t,\t//\tメ\tﾒ\n\t\t\t0x30E2\t:\t\"\\uFF93\"\t,\t//\tモ\tﾓ\n\t\t\t0x30E3\t:\t\"\\uFF6C\"\t,\t//\tャ\tｬ\n\t\t\t0x30E4\t:\t\"\\uFF94\"\t,\t//\tヤ\tﾔ\n\t\t\t0x30E5\t:\t\"\\uFF6D\"\t,\t//\tュ\tｭ\n\t\t\t0x30E6\t:\t\"\\uFF95\"\t,\t//\tユ\tﾕ\n\t\t\t0x30E7\t:\t\"\\uFF6E\"\t,\t//\tョ\tｮ\n\t\t\t0x30E8\t:\t\"\\uFF96\"\t,\t//\tヨ\tﾖ\n\t\t\t0x30E9\t:\t\"\\uFF97\"\t,\t//\tラ\tﾗ\n\t\t\t0x30EA\t:\t\"\\uFF98\"\t,\t//\tリ\tﾘ\n\t\t\t0x30EB\t:\t\"\\uFF99\"\t,\t//\tル\tﾙ\n\t\t\t0x30EC\t:\t\"\\uFF9A\"\t,\t//\tレ\tﾚ\n\t\t\t0x30ED\t:\t\"\\uFF9B\"\t,\t//\tロ\tﾛ\n\t\t\t0x30EE\t:\t\"\\uFF9C\"\t,\t//\tヮ\tﾜ\n\t\t\t0x30EF\t:\t\"\\uFF9C\"\t,\t//\tワ\tﾜ\n\t\t\t0x30F0\t:\t\"\\uFF72\"\t,\t//\tヰ\tｲ\n\t\t\t0x30F1\t:\t\"\\uFF74\"\t,\t//\tヱ\tｴ\n\t\t\t0x30F2\t:\t\"\\uFF66\"\t,\t//\tヲ\tｦ\n\t\t\t0x30F3\t:\t\"\\uFF9D\"\t,\t//\tン\tﾝ\n\t\t\t0x30F4\t:\t\"\\uFF73\\uFF9E\"\t,\t//\tヴ\tｳﾞ\n\t\t\t0x30F5\t:\t\"\\uFF76\"\t,\t//\tヵ\tｶ\n\t\t\t0x30F6\t:\t\"\\uFF79\"\t,\t//\tヶ\tｹ\n\t\t\t0x30F7\t:\t\"\\uFF9C\\uFF9E\"\t,\t//\tヷ\tﾜﾞ\n\t\t\t0x30F8\t:\t\"\\uFF72\\uFF9E\"\t,\t//\tヸ\tｲﾞ\n\t\t\t0x30F9\t:\t\"\\uFF74\\uFF9E\"\t,\t//\tヹ\tｴﾞ\n\t\t\t0x30FA\t:\t\"\\uFF66\\uFF9E\"\t,\t//\tヺ\tｦﾞ\n\t\t\t0x30FB\t:\t\"\\uFF65\"\t,\t//\t・\t･\n\t\t\t0x30FC\t:\t\"\\uFF70\"\t\t//\tー\tｰ\n\t\t};\n\t\t/**\n\t\t * @param {string} ch \n\t\t * @private\n\t\t */\n\t\tconst func = function(ch) {\n\t\t\tif(ch.length === 1) {\n\t\t\t\treturn(map[ch.charCodeAt(0)]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn(map[ch.charCodeAt(0)] + map[ch.charCodeAt(1)]);\n\t\t\t}\n\t\t};\n\t\treturn (text.replace(/[\\u3001\\u3002\\u300C\\u300D\\u309B\\u309C\\u30A1-\\u30FC][\\u309B\\u309C]?/g, func));\n\t}\n\n\t/**\n\t * カタカナを全角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toFullWidthKana(text) {\n\t\t/**\n\t\t * @type {Object<number, number>}\n\t\t * @private\n\t\t */\n\t\tconst map = {\n\t\t\t0xFF61\t:\t0x3002\t,\t//\t。\t｡\n\t\t\t0xFF62\t:\t0x300C\t,\t//\t「\t｢\n\t\t\t0xFF63\t:\t0x300D\t,\t//\t」\t｣\n\t\t\t0xFF64\t:\t0x3001\t,\t//\t､\n\t\t\t0xFF65\t:\t0x30FB\t,\t//\t・\t･\n\t\t\t0xFF66\t:\t0x30F2\t,\t//\tヲ\tｦ\n\t\t\t0xFF67\t:\t0x30A1\t,\t//\tァ\tｧ\n\t\t\t0xFF68\t:\t0x30A3\t,\t//\tィ\tｨ\n\t\t\t0xFF69\t:\t0x30A5\t,\t//\tゥ\tｩ\n\t\t\t0xFF6A\t:\t0x30A7\t,\t//\tェ\tｪ\n\t\t\t0xFF6B\t:\t0x30A9\t,\t//\tォ\tｫ\n\t\t\t0xFF6C\t:\t0x30E3\t,\t//\tャ\tｬ\n\t\t\t0xFF6D\t:\t0x30E5\t,\t//\tュ\tｭ\n\t\t\t0xFF6E\t:\t0x30E7\t,\t//\tョ\tｮ\n\t\t\t0xFF6F\t:\t0x30C3\t,\t//\tッ\tｯ\n\t\t\t0xFF70\t:\t0x30FC\t,\t//\tー\tｰ\n\t\t\t0xFF71\t:\t0x30A2\t,\t//\tア\tｱ\n\t\t\t0xFF72\t:\t0x30A4\t,\t//\tイ\tｲ\n\t\t\t0xFF73\t:\t0x30A6\t,\t//\tウ\tｳ\n\t\t\t0xFF74\t:\t0x30A8\t,\t//\tエ\tｴ\n\t\t\t0xFF75\t:\t0x30AA\t,\t//\tオ\tｵ\n\t\t\t0xFF76\t:\t0x30AB\t,\t//\tカ\tｶ\n\t\t\t0xFF77\t:\t0x30AD\t,\t//\tキ\tｷ\n\t\t\t0xFF78\t:\t0x30AF\t,\t//\tク\tｸ\n\t\t\t0xFF79\t:\t0x30B1\t,\t//\tケ\tｹ\n\t\t\t0xFF7A\t:\t0x30B3\t,\t//\tコ\tｺ\n\t\t\t0xFF7B\t:\t0x30B5\t,\t//\tサ\tｻ\n\t\t\t0xFF7C\t:\t0x30B7\t,\t//\tシ\tｼ\n\t\t\t0xFF7D\t:\t0x30B9\t,\t//\tス\tｽ\n\t\t\t0xFF7E\t:\t0x30BB\t,\t//\tセ\tｾ\n\t\t\t0xFF7F\t:\t0x30BD\t,\t//\tソ\tｿ\n\t\t\t0xFF80\t:\t0x30BF\t,\t//\tタ\tﾀ\n\t\t\t0xFF81\t:\t0x30C1\t,\t//\tチ\tﾁ\n\t\t\t0xFF82\t:\t0x30C4\t,\t//\tツ\tﾂ\n\t\t\t0xFF83\t:\t0x30C6\t,\t//\tテ\tﾃ\n\t\t\t0xFF84\t:\t0x30C8\t,\t//\tト\tﾄ\n\t\t\t0xFF85\t:\t0x30CA\t,\t//\tナ\tﾅ\n\t\t\t0xFF86\t:\t0x30CB\t,\t//\tニ\tﾆ\n\t\t\t0xFF87\t:\t0x30CC\t,\t//\tヌ\tﾇ\n\t\t\t0xFF88\t:\t0x30CD\t,\t//\tネ\tﾈ\n\t\t\t0xFF89\t:\t0x30CE\t,\t//\tノ\tﾉ\n\t\t\t0xFF8A\t:\t0x30CF\t,\t//\tハ\tﾊ\n\t\t\t0xFF8B\t:\t0x30D2\t,\t//\tヒ\tﾋ\n\t\t\t0xFF8C\t:\t0x30D5\t,\t//\tフ\tﾌ\n\t\t\t0xFF8D\t:\t0x30D8\t,\t//\tヘ\tﾍ\n\t\t\t0xFF8E\t:\t0x30DB\t,\t//\tホ\tﾎ\n\t\t\t0xFF8F\t:\t0x30DE\t,\t//\tマ\tﾏ\n\t\t\t0xFF90\t:\t0x30DF\t,\t//\tミ\tﾐ\n\t\t\t0xFF91\t:\t0x30E0\t,\t//\tム\tﾑ\n\t\t\t0xFF92\t:\t0x30E1\t,\t//\tメ\tﾒ\n\t\t\t0xFF93\t:\t0x30E2\t,\t//\tモ\tﾓ\n\t\t\t0xFF94\t:\t0x30E4\t,\t//\tヤ\tﾔ\n\t\t\t0xFF95\t:\t0x30E6\t,\t//\tユ\tﾕ\n\t\t\t0xFF96\t:\t0x30E8\t,\t//\tヨ\tﾖ\n\t\t\t0xFF97\t:\t0x30E9\t,\t//\tラ\tﾗ\n\t\t\t0xFF98\t:\t0x30EA\t,\t//\tリ\tﾘ\n\t\t\t0xFF99\t:\t0x30EB\t,\t//\tル\tﾙ\n\t\t\t0xFF9A\t:\t0x30EC\t,\t//\tレ\tﾚ\n\t\t\t0xFF9B\t:\t0x30ED\t,\t//\tロ\tﾛ\n\t\t\t0xFF9C\t:\t0x30EF\t,\t//\tワ\tﾜ\n\t\t\t0xFF9D\t:\t0x30F3\t,\t//\tン\tﾝ\n\t\t\t0xFF9E\t:\t0x309B\t,\t//\t゛\tﾞ\n\t\t\t0xFF9F\t:\t0x309C\t\t//\t゜\tﾟ\n\t\t};\n\t\t/**\n\t\t * @param {string} str \n\t\t * @private\n\t\t */\n\t\tconst func = function(str) {\n\t\t\tif(str.length === 1) {\n\t\t\t\treturn (String.fromCharCode(map[str.charCodeAt(0)]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst next = str.charCodeAt(1);\n\t\t\t\tconst ch   = str.charCodeAt(0);\n\t\t\t\tif(next === 0xFF9E) {\n\t\t\t\t\t// Shift-JISにない濁点（ヷ、ヸ、ヹ、ヺ）は意図的に無視\n\t\t\t\t\t// ヴ\n\t\t\t\t\tif (ch === 0xFF73) {\n\t\t\t\t\t\treturn (String.fromCharCode(0x3094));\n\t\t\t\t\t}\n\t\t\t\t\t// ガ-ド、バ-ボ\n\t\t\t\t\telse if(\n\t\t\t\t\t\t((0xFF76 <= ch) && (ch <= 0xFF84)) ||\n\t\t\t\t\t\t((0xFF8A <= ch) && (ch <= 0xFF8E))\t) {\n\t\t\t\t\t\treturn (String.fromCharCode(map[ch] + 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 半濁点\n\t\t\t\telse if(next === 0xFF9F) {\n\t\t\t\t\t// パ-ポ\n\t\t\t\t\tif((0xFF8A <= ch) && (ch <= 0xFF8E)) {\n\t\t\t\t\t\treturn (String.fromCharCode(map[ch] + 2));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn (String.fromCharCode(map[ch]) + String.fromCharCode(map[next]));\n\t\t\t}\n\t\t};\n\t\treturn (text.replace(/[\\uFF61-\\uFF9F][\\uFF9E\\uFF9F]?/g, func));\n\t}\n\t\n\t/**\n\t * 半角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toHalfWidth(text) {\n\t\treturn Japanese.toHalfWidthKana(Japanese.toHalfWidthAsciiCode(text));\n\t}\n\t\n\t/**\n\t * 全角に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic toFullWidth(text) {\n\t\treturn Japanese.toFullWidthKana(Japanese.toFullWidthAsciiCode(text));\n\t}\n\n\t/**\n\t * 指定したテキストの横幅を半角／全角でカウント\n\t * - 半角を1、全角を2としてカウント\n\t * - 半角は、ASCII文字、半角カタカナ。全角はそれ以外とします。\n\t * @param {String} text - カウントしたいテキスト\n\t * @returns {Number} 文字の横幅\n\t */\n\tstatic getWidth(text) {\n\t\tconst utf32_array = Unicode.toUTF32Array(text);\n\t\tlet count = 0;\n\t\tfor(let i = 0; i < utf32_array.length; i++) {\n\t\t\tconst ch = utf32_array[i];\n\t\t\tif((ch < 0x80) || ((0xFF61 <= ch) && (ch < 0xFFA0))) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcount += 2;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * 指定したテキストの横幅を半角／全角で換算した場合の切り出し\n\t * - 半角を1、全角を2としてカウント\n\t * - 半角は、ASCII文字、半角カタカナ。全角はそれ以外とします。\n\t * @param {String} text - 切り出したいテキスト\n\t * @param {Number} offset - 切り出し位置\n\t * @param {Number} size - 切り出す長さ\n\t * @returns {String} 切り出したテキスト\n\t */\n\tstatic cutTextForWidth(text, offset, size) {\n\t\tconst utf32_array = Unicode.toUTF32Array(text);\n\t\tconst SPACE = 0x20 ; // ' '\n\t\tconst output = [];\n\t\tlet is_target = false;\n\t\tlet position = 0;\n\t\tlet cut_size = size;\n\t\tlet ioffset = offset;\n\t\tif(ioffset < 0) {\n\t\t\tcut_size += ioffset;\n\t\t\tioffset = 0;\n\t\t}\n\t\tif(cut_size <= 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tfor(let i = 0; i < utf32_array.length; i++) {\n\t\t\tconst ch = utf32_array[i];\n\t\t\tconst ch_size = ((ch < 0x80) || ((0xFF61 <= ch) && (ch < 0xFFA0))) ? 1 : 2;\n\t\t\tif(position >= ioffset) {\n\t\t\t\tis_target = true;\n\t\t\t\tif(cut_size >= ch_size) {\n\t\t\t\t\toutput.push(ch);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toutput.push(SPACE);\n\t\t\t\t}\n\t\t\t\tcut_size -= ch_size;\n\t\t\t\tif(cut_size <= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tposition += ch_size;\n\t\t\t// 2バイト文字の途中をoffset指定していた場合になる。\n\t\t\tif(((position - 1) >= ioffset) && !is_target) {\n\t\t\t\tcut_size--;\n\t\t\t\toutput.push(SPACE);\n\t\t\t}\n\t\t}\n\t\treturn Unicode.fromUTF32Array(output);\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/mojijs/Japanese.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "Japanese",
    "memberof": "src/mojijs/Japanese.js",
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/mojijs/Japanese.js",
    "importStyle": "Japanese",
    "description": "日本語の変換を扱うクラス",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "toHiragana",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toHiragana",
    "access": "public",
    "description": "カタカナをひらがなに変換",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "toKatakana",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toKatakana",
    "access": "public",
    "description": "ひらがなをカタカナに変換",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "toHalfWidthSpace",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toHalfWidthSpace",
    "access": "public",
    "description": "スペースを半角に変換",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "toFullWidthSpace",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toFullWidthSpace",
    "access": "public",
    "description": "スペースを全角に変換",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "toHalfWidthAsciiCode",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toHalfWidthAsciiCode",
    "access": "public",
    "description": "英数記号を半角に変換",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "toFullWidthAsciiCode",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toFullWidthAsciiCode",
    "access": "public",
    "description": "英数記号を全角に変換",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "toHalfWidthAlphabet",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toHalfWidthAlphabet",
    "access": "public",
    "description": "アルファベットを半角に変換",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "toFullWidthAlphabet",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toFullWidthAlphabet",
    "access": "public",
    "description": "アルファベットを全角に変換",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "toHalfWidthNumber",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toHalfWidthNumber",
    "access": "public",
    "description": "数値を半角に変換",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "toFullWidthNumber",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toFullWidthNumber",
    "access": "public",
    "description": "数値を全角に変換",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "toHalfWidthKana",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toHalfWidthKana",
    "access": "public",
    "description": "カタカナを半角に変換",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "toFullWidthKana",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toFullWidthKana",
    "access": "public",
    "description": "カタカナを全角に変換",
    "lineNumber": 304,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "toHalfWidth",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toHalfWidth",
    "access": "public",
    "description": "半角に変換",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "toFullWidth",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.toFullWidth",
    "access": "public",
    "description": "全角に変換",
    "lineNumber": 425,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "getWidth",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.getWidth",
    "access": "public",
    "description": "指定したテキストの横幅を半角／全角でカウント\n- 半角を1、全角を2としてカウント\n- 半角は、ASCII文字、半角カタカナ。全角はそれ以外とします。",
    "lineNumber": 436,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} 文字の横幅"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "カウントしたいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "文字の横幅"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "cutTextForWidth",
    "memberof": "src/mojijs/Japanese.js~Japanese",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Japanese.js~Japanese.cutTextForWidth",
    "access": "public",
    "description": "指定したテキストの横幅を半角／全角で換算した場合の切り出し\n- 半角を1、全角を2としてカウント\n- 半角は、ASCII文字、半角カタカナ。全角はそれ以外とします。",
    "lineNumber": 460,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 切り出したテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "切り出したいテキスト"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "切り出し位置"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "切り出す長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "切り出したテキスト"
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/mojijs/StringComparator.js",
    "content": "/**\n * The script is part of MojiJS.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Japanese from \"./Japanese.js\";\nimport Unicode from \"./Unicode.js\";\n\n/**\n * 日本語の文字列比較用関数を提供するクラス\n * - sortの引数で利用できます\n */\nexport default class StringComparator {\n\n\t/**\n\t * 文字列の揺れを除去し正規化します。\n\t * @param {String} string_data - 正規化したいテキスト\n\t * @returns {String} 正規化後のテキスト\n\t * @private\n\t * @ignore\n\t */\n\tstatic toNormalizeString(string_data) {\n\t\tlet normalize_text = null;\n\t\t// NORM_IGNOREWIDTH 半角全角区別しない（半角英数記号と全角カタカナに統一）\n\t\tnormalize_text = Japanese.toHalfWidthAsciiCode(Japanese.toHalfWidthAsciiCode(string_data));\n\t\t// LCMAP_LOWERCASE 半角に統一\n\t\tnormalize_text = normalize_text.toLowerCase();\n\t\t// NORM_IGNOREKANATYPE ひらがなとカタカナを区別しない\n\t\tnormalize_text = Japanese.toHiragana(normalize_text);\n\t\t// NORM_IGNORENONSPACE 簡単に場所をとらない記号を削除\n\t\tnormalize_text = normalize_text.replace(/[゛゜]/g, \"\");\n\t\t// NORM_IGNORESYMBOLS 英文法の記号を無視\n\t\tnormalize_text = normalize_text.replace(/[\"'-]/g, \"\");\n\t\treturn normalize_text;\n\t}\n\n\t/**\n\t * ASCIIコードが半角数値かどうかを判定する\n\t * @param {number} string_number - ASCIIコード\n\t * @returns {Boolean} 数値ならTRUE\n\t * @private\n\t * @ignore\n\t */\n\tstatic isNumberAscii(string_number) {\n\t\tconst ASCII_0 = 0x30;\n\t\tconst ASCII_9 = 0x39;\n\t\treturn (ASCII_0 <= string_number) && (string_number <= ASCII_9);\n\t}\n\n\t/**\n\t * ASCIIコード配列の中で指定した位置から数値が何バイト続くか\n\t * @param {Array<number>} string_number_array - ASCIIコードの配列\n\t * @param {number} offset - どの位置から調べるか\n\t * @returns {number} 数値ならTRUE\n\t * @private\n\t * @ignore\n\t */\n\tstatic getNumberAsciiLength(string_number_array, offset) {\n\t\tfor(let i = offset; i < string_number_array.length; i++) {\n\t\t\tif(!StringComparator.isNumberAscii(string_number_array[i])) {\n\t\t\t\treturn (i - offset);\n\t\t\t}\n\t\t}\n\t\treturn (string_number_array.length - offset);\n\t}\n\n\t/**\n\t * ASCIIコード配列の中の指定した位置にある数値データ同士をCompareする\n\t * @param {Array<number>} t1 - ASCIIコードの配列（比較元）\n\t * @param {number} t1off - どの位置から調べるか\n\t * @param {number} t1size - 調べるサイズ\n\t * @param {Array<number>} t2 - ASCIIコードの配列（比較先）\n\t * @param {number} t2off - どの位置から調べるか\n\t * @param {number} t2size - 調べるサイズ\n\t * @returns {number} Compare結果\n\t * @private\n\t * @ignore\n\t */\n\tstatic compareNumber(t1, t1off, t1size, t2, t2off, t2size) {\n\t\tconst ASCII_0 = 0x30;\n\t\tconst t1end = t1off + t1size;\n\t\tconst t2end = t2off + t2size;\n\t\t// 前方から調査\n\t\tlet t1p = t1off;\n\t\tlet t2p = t2off;\n\t\t// 先頭の0は飛ばして比較したい\n\t\t// 0以外の数値がどこに含まれているか調査\n\t\tfor(;t1p < t1end;t1p++) {\n\t\t\tif(t1[t1p] !== ASCII_0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor(;t2p < t2end;t2p++) {\n\t\t\tif(t2[t2p] !== ASCII_0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// 0しかなかった場合\n\t\tif((t1p == t1end)||(t2p == t2end)) {\n\t\t\tif(t1p != t1end) { //t2pのみはみだした == 0\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if(t2p != t2end) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\t// 桁数のみでどちらが大きいか比較\n\t\tconst t1keta = t1size - (t1p - t1off);\n\t\tconst t2keta = t2size - (t2p - t2off);\n\t\tif(t1keta > t2keta) {\n\t\t\treturn 1;\n\t\t}\n\t\telse if(t1keta < t2keta) {\n\t\t\treturn -1;\n\t\t}\n\t\t// 同じ桁同士の比較\n\t\tfor(;t1p < t1end;) {\n\t\t\tif(t1[t1p] > t2[t2p]) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if(t1[t1p] < t2[t2p]) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tt1p++;\n\t\t\tt2p++;\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * ASCIIコード配列の同士をCompareする\n\t * @param {Array<number>} t1 - ASCIIコードの配列（比較元）\n\t * @param {Array<number>} t2 - ASCIIコードの配列（比較先）\n\t * @returns {number} Compare結果\n\t * @private\n\t * @ignore\n\t */\n\tstatic compareText(t1, t2) {\n\t\tconst l1 = t1.length;\n\t\tconst l2 = t2.length;\n\t\tif((l1 === 0) && (l2 === 0)) {\n\t\t\treturn 0;\n\t\t}\n\t\tif(l1 === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tif(l2 === 0) {\n\t\t\treturn 1;\n\t\t}\n\t\t//この地点で両方とも長さが1より大きい\n\t\tlet t1off = 0;\n\t\tlet t2off = 0;\n\t\twhile(t1off <= l1 && t2off <= l2) {\n\t\t\tconst t1isnum = StringComparator.isNumberAscii(t1[t1off]);\n\t\t\tconst t2isnum = StringComparator.isNumberAscii(t2[t2off]);\n\t\t\t//文字目の種類が違う\n\t\t\tif(t1isnum !== t2isnum) {\n\t\t\t\tif(t1isnum) {\n\t\t\t\t\treturn -1;//数値が前\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 1;//文字が後ろ\n\t\t\t\t}\n\t\t\t}\n\t\t\t//両方とも数値\n\t\t\tif(t1isnum) {\n\t\t\t\tconst t1size = StringComparator.getNumberAsciiLength(t1, t1off);\n\t\t\t\tconst t2size = StringComparator.getNumberAsciiLength(t2, t2off);\n\t\t\t\tconst r = StringComparator.compareNumber(t1,t1off,t1size,t2,t2off,t2size);\n\t\t\t\tif(r !== 0) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t\tt1off += t1size;\n\t\t\t\tt2off += t2size;\n\t\t\t}\n\t\t\t//両方とも文字列\n\t\t\telse {\n\t\t\t\tif(t1[t1off] > t2[t2off]) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if(t1[t1off] < t2[t2off]) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tt1off++;\n\t\t\t\tt2off++;\n\t\t\t}\n\t\t\t//両方ともオーバー\n\t\t\tif((t1off >= l1)&&(t2off >= l2)) {\n\t\t\t\t//長さも等しい\n\t\t\t\tif(l1 === l2) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\telse if(l1 > l2) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//片方のほうがサイズが大きい\n\t\t\telse if(t2off >= l2) { //t2の方が短い\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if(t1off >= l1) { //t1の方が短い\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\t// ※ここには達成しない\n\t\treturn 0;\n\t}\n\n\t/**\n\t * 2つの文字列を比較する\n\t * @param {String} a - 比較元\n\t * @param {String} b - 比較先\n\t * @returns {number} Compare結果\n\t */\n\tstatic DEFAULT(a, b) {\n\t\tif(a === b) {\n\t\t\treturn 0;\n\t\t}\n\t\tif(typeof a === typeof b) {\n\t\t\treturn (a < b ? -1 : 1);\n\t\t}\n\t\treturn ((typeof a < typeof b) ? -1 : 1);\n\t}\n\n\t/**\n\t * 2つの文字列を自然順に比較を行う（自然順ソート（Natural Sort）用）\n\t * @param {String} a - 比較元\n\t * @param {String} b - 比較先\n\t * @returns {number} Compare結果\n\t */\n\tstatic NATURAL(a, b) {\n\t\tif((typeof a === typeof b) && (typeof a === \"string\")) {\n\t\t\tconst a_str = Unicode.toUTF16Array(StringComparator.toNormalizeString(a));\n\t\t\tconst b_str = Unicode.toUTF16Array(StringComparator.toNormalizeString(b));\n\t\t\treturn StringComparator.compareText(a_str, b_str);\n\t\t}\n\t\telse {\n\t\t\treturn StringComparator.DEFAULT(a, b);\n\t\t}\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/mojijs/StringComparator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "class",
    "name": "StringComparator",
    "memberof": "src/mojijs/StringComparator.js",
    "static": true,
    "longname": "src/mojijs/StringComparator.js~StringComparator",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/mojijs/StringComparator.js",
    "importStyle": "StringComparator",
    "description": "日本語の文字列比較用関数を提供するクラス\n- sortの引数で利用できます",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "toNormalizeString",
    "memberof": "src/mojijs/StringComparator.js~StringComparator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/StringComparator.js~StringComparator.toNormalizeString",
    "access": "private",
    "description": "文字列の揺れを除去し正規化します。",
    "lineNumber": 27,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 正規化後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "string_data",
        "description": "正規化したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "正規化後のテキスト"
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "isNumberAscii",
    "memberof": "src/mojijs/StringComparator.js~StringComparator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/StringComparator.js~StringComparator.isNumberAscii",
    "access": "private",
    "description": "ASCIIコードが半角数値かどうかを判定する",
    "lineNumber": 49,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} 数値ならTRUE"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "string_number",
        "description": "ASCIIコード"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "数値ならTRUE"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "getNumberAsciiLength",
    "memberof": "src/mojijs/StringComparator.js~StringComparator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/StringComparator.js~StringComparator.getNumberAsciiLength",
    "access": "private",
    "description": "ASCIIコード配列の中で指定した位置から数値が何バイト続くか",
    "lineNumber": 63,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 数値ならTRUE"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "string_number_array",
        "description": "ASCIIコードの配列"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "どの位置から調べるか"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "数値ならTRUE"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "compareNumber",
    "memberof": "src/mojijs/StringComparator.js~StringComparator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/StringComparator.js~StringComparator.compareNumber",
    "access": "private",
    "description": "ASCIIコード配列の中の指定した位置にある数値データ同士をCompareする",
    "lineNumber": 84,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Compare結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "t1",
        "description": "ASCIIコードの配列（比較元）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t1off",
        "description": "どの位置から調べるか"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t1size",
        "description": "調べるサイズ"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "t2",
        "description": "ASCIIコードの配列（比較先）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t2off",
        "description": "どの位置から調べるか"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t2size",
        "description": "調べるサイズ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Compare結果"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "compareText",
    "memberof": "src/mojijs/StringComparator.js~StringComparator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/StringComparator.js~StringComparator.compareText",
    "access": "private",
    "description": "ASCIIコード配列の同士をCompareする",
    "lineNumber": 146,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Compare結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "t1",
        "description": "ASCIIコードの配列（比較元）"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "t2",
        "description": "ASCIIコードの配列（比較先）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Compare結果"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "DEFAULT",
    "memberof": "src/mojijs/StringComparator.js~StringComparator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/StringComparator.js~StringComparator.DEFAULT",
    "access": "public",
    "description": "2つの文字列を比較する",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Compare結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "比較元"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "比較先"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Compare結果"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "NATURAL",
    "memberof": "src/mojijs/StringComparator.js~StringComparator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/StringComparator.js~StringComparator.NATURAL",
    "access": "public",
    "description": "2つの文字列を自然順に比較を行う（自然順ソート（Natural Sort）用）",
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Compare結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "比較元"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "比較先"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Compare結果"
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/mojijs/Unicode.js",
    "content": "﻿/**\n * The script is part of MojiJS.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport ExtendsString from \"../senko/ExtendsString.js\";\n\n/**\n * Unicodeを扱うクラス\n * @ignore\n */\nexport default class Unicode {\n\n\t/**\n\t * 文字列をUTF32(コードポイント)の配列に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {Array<number>} UTF32(コードポイント)のデータが入った配列\n\t */\n\tstatic toUTF32Array(text) {\n\t\tconst utf32 = [];\n\t\tfor(let i = 0; i < text.length; i = ExtendsString.offsetByCodePoints(text, i, 1)) {\n\t\t\tutf32.push(ExtendsString.codePointAt(text, i));\n\t\t}\n\t\treturn utf32;\n\t}\n\n\t/**\n\t * UTF32の配列から文字列に変換\n\t * @param {Array<number>} utf32 - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic fromUTF32Array(utf32) {\n\t\treturn ExtendsString.fromCodePoint(utf32);\n\t}\n\n\t/**\n\t * 文字列をUTF16の配列に変換\n\t * @param {String} text - 変換したいテキスト\n\t * @returns {Array<number>} UTF16のデータが入った配列\n\t */\n\tstatic toUTF16Array(text) {\n\t\tconst utf16 = [];\n\t\tfor(let i = 0; i < text.length; i++) {\n\t\t\tutf16[i] = text.charCodeAt(i);\n\t\t}\n\t\treturn utf16;\n\t}\n\n\t/**\n\t * UTF16の配列から文字列に変換\n\t * @param {Array<number>} utf16 - 変換したいテキスト\n\t * @returns {String} 変換後のテキスト\n\t */\n\tstatic fromUTF16Array(utf16) {\n\t\tconst text = [];\n\t\tfor(let i = 0; i < utf16.length; i++) {\n\t\t\ttext[i] = String.fromCharCode(utf16[i]);\n\t\t}\n\t\treturn text.join(\"\");\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/mojijs/Unicode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "class",
    "name": "Unicode",
    "memberof": "src/mojijs/Unicode.js",
    "static": true,
    "longname": "src/mojijs/Unicode.js~Unicode",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/mojijs/Unicode.js",
    "importStyle": "Unicode",
    "description": "Unicodeを扱うクラス",
    "lineNumber": 17,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "toUTF32Array",
    "memberof": "src/mojijs/Unicode.js~Unicode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Unicode.js~Unicode.toUTF32Array",
    "access": "public",
    "description": "文字列をUTF32(コードポイント)の配列に変換",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} UTF32(コードポイント)のデータが入った配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "UTF32(コードポイント)のデータが入った配列"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "fromUTF32Array",
    "memberof": "src/mojijs/Unicode.js~Unicode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Unicode.js~Unicode.fromUTF32Array",
    "access": "public",
    "description": "UTF32の配列から文字列に変換",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "utf32",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "toUTF16Array",
    "memberof": "src/mojijs/Unicode.js~Unicode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Unicode.js~Unicode.toUTF16Array",
    "access": "public",
    "description": "文字列をUTF16の配列に変換",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} UTF16のデータが入った配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "UTF16のデータが入った配列"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "fromUTF16Array",
    "memberof": "src/mojijs/Unicode.js~Unicode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/mojijs/Unicode.js~Unicode.fromUTF16Array",
    "access": "public",
    "description": "UTF16の配列から文字列に変換",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "utf16",
        "description": "変換したいテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/senko/CSV.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * CSV形式のテキストなどを扱うクラス\n */\nexport default class CSV {\n\t\n\t/**\n\t * CSVテキストから配列を作成\n\t * @param {string} text \n\t * @param {string} [separator=\",\"]\n\t * @returns {Array<Array<string>>}\n\t */\n\tstatic parse(text, separator) {\n\t\tconst iseparator = separator === undefined ? \",\" : separator;\n\t\t// 改行コードの正規化\n\t\tconst itext = text.replace(/\\r\\n?|\\n/g, \"\\n\");\n\t\tconst CODE_SEPARATOR = iseparator.charCodeAt(0);\n\t\tconst CODE_CR    = 0x0D;\n\t\tconst CODE_LF    = 0x0A;\n\t\tconst CODE_DOUBLEQUOTES = 0x22;\n\t\tconst out = [];\n\t\tconst length = itext.length;\n\t\tlet element = \"\";\n\t\tlet count_rows    = 0;\n\t\tlet count_columns = 0;\n\t\tlet isnextelement = false;\n\t\tlet isnextline    = false;\n\t\tfor(let i = 0; i < length; i++) {\n\t\t\tlet code = itext.charCodeAt(i);\n\t\t\t// 複数行なら一気に全て読み込んでしまう(1文字目がダブルクォーテーションかどうか)\n\t\t\tif((code === CODE_DOUBLEQUOTES)&&(element.length === 0)) {\n\t\t\t\ti++;\n\t\t\t\tfor(;i < length;i++) {\n\t\t\t\t\tcode = itext.charCodeAt(i);\n\t\t\t\t\tif(code === CODE_DOUBLEQUOTES) {\n\t\t\t\t\t\t// フィールドの終了か？\n\t\t\t\t\t\t// 文字としてのダブルクォーテーションなのか\n\t\t\t\t\t\tif((i + 1) !== (length - 1)) {\n\t\t\t\t\t\t\tif(itext.charCodeAt(i + 1) === CODE_DOUBLEQUOTES) {\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\telement += \"\\\"\"; \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\telement += itext.charAt(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 複数行以外なら1文字ずつ解析\n\t\t\telse {\n\t\t\t\tswitch(code) {\n\t\t\t\t\tcase(CODE_SEPARATOR):\n\t\t\t\t\t\tisnextelement = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase(CODE_CR):\n\t\t\t\t\tcase(CODE_LF):\n\t\t\t\t\t\tisnextline = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(isnextelement) {\n\t\t\t\t\tisnextelement = false;\n\t\t\t\t\tif(out[count_rows] === undefined) {\n\t\t\t\t\t\tout[count_rows] = [];\n\t\t\t\t\t}\n\t\t\t\t\tout[count_rows][count_columns] = element;\n\t\t\t\t\telement = \"\";\n\t\t\t\t\tcount_columns += 1;\n\t\t\t\t}\n\t\t\t\telse if(isnextline) {\n\t\t\t\t\tisnextline = false;\n\t\t\t\t\t//文字があったり、改行がある場合は処理\n\t\t\t\t\t//例えば CR+LF や 最後のフィールド で改行しているだけなどは無視できる\n\t\t\t\t\tif((element !== \"\")||(count_columns !== 0)) {\n\t\t\t\t\t\tif(out[count_rows] === undefined) {\n\t\t\t\t\t\t\tout[count_rows] = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout[count_rows][count_columns] = element;\n\t\t\t\t\t\telement = \"\";\n\t\t\t\t\t\tcount_rows    += 1;\n\t\t\t\t\t\tcount_columns  = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\telement += itext.charAt(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 最終行に改行がない場合\n\t\t\tif(i === length - 1) {\n\t\t\t\tif(count_columns !== 0) {\n\t\t\t\t\tout[count_rows][count_columns] = element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\t\n\t/**\n\t * 配列からCSVテキストを作成\n\t * @param {Array<Array<string>>} csv_array \n\t * @param {string} [separator=\",\"]\n\t * @param {string} [newline=\"\\r\\n\"]\n\t * @returns {string}\n\t */\n\tstatic create(csv_array, separator, newline) {\n\t\tconst iseparator = separator === undefined ? \",\" : separator;\n\t\tconst inewline = newline === undefined ? \"\\r\\n\" : newline;\n\t\tlet out = \"\";\n\t\tconst escape = /[\"\\r\\n,\\t]/;\n\t\tif(csv_array !== undefined) {\n\t\t\tfor(let i = 0;i < csv_array.length;i++) {\n\t\t\t\tif(csv_array[i] !== undefined) {\n\t\t\t\t\tfor(let j = 0;j < csv_array[i].length;j++) {\n\t\t\t\t\t\tlet element = csv_array[i][j];\n\t\t\t\t\t\tif(escape.test(element)) {\n\t\t\t\t\t\t\telement = element.replace(/\"/g, \"\\\"\\\"\");\n\t\t\t\t\t\t\telement = \"\\\"\" + element + \"\\\"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout += element;\n\t\t\t\t\t\tif(j !== csv_array[i].length - 1) {\n\t\t\t\t\t\t\tout += iseparator;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tout += inewline;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 1行目に列名が記載しているCSVをJSON配列に変換\n\t * @param {Array<Array<string>>} csv_array \n\t * @returns {Array<Object<string, string>>}\n\t */\n\tstatic toJSONArrayFromCSVArray(csv_array) {\n\t\tconst title_line = csv_array[0];\n\t\tconst key_name = [];\n\t\tfor(let i = 0; i < title_line.length; i++) {\n\t\t\tkey_name.push(title_line[i]);\n\t\t}\n\t\tconst json_array = [];\n\t\tfor(let i = 1; i < csv_array.length; i++) {\n\t\t\tconst line = csv_array[i];\n\t\t\t/**\n\t\t\t * @type {Object<string, string>}\n\t\t\t * @private\n\t\t\t */\n\t\t\tconst json_data = {};\n\t\t\tfor(let j = 0; j < line.length; j++) {\n\t\t\t\tjson_data[key_name[j]] = line[j];\n\t\t\t}\n\t\t\tjson_array.push(json_data);\n\t\t}\n\t\treturn json_array;\n\t}\n\n\t/**\n\t * 共通の型のJSON配列をCSV配列へ変換\n\t * @param {Array<Object<string, string>>} json_array \n\t * @param {Array<string>} [title_array] \n\t * @returns {Array<Array<string>>}\n\t */\n\tstatic toCSVArrayFromJSONArray(json_array, title_array) {\n\t\tconst csv_array = [];\n\t\tlet title_list = null;\n\t\tif(title_array === undefined) {\n\t\t\ttitle_list = [];\n\t\t\tfor(const key in json_array[0]) {\n\t\t\t\ttitle_list.push(key);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttitle_list = title_array;\n\t\t}\n\t\tcsv_array.push(title_list);\n\t\tfor(let i = 0; i < json_array.length; i++) {\n\t\t\tconst line = json_array[i];\n\t\t\tconst data_list = [];\n\t\t\tfor(let j = 0; j < title_list.length; j++) {\n\t\t\t\tdata_list.push(line[title_list[j]]);\n\t\t\t}\n\t\t\tcsv_array.push(data_list);\n\t\t}\n\t\treturn csv_array;\n\t}\n\n}\n\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/senko/CSV.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "CSV",
    "memberof": "src/senko/CSV.js",
    "static": true,
    "longname": "src/senko/CSV.js~CSV",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/senko/CSV.js",
    "importStyle": "CSV",
    "description": "CSV形式のテキストなどを扱うクラス",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "parse",
    "memberof": "src/senko/CSV.js~CSV",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/CSV.js~CSV.parse",
    "access": "public",
    "description": "CSVテキストから配列を作成",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\",\"",
        "defaultRaw": ",",
        "name": "separator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "create",
    "memberof": "src/senko/CSV.js~CSV",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/CSV.js~CSV.create",
    "access": "public",
    "description": "配列からCSVテキストを作成",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "csv_array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\",\"",
        "defaultRaw": ",",
        "name": "separator",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\\r\\n\"",
        "defaultRaw": "\r\n",
        "name": "newline",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "toJSONArrayFromCSVArray",
    "memberof": "src/senko/CSV.js~CSV",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/CSV.js~CSV.toJSONArrayFromCSVArray",
    "access": "public",
    "description": "1行目に列名が記載しているCSVをJSON配列に変換",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object<string, string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "csv_array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object<string, string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "toCSVArrayFromJSONArray",
    "memberof": "src/senko/CSV.js~CSV",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/CSV.js~CSV.toCSVArrayFromJSONArray",
    "access": "public",
    "description": "共通の型のJSON配列をCSV配列へ変換",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object<string, string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "json_array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "title_array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/senko/Dialog.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport System from \"./System\";\nimport SFile from \"./SFile\";\n\n\n/**\n * ポップアップ用のオプション\n * @typedef {Object} PopupOption\n * @property {number} [secondstowait=0] タイムアウト時間(0で無効)\n * @property {string} [caption=\"\"] タイトルバー\n * @property {number} [type=0] Dialog.MB_YESNOCANCEL | Dialog.MB_DEFBUTTON3 など\n */\n\n/**\n * 「ファイルを開く」ダイアログ用のオプション\n * @typedef {Object} OpenFileOption\n * @property {string} [initial_directory] 初期ディレクトリ(\"C:\\\"など)\n * @property {string} [filter=\"All files(*.*)|*.*\"] ファイル形式（\"画像ファイル(*.png;*.bmp)|*.png;*.bmp\"など）\n * @property {string} [title] タイトル(「ファイルを選択してください」など)\n */\n\n/**\n * 「フォルダを開く」ダイアログ用のオプション\n * @typedef {Object} OpenDirectoryOption\n * @property {string} [initial_directory] 初期ディレクトリ(\"C:\\\"など)\n * @property {string} [title] タイトル(「フォルダを選択してください」など)\n */\n\n/**\n * 「名前を付けて保存する」ダイアログ用のオプション\n * @typedef {Object} SaveAsOption\n * @property {string} [initial_directory] 初期ディレクトリ(\"C:\\\"など)\n * @property {string} [default_ext] 拡張子を省略した場合の値(\".txt\"など)\n * @property {string} [file_name] ファイル名の初期値(\"新しいファイル.txt\"など)\n * @property {string} [filter=\"All files(*.*)|*.*\"] ファイル形式（\"画像ファイル(*.png;*.bmp)|*.png;*.bmp\"など）\n * @property {string} [title] タイトル(「保存するファイル名を設定してください」など)\n */\n\n/**\n * ダイアログを扱うクラス\n */\nexport default class Dialog {\n\t\n\t/**\n\t * ダイアログを表示する\n\t * @param {string} text \n\t * @param {PopupOption} [option]\n\t * @returns {number}\n\t */\n\tstatic popupMessage(text, option) {\n\t\tconst secondstowait = option && option.secondstowait ? option.secondstowait : 0;\n\t\tconst caption = option && option.caption ? option.caption : \"\";\n\t\tconst type = option && option.type ? option.type : 0;\n\t\treturn WScript.CreateObject(\"WScript.Shell\").Popup( text, secondstowait, caption, type );\n\t}\n\n\t/**\n\t * ファイルを開くダイアログを表示する\n\t * @param {OpenFileOption} [option]\n\t * @returns {SFile|null}\n\t */\n\tstatic popupOpenFile(option) {\n\t\t/*\n\t\t以下の行を1行で実行する\n\t\tAdd-Type -AssemblyName System.Windows.Forms;\n\t\t$dialog = New-Object System.Windows.Forms.OpenFileDialog;\n\t\t...\n\t\tif($dialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK){\n\t\t\t$dialog.FileName;\n\t\t}\n\t\t*/\n\t\tlet command = \"Add-Type -AssemblyName System.Windows.Forms;$dialog = New-Object System.Windows.Forms.OpenFileDialog;\";\n\t\tcommand += \"$dialog.Filter = \\\"\" + ((option && option.filter) ? option.filter.replace(/\"/g, \"\\\\\\\"\") : \"All files(*.*)|*.*\") + \"\\\";\";\n\t\tcommand += (option && option.initial_directory) ? (\"$dialog.InitialDirectory = \\\"\" + option.initial_directory.toString().replace(/\"/g, \"\\\\\\\"\") + \"\\\";\"): \"\";\n\t\tcommand += (option && option.title) ? (\"$dialog.Title = \\\"\" + option.title.replace(/\"/g, \"\\\\\\\"\") + \"\\\";\"): \"\";\n\t\tcommand += \"if($dialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK){$dialog.FileName;}\";\n\t\tconst select_text = System.PowerShell(command).trim();\n\t\tif(select_text !== \"\") {\n\t\t\treturn new SFile(select_text);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * フォルダを開くダイアログを表示する\n\t * @param {OpenDirectoryOption} [option]\n\t * @returns {SFile|null}\n\t */\n\tstatic popupOpenDirectory(option) {\n\t\tconst shell = new ActiveXObject(\"Shell.Application\");\n\t\tconst caption = option && option.title ? option.title : \"\";\n\t\tlet folder;\n\t\tif(option && option.initial_directory) {\n\t\t\tfolder = shell.BrowseForFolder(0, caption, 0, option.initial_directory);\n\t\t}\n\t\telse {\n\t\t\tfolder = shell.BrowseForFolder(0, caption, 0);\n\t\t}\n\t\tif(folder !== null) {\n\t\t\treturn new SFile(folder.Self.Path);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * 名前を付けて保存ダイアログを表示する\n\t * @param {SaveAsOption} [option]\n\t * @returns {SFile|null}\n\t */\n\tstatic popupSaveAs(option) {\n\t\t/*\n\t\t以下の行を1行で実行する\n\t\tAdd-Type -AssemblyName System.Windows.Forms;\n\t\t$dialog = New-Object System.Windows.Forms.SaveFileDialog;\n\t\t...\n\t\tif($dialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK){\n\t\t\t$dialog.FileName;\n\t\t}\n\t\t*/\n\t\tlet command = \"Add-Type -AssemblyName System.Windows.Forms;$dialog = New-Object System.Windows.Forms.SaveFileDialog;\";\n\t\tcommand += (option && option.default_ext) ? (\"$dialog.DefaultExt = \\\"\" + option.default_ext.replace(/\"/g, \"\\\\\\\"\") + \"\\\";\"): \"\";\n\t\tcommand += (option && option.file_name) ? (\"$dialog.FileName = \\\"\" + option.file_name.replace(/\"/g, \"\\\\\\\"\") + \"\\\";\"): \"\";\n\t\tcommand += (option && option.filter) ? (\"$dialog.Filter = \\\"\" + option.file_name.replace(/\"/g, \"\\\\\\\"\") + \"\\\";\"): \"\";\n\t\tcommand += (option && option.initial_directory) ? (\"$dialog.InitialDirectory = \\\"\" + option.initial_directory.toString().replace(/\"/g, \"\\\\\\\"\") + \"\\\";\"): \"\";\n\t\tcommand += (option && option.title) ? (\"$dialog.Title = \\\"\" + option.title.replace(/\"/g, \"\\\\\\\"\") + \"\\\";\"): \"\";\n\t\tcommand += \"$dialog.ShowHelp = true;\";\n\t\tcommand += \"$dialog.OverwritePrompt = true;\";\n\t\tcommand += \"if($dialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK){$dialog.FileName;}\";\n\t\tconst select_text = System.PowerShell(command).trim();\n\t\tif(select_text !== \"\") {\n\t\t\treturn new SFile(select_text);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n\n/**\n * 「OK」のボタン配置\n * @type {number}\n */\nDialog.MB_OK\t\t\t\t=  0;\n\n/**\n * 「OK」、「キャンセル」のボタン配置\n * @type {number}\n */\nDialog.MB_OKCANCEL\t\t\t=  1;\n\n/**\n * 「中止」、「再試行」、「無視」のボタン配置\n * @type {number}\n */\nDialog.MB_ABORTRETRYIGNORE\t=  2;\n\n/**\n * 「はい」、「いいえ」、「キャンセル」のボタン配置\n * @type {number}\n */\nDialog.MB_YESNOCANCEL\t\t=  3;\n\n/**\n * 「はい」、「いいえ」のボタン配置\n * @type {number}\n */\nDialog.MB_YESNO\t\t\t\t=  4;\n\n/**\n * 「再試行」、「キャンセル」のボタン配置\n * @type {number}\n */\nDialog.MB_RETRYCANCEL\t\t=  5;\n\n/**\n * 中止「Stop」のアイコンのダイアログ\n * @type {number}\n */\nDialog.MB_ICONSTOP\t\t\t= 16;\n\n/**\n * 質問「?」のアイコンのダイアログ\n * @type {number}\n */\nDialog.MB_ICONQUESTION\t\t= 32;\n\n/**\n * 警告「!」のアイコンのダイアログ\n * @type {number}\n */\nDialog.MB_ICONWARNING\t\t= 48;\n\n/**\n * 情報「i」のアイコンのダイアログ\n * @type {number}\n */\nDialog.MB_ICONINFORMATION\t= 64;\n\n/**\n * 「ボタン1」を選択\n * @type {number}\n */\nDialog.MB_DEFBUTTON1\t= 0x0000;\n\n/**\n * 「ボタン2」を選択\n * @type {number}\n */\nDialog.MB_DEFBUTTON2\t= 0x0100;\n\n/**\n * 「ボタン3」を選択\n * @type {number}\n */\nDialog.MB_DEFBUTTON3\t= 0x0200;\n\n/**\n * 「ボタン4」を選択\n * @type {number}\n */\nDialog.MB_DEFBUTTON4\t= 0x0300;\n\n/**\n * タイムアウトが発生\n * @type {number}\n */\nDialog.IDTIMEOUT\t\t= -1;\n\n/**\n * 「OK」を選択\n * @type {number}\n */\nDialog.IDOK\t\t\t\t= 1;\n\n/**\n * 「キャンセル」を選択\n * @type {number}\n */\nDialog.IDCANCEL\t\t\t= 2;\n\n/**\n * 「中止」を選択\n * @type {number}\n */\nDialog.IDABORT\t\t\t= 3;\n\n/**\n * 「再試行」を選択\n * @type {number}\n */\nDialog.IDRETRY\t\t\t= 4;\n\n/**\n * 「無視」を選択\n * @type {number}\n */\nDialog.IDIGNORE\t\t\t= 5;\n\n/**\n * 「はい」を選択\n * @type {number}\n */\nDialog.IDYES\t\t\t= 6;\n\n/**\n * 「いいえ」を選択\n * @type {number}\n */\nDialog.IDNO\t\t\t\t= 7;\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/senko/Dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "typedef",
    "name": "PopupOption",
    "memberof": "src/senko/Dialog.js",
    "static": true,
    "longname": "src/senko/Dialog.js~PopupOption",
    "access": "public",
    "description": "ポップアップ用のオプション",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "secondstowait",
        "description": "タイムアウト時間(0で無効)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "caption",
        "description": "タイトルバー"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "type",
        "description": "Dialog.MB_YESNOCANCEL | Dialog.MB_DEFBUTTON3 など"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PopupOption"
    }
  },
  {
    "__docId__": 119,
    "kind": "typedef",
    "name": "OpenFileOption",
    "memberof": "src/senko/Dialog.js",
    "static": true,
    "longname": "src/senko/Dialog.js~OpenFileOption",
    "access": "public",
    "description": "「ファイルを開く」ダイアログ用のオプション",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "initial_directory",
        "description": "初期ディレクトリ(\"C:\\\"など)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"All files(*.*)|*.*\"",
        "defaultRaw": "All files(*.*)|*.*",
        "name": "filter",
        "description": "ファイル形式（\"画像ファイル(*.png;*.bmp)|*.png;*.bmp\"など）"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "title",
        "description": "タイトル(「ファイルを選択してください」など)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "OpenFileOption"
    }
  },
  {
    "__docId__": 120,
    "kind": "typedef",
    "name": "OpenDirectoryOption",
    "memberof": "src/senko/Dialog.js",
    "static": true,
    "longname": "src/senko/Dialog.js~OpenDirectoryOption",
    "access": "public",
    "description": "「フォルダを開く」ダイアログ用のオプション",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "initial_directory",
        "description": "初期ディレクトリ(\"C:\\\"など)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "title",
        "description": "タイトル(「フォルダを選択してください」など)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "OpenDirectoryOption"
    }
  },
  {
    "__docId__": 121,
    "kind": "typedef",
    "name": "SaveAsOption",
    "memberof": "src/senko/Dialog.js",
    "static": true,
    "longname": "src/senko/Dialog.js~SaveAsOption",
    "access": "public",
    "description": "「名前を付けて保存する」ダイアログ用のオプション",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "initial_directory",
        "description": "初期ディレクトリ(\"C:\\\"など)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "default_ext",
        "description": "拡張子を省略した場合の値(\".txt\"など)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "file_name",
        "description": "ファイル名の初期値(\"新しいファイル.txt\"など)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"All files(*.*)|*.*\"",
        "defaultRaw": "All files(*.*)|*.*",
        "name": "filter",
        "description": "ファイル形式（\"画像ファイル(*.png;*.bmp)|*.png;*.bmp\"など）"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "title",
        "description": "タイトル(「保存するファイル名を設定してください」など)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SaveAsOption"
    }
  },
  {
    "__docId__": 122,
    "kind": "class",
    "name": "Dialog",
    "memberof": "src/senko/Dialog.js",
    "static": true,
    "longname": "src/senko/Dialog.js~Dialog",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/senko/Dialog.js",
    "importStyle": "Dialog",
    "description": "ダイアログを扱うクラス",
    "lineNumber": 51,
    "interface": false
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "popupMessage",
    "memberof": "src/senko/Dialog.js~Dialog",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Dialog.js~Dialog.popupMessage",
    "access": "public",
    "description": "ダイアログを表示する",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PopupOption"
        ],
        "spread": false,
        "optional": true,
        "name": "option",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "popupOpenFile",
    "memberof": "src/senko/Dialog.js~Dialog",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Dialog.js~Dialog.popupOpenFile",
    "access": "public",
    "description": "ファイルを開くダイアログを表示する",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "OpenFileOption"
        ],
        "spread": false,
        "optional": true,
        "name": "option",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile",
        "null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "popupOpenDirectory",
    "memberof": "src/senko/Dialog.js~Dialog",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Dialog.js~Dialog.popupOpenDirectory",
    "access": "public",
    "description": "フォルダを開くダイアログを表示する",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "OpenDirectoryOption"
        ],
        "spread": false,
        "optional": true,
        "name": "option",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile",
        "null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "popupSaveAs",
    "memberof": "src/senko/Dialog.js~Dialog",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Dialog.js~Dialog.popupSaveAs",
    "access": "public",
    "description": "名前を付けて保存ダイアログを表示する",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "SaveAsOption"
        ],
        "spread": false,
        "optional": true,
        "name": "option",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile",
        "null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/senko/ExtendsArray.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * ES3相当のJScirptのArray拡張用クラス\n * - Array.prototypeに拡張します\n */\nexport default class ExtendsArray {\n\n\t/**\n\t * @param {any[]} array\n\t * @param {any} object\n\t * @returns {boolean}\n\t */\n\tstatic includes(array, object) {\n\t\treturn ExtendsArray.indexOf(array, object) !== -1;\n\t}\n\n\t/**\n\t * @param {any[]} array\n\t * @param {any} object\n\t * @param {number} [fromIndex=0]\n\t * @returns {number}\n\t */\n\tstatic indexOf(array, object, fromIndex) {\n\t\tlet i = fromIndex !== undefined ? fromIndex : 0;\n\t\tfor(; i < array.length; i++) {\n\t\t\tif(array[i] === object) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * @param {any[]} array\n\t * @param {any} object\n\t * @param {number} [fromIndex]\n\t * @returns {number}\n\t */\n\tstatic lastIndexOf(array, object, fromIndex) {\n\t\tlet i = fromIndex !== undefined ? fromIndex : array.length - 1;\n\t\tfor(; i >= 0; i--) {\n\t\t\tif(array[i] === object) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * 安定ソート\n\t * @param {any[]} array\n\t * @param {function(any, any): number} [compareFunction]\n\t * @returns {any[]}\n\t */\n\tstatic sort(array, compareFunction) {\n\t\tlet compare;\n\t\tif(compareFunction === undefined) {\n\t\t\t/**\n\t\t\t * 昇順ソート用の関数\n\t\t\t * @param {any} a\n\t\t\t * @param {any} b\n\t\t\t * @returns {number}\n\t\t\t * @private\n\t\t\t */\n\t\t\tcompare = function(a, b) {\n\t\t\t\tif(a === b) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif(typeof a === typeof b) {\n\t\t\t\t\treturn (a < b ? -1 : 1);\n\t\t\t\t}\n\t\t\t\treturn ((typeof a < typeof b) ? -1 : 1);\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tcompare = compareFunction;\n\t\t}\n\t\t/**\n\t\t * @type {any[]}\n\t\t * @private\n\t\t */\n\t\tconst temp = [];\n\t\t/**\n\t\t * ソート関数（安定マージソート）\n\t\t * @param {any[]} element \n\t\t * @param {number} first \n\t\t * @param {number} last \n\t\t * @param {function(any, any): number} cmp_function\n\t\t * @private\n\t\t */\n\t\tconst sort = function(element, first, last, cmp_function) { \n\t\t\tif(first < last) {\n\t\t\t\tconst middle = Math.floor((first + last) / 2);\n\t\t\t\tsort(element, first, middle, cmp_function);\n\t\t\t\tsort(element, middle + 1, last, cmp_function);\n\t\t\t\tlet p = 0, i, j, k;\n\t\t\t\tfor(i = first; i <= middle; i++) {\n\t\t\t\t\ttemp[p++] = element[i];\n\t\t\t\t}\n\t\t\t\ti = middle + 1;\n\t\t\t\tj = 0;\n\t\t\t\tk = first;\n\t\t\t\twhile((i <= last) && (j < p)) {\n\t\t\t\t\tif(cmp_function(element[i], temp[j]) >= 0) {\n\t\t\t\t\t\telement[k++] = temp[j++];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\telement[k++] = element[i++];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile(j < p) {\n\t\t\t\t\telement[k++] = temp[j++];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\tsort(array, 0, array.length - 1, compare);\n\t\treturn array;\n\t}\n\n\t/**\n\t * @param {any[]} array\n\t * @returns {string}\n\t */\n\tstatic toString(array) {\n\t\treturn array.join(\", \");\n\t}\n\n\t/**\n\t * ディープコピー\n\t * @param {any[]} array\n\t * @returns {any[]}\n\t */\n\tstatic clone(array) {\n\t\tconst out = new Array(array.length);\n\t\tfor(let i = 0; i < array.length; i++) {\n\t\t\tout[i] = array[i];\n\t\t}\n\t\treturn out;\n\t}\n\t\n\n\t/**\n\t * 指定したデータを挿入\n\t * @param {any[]} array\n\t * @param {any|number} index_or_object\n\t * @param {any} [object]\n\t */\n\tstatic add(array, index_or_object, object) {\n\t\tif(object === undefined) {\n\t\t\tarray.push(index_or_object);\n\t\t}\n\t\telse {\n\t\t\tarray.splice(index_or_object, 0, object);\n\t\t}\n\t}\n\t\n\t/**\n\t * 指定した配列を挿入\n\t * @param {any[]} array\n\t * @param {any[]|number} index_or_arraylist\n\t * @param {any[]} [arraylist]\n\t */\n\tstatic addAll(array, index_or_arraylist, arraylist) {\n\t\tif((arraylist === undefined) && ((typeof index_or_arraylist !== \"number\"))) {\n\t\t\tconst list = index_or_arraylist;\n\t\t\tlet j = array.length;\n\t\t\tfor(let i = 0; i < list.length; i++) {\n\t\t\t\tarray[j++] = list[i];\n\t\t\t}\n\t\t}\n\t\telse if(typeof index_or_arraylist === \"number\") {\n\t\t\tlet index = index_or_arraylist;\n\t\t\tlet list = arraylist;\n\t\t\tif(list === array) {\n\t\t\t\tlist = array.slice(0);\n\t\t\t}\n\t\t\tlet size = array.length - index;\n\t\t\tlet target_i = array.length + list.length - 1;\n\t\t\tlet source_i = array.length - 1;\n\t\t\tfor(let i = 0; i < size ; i++ ) {\n\t\t\t\tarray[target_i--] = array[source_i--];\n\t\t\t}\n\t\t\tsize = list.length;\n\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\tarray[index++] = list[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 指定した位置のデータを削除\n\t * @param {any[]} array\n\t * @param {number} index \n\t */\n\tstatic remove(array, index) {\n\t\tarray.splice(index, 1);\n\t}\n\t\n\t/**\n\t * 指定した範囲を削除\n\t * @param {any[]} array\n\t * @param {number} fromIndex \n\t * @param {number} toIndex \n\t */\n\tstatic removeRange(array, fromIndex, toIndex) {\n\t\tarray.splice(fromIndex, toIndex - fromIndex);\n\t}\n\t\n\t/**\n\t * 空かどうか\n\t * @param {any[]} array\n\t * @returns {boolean}\n\t */\n\tstatic isEmpty(array) {\n\t\treturn array.length === 0;\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/senko/ExtendsArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "class",
    "name": "ExtendsArray",
    "memberof": "src/senko/ExtendsArray.js",
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/senko/ExtendsArray.js",
    "importStyle": "ExtendsArray",
    "description": "ES3相当のJScirptのArray拡張用クラス\n- Array.prototypeに拡張します",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "includes",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.includes",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "indexOf",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.indexOf",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "fromIndex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "lastIndexOf",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.lastIndexOf",
    "access": "public",
    "description": "",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "fromIndex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "sort",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.sort",
    "access": "public",
    "description": "安定ソート",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(any, any): number"
        ],
        "spread": false,
        "optional": true,
        "name": "compareFunction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "toString",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.toString",
    "access": "public",
    "description": "",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "clone",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.clone",
    "access": "public",
    "description": "ディープコピー",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "add",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.add",
    "access": "public",
    "description": "指定したデータを挿入",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index_or_object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": true,
        "name": "object",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "addAll",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.addAll",
    "access": "public",
    "description": "指定した配列を挿入",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any[]",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index_or_arraylist",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": true,
        "name": "arraylist",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "remove",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.remove",
    "access": "public",
    "description": "指定した位置のデータを削除",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "removeRange",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.removeRange",
    "access": "public",
    "description": "指定した範囲を削除",
    "lineNumber": 215,
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fromIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "toIndex",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/senko/ExtendsArray.js~ExtendsArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsArray.js~ExtendsArray.isEmpty",
    "access": "public",
    "description": "空かどうか",
    "lineNumber": 224,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/senko/ExtendsObject.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * ES3相当のJScirptのObject拡張用クラス\n * - Object.prototypeに拡張します\n */\nexport default class ExtendsObject {\n\n\n\t/**\n\t * 指定したキーが含まれるか\n\t * @param {Object} obj\n\t * @param {any} key \n\t * @returns {boolean}\n\t */\n\tstatic containsKey(obj, key) {\n\t\treturn typeof obj[key] !== \"undefined\";\n\t}\n\t\n\t/**\n\t * 指定した値が含まれるか\n\t * @param {Object} obj\n\t * @param {any} value \n\t * @returns {boolean}\n\t */\n\tstatic containsValue(obj, value) {\n\t\tfor(const key in obj) {\n\t\t\tif(obj[key] === value) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * 名前の配列\n\t * @param {Object} obj\n\t * @returns {string[]}\n\t */\n\tstatic keys(obj) {\n\t\tconst data = [];\n\t\tfor(const key in obj) {\n\t\t\tdata.push(key);\n\t\t}\n\t\treturn data;\n\t}\n\t\n\t/**\n\t * 空かどうか\n\t * @param {Object} obj\n\t * @returns {boolean}\n\t */\n\tstatic isEmpty(obj) {\n\t\treturn ExtendsObject.keys(obj).length === 0;\n\t}\n\t\n\t/**\n\t * 文字列化\n\t * @param {Object} obj\n\t * @returns {string}\n\t */\n\tstatic toString(obj) {\n\t\tconst length = ExtendsObject.keys(obj).length;\n\t\tlet output = \"\";\n\t\tlet i = 0;\n\t\tfor(const key in obj) {\n\t\t\toutput += key + \"=>\" + obj[key];\n\t\t\ti++;\n\t\t\tif(i !== length) {\n\t\t\t\toutput += \"\\n\";\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * 指定したキー、その値を登録\n\t * @param {Object} obj\n\t * @param {string} key \n\t * @param {any} value \n\t * @returns {null|any}\n\t */\n\tstatic put(obj, key, value) {\n\t\tif(!ExtendsObject.containsKey(obj, key)) {\n\t\t\tobj[key] = value;\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\tconst output = obj[key];\n\t\t\tobj[key] = value;\n\t\t\treturn output;\n\t\t}\n\t}\n\n\t/**\n\t * 指定したキー、その値を全て登録\n\t * @param {Object} obj\n\t * @param {Object<string, any>} hashmap \n\t */\n\tstatic putAll(obj, hashmap) {\n\t\tfor(const key in hashmap) {\n\t\t\tif(typeof obj[key] === \"undefined\") {\n\t\t\t\tobj[key] = hashmap[key];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 指定したキーの値を削除\n\t * @param {Object} obj\n\t * @param {string} key \n\t * @returns {null|any}\n\t */\n\tstatic remove(obj, key) {\n\t\tif(!ExtendsObject.containsKey(obj, key)) {\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\tconst output = obj[key];\n\t\t\tdelete obj[key];\n\t\t\treturn output;\n\t\t}\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/senko/ExtendsObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "class",
    "name": "ExtendsObject",
    "memberof": "src/senko/ExtendsObject.js",
    "static": true,
    "longname": "src/senko/ExtendsObject.js~ExtendsObject",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/senko/ExtendsObject.js",
    "importStyle": "ExtendsObject",
    "description": "ES3相当のJScirptのObject拡張用クラス\n- Object.prototypeに拡張します",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "containsKey",
    "memberof": "src/senko/ExtendsObject.js~ExtendsObject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsObject.js~ExtendsObject.containsKey",
    "access": "public",
    "description": "指定したキーが含まれるか",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "containsValue",
    "memberof": "src/senko/ExtendsObject.js~ExtendsObject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsObject.js~ExtendsObject.containsValue",
    "access": "public",
    "description": "指定した値が含まれるか",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "keys",
    "memberof": "src/senko/ExtendsObject.js~ExtendsObject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsObject.js~ExtendsObject.keys",
    "access": "public",
    "description": "名前の配列",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/senko/ExtendsObject.js~ExtendsObject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsObject.js~ExtendsObject.isEmpty",
    "access": "public",
    "description": "空かどうか",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "toString",
    "memberof": "src/senko/ExtendsObject.js~ExtendsObject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsObject.js~ExtendsObject.toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "put",
    "memberof": "src/senko/ExtendsObject.js~ExtendsObject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsObject.js~ExtendsObject.put",
    "access": "public",
    "description": "指定したキー、その値を登録",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "putAll",
    "memberof": "src/senko/ExtendsObject.js~ExtendsObject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsObject.js~ExtendsObject.putAll",
    "access": "public",
    "description": "指定したキー、その値を全て登録",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "hashmap",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "remove",
    "memberof": "src/senko/ExtendsObject.js~ExtendsObject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsObject.js~ExtendsObject.remove",
    "access": "public",
    "description": "指定したキーの値を削除",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/senko/ExtendsString.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * ES3相当のJScirptのString拡張用クラス\n * - String.prototypeに拡張します\n */\nexport default class ExtendsString {\n\n\t/**\n\t * @param {string} text\n\t * @param {string} target\n\t * @param {string} replacement\n\t * @returns {string}\n\t */\n\tstatic replaceAll(text, target, replacement) {\n\t\t//正規表現のgを使って全置換する\n\t\t//従って正規表現にならないようにエスケープしておく\n\t\tconst regex = new RegExp(target.replace(/([\\\\/*+.?{}()[\\]^$\\-|])/g, \"\\\\$1\" ), \"g\");\n\t\tconst ireplacement = replacement.replace(/\\$/g, \"$$$$\");\n\t\treturn text.replace(regex, ireplacement);\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @returns {string}\n\t */\n\tstatic trim(text) {\n\t\treturn text.replace(/^\\s+|\\s+$/g, \"\");\n\t}\n\n\t/**\n\t * 指定した関数を全ての文字に一律に処理を行う\n\t * @param {string} text\n\t * @param {function(number, string, number): boolean} func - 文字番号, 文字列, 文字コード。戻り値がfalseで処理を終了。\n\t * @returns {boolean} result\n\t */\n\tstatic each(text, func) {\n\t\tlet out = true;\n\t\tconst len = this.length;\n\t\tfor(let i = 0; i < len; i = ExtendsString.offsetByCodePoints(text, i, 1)) {\n\t\t\tconst codepoint = ExtendsString.codePointAt(text, i);\n\t\t\tconst str = ExtendsString.fromCodePoint(codepoint);\n\t\t\tif(func.call(func, i, str, codepoint) === false) {\n\t\t\t\tout = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 上位のサロゲートペアの判定\n\t * @param {String} text - 対象テキスト\n\t * @param {number} index - インデックス\n\t * @returns {Boolean} 確認結果\n\t */\n\tstatic isHighSurrogateAt(text, index) {\n\t\tconst ch = text.charCodeAt(index);\n\t\treturn (0xD800 <= ch) && (ch <= 0xDBFF);\n\t}\n\n\t/**\n\t * 下位のサロゲートペアの判定\n\t * @param {String} text - 対象テキスト\n\t * @param {number} index - インデックス\n\t * @returns {Boolean} 確認結果\n\t */\n\tstatic isLowSurrogateAt(text, index) {\n\t\tconst ch = text.charCodeAt(index);\n\t\treturn (0xDC00 <= ch) && (ch <= 0xDFFF);\n\t}\n\t\n\t/**\n\t * サロゲートペアの判定\n\t * @param {String} text - 対象テキスト\n\t * @param {number} index - インデックス\n\t * @returns {Boolean} 確認結果\n\t */\n\tstatic isSurrogatePairAt(text, index) {\n\t\tconst ch = text.charCodeAt(index);\n\t\treturn (0xD800 <= ch) && (ch <= 0xDFFF);\n\t}\n\t\n\t/**\n\t * サロゲートペア対応のコードポイント取得\n\t * @param {String} text - 対象テキスト\n\t * @param {number} [index = 0] - インデックス\n\t * @returns {number} コードポイント\n\t */\n\tstatic codePointAt(text, index) {\n\t\tconst index_ = (index !== undefined) ? index : 0;\n\t\tif(ExtendsString.isHighSurrogateAt(text, index_)) {\n\t\t\tconst high = text.charCodeAt(index_);\n\t\t\tconst low  = text.charCodeAt(index_ + 1);\n\t\t\treturn (((high - 0xD800) << 10) | (low - 0xDC00)) + 0x10000;\n\t\t}\n\t\telse {\n\t\t\treturn text.charCodeAt(index_);\n\t\t}\n\t}\n\n\t/**\n\t * インデックスの前にあるコードポイント\n\t * @param {String} text - 対象テキスト\n\t * @param {number} index - インデックス\n\t * @returns {number} コードポイント\n\t */\n\tstatic codePointBefore(text, index) {\n\t\tif(!ExtendsString.isLowSurrogateAt(text, index - 1)) {\n\t\t\treturn text.charCodeAt(index - 1);\n\t\t}\n\t\telse {\n\t\t\treturn text.codePointAt(index - 2);\n\t\t}\n\t}\n\n\t/**\n\t * コードポイント換算で文字列数をカウント\n\t * @param {string} text - 対象テキスト\n\t * @param {number} [beginIndex=0] - 最初のインデックス（省略可）\n\t * @param {number} [endIndex] - 最後のインデックス（ここは含めない）（省略可）\n\t * @returns {number} 文字数\n\t */\n\tstatic codePointCount(text, beginIndex, endIndex) {\n\t\tlet ibeginIndex = beginIndex !== undefined ? beginIndex : 0;\n\t\tlet iendIndex = endIndex !== undefined ? endIndex : text.length;\n\t\tlet count = 0;\n\t\tfor(;beginIndex < iendIndex;ibeginIndex++) {\n\t\t\tcount++;\n\t\t\tif(ExtendsString.isSurrogatePairAt(text, beginIndex)) {\n\t\t\t\tiendIndex++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * コードポイント換算で文字列配列の位置を計算\n\t * @param {string} text - 対象テキスト\n\t * @param {number} index - オフセット\n\t * @param {number} codePointOffset - ずらすコードポイント数\n\t * @returns {number} ずらしたインデックス\n\t */\n\tstatic offsetByCodePoints(text, index, codePointOffset) {\n\t\tlet count = 0;\n\t\tlet icodePointOffset = codePointOffset;\n\t\tlet i = index;\n\t\tif(icodePointOffset === 0) {\n\t\t\treturn i;\n\t\t}\n\t\tif(icodePointOffset > 0) {\n\t\t\tfor(;i < text.length;i++) {\n\t\t\t\tcount++;\n\t\t\t\tif(ExtendsString.isHighSurrogateAt(text, i)) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tif(count === icodePointOffset) {\n\t\t\t\t\treturn i + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\ticodePointOffset = -icodePointOffset;\n\t\t\tfor(;i >= 0;i--) {\n\t\t\t\tcount++;\n\t\t\t\tif(ExtendsString.isLowSurrogateAt(text, i - 1)) {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t\tif(count === icodePointOffset) {\n\t\t\t\t\treturn i - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow \"error offsetByCodePoints\";\n\t}\n\n\t/**\n\t * コードポイントの数値データをUTF16の配列に変換\n\t * @param {...(number|Array<number>)} codepoint - 変換したいUTF-32の配列、又はコードポイントを並べた可変引数\n\t * @returns {Array<number>} 変換後のテキスト\n\t * @private\n\t */\n\tstatic toUTF16ArrayfromCodePoint() {\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t * @private\n\t\t */\n\t\tconst utf16_array = [];\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t * @private\n\t\t */\n\t\tlet codepoint_array = [];\n\t\tif(arguments[0].length) {\n\t\t\tcodepoint_array = arguments[0];\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0;i < arguments.length;i++) {\n\t\t\t\tcodepoint_array[i] = arguments[i];\n\t\t\t}\n\t\t}\n\t\tfor(let i = 0;i < codepoint_array.length;i++) {\n\t\t\tconst codepoint = codepoint_array[i];\n\t\t\tif(0x10000 <= codepoint) {\n\t\t\t\tconst high = (( codepoint - 0x10000 ) >> 10) + 0xD800;\n\t\t\t\tconst low  = (codepoint & 0x3FF) + 0xDC00;\n\t\t\t\tutf16_array.push(high);\n\t\t\t\tutf16_array.push(low);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tutf16_array.push(codepoint);\n\t\t\t}\n\t\t}\n\t\treturn utf16_array;\n\t}\n\n\t/**\n\t * コードポイントの数値データを文字列に変換\n\t * @param {...(number|Array<number>)} codepoint - 変換したいコードポイントの数値配列、又は数値を並べた可変引数\n\t * @returns {string} 変換後のテキスト\n\t */\n\tstatic fromCodePoint(codepoint) {\n\t\tlet utf16_array = null;\n\t\tif(codepoint instanceof Array) {\n\t\t\tutf16_array = ExtendsString.toUTF16ArrayfromCodePoint(codepoint);\n\t\t}\n\t\telse {\n\t\t\tconst codepoint_array = [];\n\t\t\tfor(let i = 0;i < arguments.length;i++) {\n\t\t\t\tcodepoint_array[i] = arguments[i];\n\t\t\t}\n\t\t\tutf16_array = ExtendsString.toUTF16ArrayfromCodePoint(codepoint_array);\n\t\t}\n\t\tconst text = [];\n\t\tfor(let i = 0;i < utf16_array.length;i++) {\n\t\t\ttext[text.length] = String.fromCharCode(utf16_array[i]);\n\t\t}\n\t\treturn text.join(\"\");\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {string} prefix\n\t * @returns {boolean}\n\t */\n\tstatic startsWith(text, prefix) {\n\t\treturn text.indexOf(prefix) === 0;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {string} suffix\n\t * @returns {boolean}\n\t */\n\tstatic endsWith(text, suffix) {\n\t\tif(text.length < suffix.length) {\n\t\t\treturn(false);\n\t\t}\n\t\treturn text.indexOf(suffix) === (text.length - suffix.length);\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/senko/ExtendsString.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "ExtendsString",
    "memberof": "src/senko/ExtendsString.js",
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/senko/ExtendsString.js",
    "importStyle": "ExtendsString",
    "description": "ES3相当のJScirptのString拡張用クラス\n- String.prototypeに拡張します",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "replaceAll",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.replaceAll",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "replacement",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "trim",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.trim",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "each",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.each",
    "access": "public",
    "description": "指定した関数を全ての文字に一律に処理を行う",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(number, string, number): boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "文字番号, 文字列, 文字コード。戻り値がfalseで処理を終了。"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "isHighSurrogateAt",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.isHighSurrogateAt",
    "access": "public",
    "description": "上位のサロゲートペアの判定",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} 確認結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "確認結果"
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "isLowSurrogateAt",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.isLowSurrogateAt",
    "access": "public",
    "description": "下位のサロゲートペアの判定",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} 確認結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "確認結果"
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "isSurrogatePairAt",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.isSurrogatePairAt",
    "access": "public",
    "description": "サロゲートペアの判定",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} 確認結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "確認結果"
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "codePointAt",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.codePointAt",
    "access": "public",
    "description": "サロゲートペア対応のコードポイント取得",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} コードポイント"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 0",
        "defaultRaw": 0,
        "name": "index",
        "description": "インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "コードポイント"
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "codePointBefore",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.codePointBefore",
    "access": "public",
    "description": "インデックスの前にあるコードポイント",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} コードポイント"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "コードポイント"
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "codePointCount",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.codePointCount",
    "access": "public",
    "description": "コードポイント換算で文字列数をカウント",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 文字数"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "beginIndex",
        "description": "最初のインデックス（省略可）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "endIndex",
        "description": "最後のインデックス（ここは含めない）（省略可）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文字数"
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "offsetByCodePoints",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.offsetByCodePoints",
    "access": "public",
    "description": "コードポイント換算で文字列配列の位置を計算",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} ずらしたインデックス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "対象テキスト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "オフセット"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "codePointOffset",
        "description": "ずらすコードポイント数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ずらしたインデックス"
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "toUTF16ArrayfromCodePoint",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.toUTF16ArrayfromCodePoint",
    "access": "private",
    "description": "コードポイントの数値データをUTF16の配列に変換",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...(number|Array<number>)"
        ],
        "spread": true,
        "optional": false,
        "name": "codepoint",
        "description": "変換したいUTF-32の配列、又はコードポイントを並べた可変引数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "fromCodePoint",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.fromCodePoint",
    "access": "public",
    "description": "コードポイントの数値データを文字列に変換",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 変換後のテキスト"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...(number|Array<number>)"
        ],
        "spread": true,
        "optional": false,
        "name": "codepoint",
        "description": "変換したいコードポイントの数値配列、又は数値を並べた可変引数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "変換後のテキスト"
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "startsWith",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.startsWith",
    "access": "public",
    "description": "",
    "lineNumber": 255,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "endsWith",
    "memberof": "src/senko/ExtendsString.js~ExtendsString",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/ExtendsString.js~ExtendsString.endsWith",
    "access": "public",
    "description": "",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "suffix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/senko/Format.js",
    "content": "import System from \"./System\";\n\n/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * 書式に合わせて文字列を組み立てる関数を提供するクラス\n */\nexport default class Format {\n\n\t/**\n\t * printf に似た書式に合わせて文字列を組み立てる\n\t * - ロケール、日付時刻等はサポートしていません。\n\t * - 変換指定子のpとnはサポートしていません。\n\t * @param {String} text \n\t * @param {...any} parm パラメータは可変引数\n\t * @returns {String}\n\t */\n\tstatic textf() {\n\t\tlet parm_number = 1;\n\t\tconst parm = arguments;\n\t\t/**\n\t\t * @param {number} x\n\t\t * @returns {number}\n\t\t * @private\n\t\t */\n\t\tconst toUnsign  = function(x) {\n\t\t\tif(x >= 0) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst ix = -x;\n\t\t\t\t//16ビットごとに分けてビット反転\n\t\t\t\tlet high = ((~ix) >> 16) & 0xFFFF;\n\t\t\t\thigh *= 0x00010000;\n\t\t\t\tconst low  =  (~ix) & 0xFFFF;\n\t\t\t\treturn high + low + 1;\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * @param {string} istr\n\t\t * @returns {string}\n\t\t * @private\n\t\t */\n\t\tconst func = function(istr) {\n\t\t\t// 1文字目の%を除去\n\t\t\tlet str = istr.substring(1, istr.length);\n\t\t\tlet buff;\n\t\t\t// [6] 変換指定子(最後の1文字を取得)\n\t\t\tbuff = str.match(/.$/);\n\t\t\tconst type = buff[0];\n\t\t\tif(type === \"%\") {\n\t\t\t\treturn(\"%\");\n\t\t\t}\n\t\t\t// ここからパラメータの解析開始\n\t\t\t// [1] 引数順\n\t\t\tbuff = str.match(/^[0-9]+\\$/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\t// 数字だけ切り出す\n\t\t\t\tbuff = buff.substring(0, buff.length - 1);\n\t\t\t\t// 整数へ\n\t\t\t\tparm_number = parseInt(buff , 10);\n\t\t\t}\n\t\t\t// 引数を取得\n\t\t\tlet parameter = parm[parm_number];\n\t\t\tif(typeof parameter !== \"string\" && typeof parameter !== \"number\") {\n\t\t\t\tparameter = parameter.toString();\n\t\t\t}\n\t\t\tparm_number = parm_number + 1;\n\t\t\t// [2] フラグ\n\t\t\tbuff = str.match(/^[-+ #0]+/);\n\t\t\tlet isFlagSharp = false;\n\t\t\tlet isFlagTextAlignLeft = false;\n\t\t\tconst isFlagFill = false;\n\t\t\tlet sFillCharacter = \" \";\n\t\t\tlet isFlagFillZero = false;\n\t\t\tlet isFlagDrawSign = false;\n\t\t\tlet sSignCharacter = \"\";\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tif(buff.indexOf(\"#\") !== -1) {\n\t\t\t\t\tisFlagSharp = true;\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\t\tisFlagTextAlignLeft = true;\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\" \") !== -1) {\n\t\t\t\t\tisFlagDrawSign = true;\n\t\t\t\t\tsSignCharacter = \" \";\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"+\") !== -1) {\n\t\t\t\t\tisFlagDrawSign = true;\n\t\t\t\t\tsSignCharacter = \"+\";\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"0\") !== -1) {\n\t\t\t\t\tisFlagFillZero = true;\n\t\t\t\t\tsFillCharacter = \"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t// [3] 最小フィールド幅\n\t\t\tlet width = 0;\n\t\t\tbuff = str.match(/^([0-9]+|\\*)/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tif(buff.indexOf(\"*\") !== -1) { // 引数で最小フィールド幅を指定\n\t\t\t\t\twidth = parameter;\n\t\t\t\t\tparameter = parm[parm_number];\n\t\t\t\t\tparm_number = parm_number + 1;\n\t\t\t\t}\n\t\t\t\telse { // 数字で指定\n\t\t\t\t\twidth = parseInt(buff , 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// [4] 精度の指定\n\t\t\tlet isPrecision = false;\n\t\t\tlet precision = 0;\n\t\t\tbuff = str.match(/^(\\.((-?[0-9]+)|\\*)|\\.)/); //.-3, .* , .\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tisPrecision = true;\n\t\t\t\tif(buff.indexOf(\"*\") !== -1) { // 引数で精度を指定\n\t\t\t\t\tprecision = parameter;\n\t\t\t\t\tparameter = parm[parm_number];\n\t\t\t\t\tparm_number = parm_number + 1;\n\t\t\t\t}\n\t\t\t\telse if(buff.length === 1) { // 小数点だけの指定\n\t\t\t\t\tprecision = 0;\n\t\t\t\t}\n\t\t\t\telse { // 数字で指定\n\t\t\t\t\tbuff = buff.substring(1, buff.length);\n\t\t\t\t\tprecision = parseInt(buff , 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 長さ修飾子(非サポート)\n\t\t\tbuff = str.match(/^hh|h|ll|l|L|z|j|t/);\n\t\t\tif(buff !== null) {\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t}\n\t\t\t// 文字列を作成する\n\t\t\tlet output = \"\";\n\t\t\tlet isInteger = false;\n\t\t\tswitch(type.toLowerCase()) {\n\t\t\t\t// 数字関連\n\t\t\t\tcase \"d\":\n\t\t\t\tcase \"i\":\n\t\t\t\tcase \"u\":\n\t\t\t\tcase \"b\":\n\t\t\t\tcase \"o\":\n\t\t\t\tcase \"x\":\n\t\t\t\t\tisInteger = true;\n\t\t\t\t\t// falls through\n\t\t\t\tcase \"e\":\n\t\t\t\tcase \"f\":\n\t\t\t\tcase \"g\":\n\t\t\t\t{\n\t\t\t\t\tlet sharpdata = \"\";\n\t\t\t\t\tlet textlength = 0; // 現在の文字を構成するために必要な長さ\n\t\t\t\t\tlet spacesize;  // 追加する横幅\n\t\t\t\t\t// 整数\n\t\t\t\t\tif(isInteger) {\n\t\t\t\t\t\t// 数字に変換\n\t\t\t\t\t\tif(isNaN(parameter)) {\n\t\t\t\t\t\t\tparameter = parseInt(parameter, 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 正負判定\n\t\t\t\t\t\tif((type === \"d\") || (type === \"i\")) {\n\t\t\t\t\t\t\tif(parameter < 0) {\n\t\t\t\t\t\t\t\tsSignCharacter = \"-\";\n\t\t\t\t\t\t\t\tparameter  = -parameter;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparameter  = Math.floor(parameter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif(parameter >= 0) {\n\t\t\t\t\t\t\t\tparameter  = Math.floor(parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tparameter  = Math.ceil(parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 実数\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 数字に変換\n\t\t\t\t\t\tif(isNaN(parameter)) {\n\t\t\t\t\t\t\tparameter = parseFloat(parameter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 正負判定\n\t\t\t\t\t\tif(parameter < 0) {\n\t\t\t\t\t\t\tsSignCharacter = \"-\";\n\t\t\t\t\t\t\tparameter  = -parameter;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!isPrecision) {\n\t\t\t\t\t\t\tprecision = 6;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 文字列を作成していく\n\t\t\t\t\tswitch(type.toLowerCase()) {\n\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\tcase \"i\":\n\t\t\t\t\t\t\toutput += parameter.toString(10);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"u\":\n\t\t\t\t\t\t\toutput += toUnsign(parameter).toString(10);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"b\":\n\t\t\t\t\t\t\toutput += toUnsign(parameter).toString(2);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0b\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"o\":\n\t\t\t\t\t\t\toutput  += toUnsign(parameter).toString(8);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"x\":\n\t\t\t\t\t\tcase \"X\":\n\t\t\t\t\t\t\toutput  += toUnsign(parameter).toString(16);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0x\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"e\":\n\t\t\t\t\t\t\toutput += parameter.toExponential(precision);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"f\":\n\t\t\t\t\t\t\toutput += parameter.toFixed(precision);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"g\":\n\t\t\t\t\t\t\tif(precision === 0) { // 0は1とする\n\t\t\t\t\t\t\t\tprecision = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toutput += parameter.toPrecision(precision);\n\t\t\t\t\t\t\t// 小数点以下の語尾の0の削除\n\t\t\t\t\t\t\tif((!isFlagSharp) && (output.indexOf(\".\") !== -1)) {\n\t\t\t\t\t\t\t\toutput = output.replace(/\\.?0+$/, \"\");  // 1.00 , 1.10\n\t\t\t\t\t\t\t\toutput = output.replace(/\\.?0+e/, \"e\"); // 1.0e , 1.10e\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 上でチェックしているため、ありえない\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// 整数での後処理\n\t\t\t\t\tif(isInteger) {\n\t\t\t\t\t\tif(isPrecision) { // 精度の付け足し\n\t\t\t\t\t\t\tspacesize  = precision - output.length;\n\t\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\t\toutput = \"0\" + output;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 実数での後処理\n\t\t\t\t\telse {\n\t\t\t\t\t\tif(isFlagSharp) { \n\t\t\t\t\t\t\t// sharp指定の時は小数点を必ず残す\n\t\t\t\t\t\t\tif(output.indexOf(\".\") === -1) {\n\t\t\t\t\t\t\t\tif(output.indexOf(\"e\") !== -1) {\n\t\t\t\t\t\t\t\t\toutput = output.replace(\"e\", \".e\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\toutput += \".\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 指数表記は、3桁表示(double型のため)\n\t\t\t\t\tif(output.indexOf(\"e\") !== -1) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @param {string} str\n\t\t\t\t\t\t * @returns {string}\n\t\t\t\t\t\t * @private\n\t\t\t\t\t\t */\n\t\t\t\t\t\tconst buff = function(str) {\n\t\t\t\t\t\t\tconst l   = str.length;\n\t\t\t\t\t\t\tif(str.length === 3) { // e+1 -> e+001\n\t\t\t\t\t\t\t\treturn(str.substring(0, l - 1) + \"00\" + str.substring(l - 1, l));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse { // e+10 -> e+010\n\t\t\t\t\t\t\t\treturn(str.substring(0, l - 2) + \"0\" + str.substring(l - 2, l));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\toutput = output.replace(/e[+-][0-9]{1,2}$/, buff);\n\t\t\t\t\t}\n\t\t\t\t\ttextlength = output.length + sharpdata.length + sSignCharacter.length;\n\t\t\t\t\tspacesize  = width - textlength;\n\t\t\t\t\t// 左よせ\n\t\t\t\t\tif(isFlagTextAlignLeft) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = output + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 0を埋める場合\n\t\t\t\t\tif(isFlagFillZero) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = \"0\" + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// マイナスや、「0x」などを接続\n\t\t\t\t\toutput = sharpdata + output;\n\t\t\t\t\toutput = sSignCharacter + output;\n\t\t\t\t\t// 0 で埋めない場合\n\t\t\t\t\tif((!isFlagFillZero) && (!isFlagTextAlignLeft)) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = \" \" + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 大文字化\n\t\t\t\t\tif(type.toUpperCase() === type) {\n\t\t\t\t\t\toutput = output.toUpperCase();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// 文字列の場合\n\t\t\t\tcase \"c\":\n\t\t\t\t\tif(!isNaN(parameter)) {\n\t\t\t\t\t\tparameter = String.fromCharCode(parameter);\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\tcase \"s\":\n\t\t\t\t{\n\t\t\t\t\tif(!isNaN(parameter)) {\n\t\t\t\t\t\tparameter = parameter.toString(10);\n\t\t\t\t\t}\n\t\t\t\t\toutput = parameter;\n\t\t\t\t\tif(isPrecision) { // 最大表示文字数\n\t\t\t\t\t\tif(output.length > precision) {\n\t\t\t\t\t\t\toutput = output.substring(0, precision);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst s_textlength = output.length; // 現在の文字を構成するために必要な長さ\n\t\t\t\t\tconst s_spacesize  = width - s_textlength;  // 追加する横幅\n\t\t\t\t\t// 左よせ / 右よせ\n\t\t\t\t\tif(isFlagTextAlignLeft) {\n\t\t\t\t\t\tfor(let i = 0; i < s_spacesize; i++) {\n\t\t\t\t\t\t\toutput = output + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 拡張\n\t\t\t\t\t\tconst s = isFlagFillZero ? \"0\" : \" \";\n\t\t\t\t\t\tfor(let i = 0; i < s_spacesize; i++) {\n\t\t\t\t\t\t\toutput = s + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// パーセント\n\t\t\t\tcase \"%\":\n\t\t\t\t\toutput = \"%\";\n\t\t\t\t\tbreak;\n\t\t\t\t// 未サポート\n\t\t\t\tcase \"p\":\n\t\t\t\tcase \"n\":\n\t\t\t\t\toutput = \"(unsupported)\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// 正規表現でチェックしているため、ありえない\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn (output);\t\n\t\t};\n\t\treturn (parm[0].replace(/%[^diubBoxXeEfFgGaAcspn%]*[diubBoxXeEfFgGaAcspn%]/g, func));\n\t}\n\n\t/**\n\t * 時刻用の書式に合わせて文字列を組み立てる\n\t * - YYYY-MM-DD hh:mm:ss のように指定できる。\n\t * @param {String} text \n\t * @param {Date} date 時刻情報\n\t * @returns {String}\n\t */\n\tstatic datef(text, date) {\n\t\tconst Y = date.getFullYear();\n\t\tconst M = date.getMonth() + 1;\n\t\tconst D = date.getDate();\n\t\tconst h = date.getHours();\n\t\tconst m = date.getMinutes();\n\t\tconst s = date.getSeconds();\n\t\tconst ms = date.getMilliseconds();\n\t\tconst day = date.getDay(); // 曜日\n\t\tconst aaa_array = [26085, 26376, 28779, 27700, 26408, 37329, 22303];\n\t\tconst aaaa_str = String.fromCharCode(26332) + String.fromCharCode(26085);\n\t\tconst ddd_array = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\t\tconst dddd_array = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\t\tlet output = text;\n\t\toutput = output.replace(/YYYY/g, Y.toString());\n\t\toutput = output.replace(/YY/g, (Y % 100).toString());\n\t\toutput = output.replace(/MM/g, Format.textf(\"%02d\", M));\n\t\toutput = output.replace(/M/g, M.toString());\n\t\toutput = output.replace(/DD/g, Format.textf(\"%02d\", D));\n\t\toutput = output.replace(/D/g, D.toString());\n\t\toutput = output.replace(/hh/g, Format.textf(\"%02d\", h));\n\t\toutput = output.replace(/h/g, h.toString());\n\t\toutput = output.replace(/mm/g, Format.textf(\"%02d\", m));\n\t\toutput = output.replace(/m/g, m.toString());\n\t\toutput = output.replace(/ss/g, Format.textf(\"%02d\", s));\n\t\toutput = output.replace(/s/g, s.toString());\n\t\toutput = output.replace(/000/g, Format.textf(\"%03d\", ms));\n\t\toutput = output.replace(/aaaa/g, String.fromCharCode(aaa_array[day]) + aaaa_str);\n\t\toutput = output.replace(/aaa/g, String.fromCharCode(aaa_array[day]));\n\t\toutput = output.replace(/dddd/g, dddd_array[day]);\n\t\toutput = output.replace(/ddd/g, ddd_array[day]);\n\t\toutput = output.replace(/day/g, day.toString());\n\t\treturn output;\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/senko/Format.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "class",
    "name": "Format",
    "memberof": "src/senko/Format.js",
    "static": true,
    "longname": "src/senko/Format.js~Format",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/senko/Format.js",
    "importStyle": "Format",
    "description": "書式に合わせて文字列を組み立てる関数を提供するクラス",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "textf",
    "memberof": "src/senko/Format.js~Format",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Format.js~Format.textf",
    "access": "public",
    "description": "printf に似た書式に合わせて文字列を組み立てる\n- ロケール、日付時刻等はサポートしていません。\n- 変換指定子のpとnはサポートしていません。",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "parm",
        "description": "パラメータは可変引数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "datef",
    "memberof": "src/senko/Format.js~Format",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Format.js~Format.datef",
    "access": "public",
    "description": "時刻用の書式に合わせて文字列を組み立てる\n- YYYY-MM-DD hh:mm:ss のように指定できる。",
    "lineNumber": 391,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "時刻情報"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/senko/Robot.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport System from \"./System\";\n\n/**\n * 大きさ情報\n * @typedef {Object} WSHRobotRect\n * @property {number} x 座標x\n * @property {number} y 座標y\n * @property {number} width 横幅\n * @property {number} height 縦幅\n */\n\n/**\n * 位置情報\n * @typedef {Object} WSHRobotPosition\n * @property {number} x 座標x\n * @property {number} y 座標y\n */\n\n/**\n * 仮想キーコード\n * @typedef {Object} VirtualKeyCode\n * @property {number} code\n */\n\n/**\n * 仮想キーコード一覧\n * @typedef {Object} VirtualKeyCodes\n * @property {VirtualKeyCode} VK_LBUTTON\n * @property {VirtualKeyCode} VK_RBUTTON\n * @property {VirtualKeyCode} VK_CANCEL\n * @property {VirtualKeyCode} VK_MBUTTON\n * @property {VirtualKeyCode} VK_XBUTTON1\n * @property {VirtualKeyCode} VK_XBUTTON2\n * @property {VirtualKeyCode} VK_BACK\n * @property {VirtualKeyCode} VK_TAB\n * @property {VirtualKeyCode} VK_CLEAR\n * @property {VirtualKeyCode} VK_RETURN\n * @property {VirtualKeyCode} VK_SHIFT\n * @property {VirtualKeyCode} VK_CONTROL\n * @property {VirtualKeyCode} VK_MENU\n * @property {VirtualKeyCode} VK_PAUSE\n * @property {VirtualKeyCode} VK_CAPITAL\n * @property {VirtualKeyCode} VK_KANA\n * @property {VirtualKeyCode} VK_HANGEUL\n * @property {VirtualKeyCode} VK_HANGUL\n * @property {VirtualKeyCode} VK_JUNJA\n * @property {VirtualKeyCode} VK_FINAL\n * @property {VirtualKeyCode} VK_HANJA\n * @property {VirtualKeyCode} VK_KANJI\n * @property {VirtualKeyCode} VK_ESCAPE\n * @property {VirtualKeyCode} VK_CONVERT\n * @property {VirtualKeyCode} VK_NONCONVERT\n * @property {VirtualKeyCode} VK_ACCEPT\n * @property {VirtualKeyCode} VK_MODECHANGE\n * @property {VirtualKeyCode} VK_SPACE\n * @property {VirtualKeyCode} VK_PRIOR\n * @property {VirtualKeyCode} VK_NEXT\n * @property {VirtualKeyCode} VK_END\n * @property {VirtualKeyCode} VK_HOME\n * @property {VirtualKeyCode} VK_LEFT\n * @property {VirtualKeyCode} VK_UP\n * @property {VirtualKeyCode} VK_RIGHT\n * @property {VirtualKeyCode} VK_DOWN\n * @property {VirtualKeyCode} VK_SELECT\n * @property {VirtualKeyCode} VK_PRINT\n * @property {VirtualKeyCode} VK_EXECUTE\n * @property {VirtualKeyCode} VK_SNAPSHOT\n * @property {VirtualKeyCode} VK_INSERT\n * @property {VirtualKeyCode} VK_DELETE\n * @property {VirtualKeyCode} VK_HELP\n * @property {VirtualKeyCode} VK_0\n * @property {VirtualKeyCode} VK_1\n * @property {VirtualKeyCode} VK_2\n * @property {VirtualKeyCode} VK_3\n * @property {VirtualKeyCode} VK_4\n * @property {VirtualKeyCode} VK_5\n * @property {VirtualKeyCode} VK_6\n * @property {VirtualKeyCode} VK_7\n * @property {VirtualKeyCode} VK_8\n * @property {VirtualKeyCode} VK_9\n * @property {VirtualKeyCode} VK_A\n * @property {VirtualKeyCode} VK_B\n * @property {VirtualKeyCode} VK_C\n * @property {VirtualKeyCode} VK_D\n * @property {VirtualKeyCode} VK_E\n * @property {VirtualKeyCode} VK_F\n * @property {VirtualKeyCode} VK_G\n * @property {VirtualKeyCode} VK_H\n * @property {VirtualKeyCode} VK_I\n * @property {VirtualKeyCode} VK_J\n * @property {VirtualKeyCode} VK_K\n * @property {VirtualKeyCode} VK_L\n * @property {VirtualKeyCode} VK_M\n * @property {VirtualKeyCode} VK_N\n * @property {VirtualKeyCode} VK_O\n * @property {VirtualKeyCode} VK_P\n * @property {VirtualKeyCode} VK_Q\n * @property {VirtualKeyCode} VK_R\n * @property {VirtualKeyCode} VK_S\n * @property {VirtualKeyCode} VK_T\n * @property {VirtualKeyCode} VK_U\n * @property {VirtualKeyCode} VK_V\n * @property {VirtualKeyCode} VK_W\n * @property {VirtualKeyCode} VK_X\n * @property {VirtualKeyCode} VK_Y\n * @property {VirtualKeyCode} VK_Z\n * @property {VirtualKeyCode} VK_LWIN\n * @property {VirtualKeyCode} VK_RWIN\n * @property {VirtualKeyCode} VK_APPS\n * @property {VirtualKeyCode} VK_SLEEP\n * @property {VirtualKeyCode} VK_NUMPAD0\n * @property {VirtualKeyCode} VK_NUMPAD1\n * @property {VirtualKeyCode} VK_NUMPAD2\n * @property {VirtualKeyCode} VK_NUMPAD3\n * @property {VirtualKeyCode} VK_NUMPAD4\n * @property {VirtualKeyCode} VK_NUMPAD5\n * @property {VirtualKeyCode} VK_NUMPAD6\n * @property {VirtualKeyCode} VK_NUMPAD7\n * @property {VirtualKeyCode} VK_NUMPAD8\n * @property {VirtualKeyCode} VK_NUMPAD9\n * @property {VirtualKeyCode} VK_MULTIPLY\n * @property {VirtualKeyCode} VK_ADD\n * @property {VirtualKeyCode} VK_SEPARATOR\n * @property {VirtualKeyCode} VK_SUBTRACT\n * @property {VirtualKeyCode} VK_DECIMAL\n * @property {VirtualKeyCode} VK_DIVIDE\n * @property {VirtualKeyCode} VK_F1\n * @property {VirtualKeyCode} VK_F2\n * @property {VirtualKeyCode} VK_F3\n * @property {VirtualKeyCode} VK_F4\n * @property {VirtualKeyCode} VK_F5\n * @property {VirtualKeyCode} VK_F6\n * @property {VirtualKeyCode} VK_F7\n * @property {VirtualKeyCode} VK_F8\n * @property {VirtualKeyCode} VK_F9\n * @property {VirtualKeyCode} VK_F10\n * @property {VirtualKeyCode} VK_F11\n * @property {VirtualKeyCode} VK_F12\n * @property {VirtualKeyCode} VK_F13\n * @property {VirtualKeyCode} VK_F14\n * @property {VirtualKeyCode} VK_F15\n * @property {VirtualKeyCode} VK_F16\n * @property {VirtualKeyCode} VK_F17\n * @property {VirtualKeyCode} VK_F18\n * @property {VirtualKeyCode} VK_F19\n * @property {VirtualKeyCode} VK_F20\n * @property {VirtualKeyCode} VK_F21\n * @property {VirtualKeyCode} VK_F22\n * @property {VirtualKeyCode} VK_F23\n * @property {VirtualKeyCode} VK_F24\n * @property {VirtualKeyCode} VK_NUMLOCK\n * @property {VirtualKeyCode} VK_SCROLL\n * @property {VirtualKeyCode} VK_LSHIFT\n * @property {VirtualKeyCode} VK_RSHIFT\n * @property {VirtualKeyCode} VK_LCONTROL\n * @property {VirtualKeyCode} VK_RCONTROL\n * @property {VirtualKeyCode} VK_LMENU\n * @property {VirtualKeyCode} VK_RMENU\n * @property {VirtualKeyCode} VK_BROWSER_BACK\n * @property {VirtualKeyCode} VK_BROWSER_FORWARD\n * @property {VirtualKeyCode} VK_BROWSER_REFRESH\n * @property {VirtualKeyCode} VK_BROWSER_STOP\n * @property {VirtualKeyCode} VK_BROWSER_SEARCH\n * @property {VirtualKeyCode} VK_BROWSER_FAVORITES\n * @property {VirtualKeyCode} VK_BROWSER_HOME\n * @property {VirtualKeyCode} VK_VOLUME_MUTE\n * @property {VirtualKeyCode} VK_VOLUME_DOWN\n * @property {VirtualKeyCode} VK_VOLUME_UP\n * @property {VirtualKeyCode} VK_MEDIA_NEXT_TRACK\n * @property {VirtualKeyCode} VK_MEDIA_PREV_TRACK\n * @property {VirtualKeyCode} VK_MEDIA_STOP\n * @property {VirtualKeyCode} VK_MEDIA_PLAY_PAUSE\n * @property {VirtualKeyCode} VK_LAUNCH_MAIL\n * @property {VirtualKeyCode} VK_LAUNCH_MEDIA_SELECT\n * @property {VirtualKeyCode} VK_LAUNCH_APP1\n * @property {VirtualKeyCode} VK_LAUNCH_APP2\n * @property {VirtualKeyCode} VK_OEM_1\n * @property {VirtualKeyCode} VK_OEM_PLUS\n * @property {VirtualKeyCode} VK_OEM_COMMA\n * @property {VirtualKeyCode} VK_OEM_MINUS\n * @property {VirtualKeyCode} VK_OEM_PERIOD\n * @property {VirtualKeyCode} VK_OEM_2\n * @property {VirtualKeyCode} VK_OEM_3\n * @property {VirtualKeyCode} VK_OEM_4\n * @property {VirtualKeyCode} VK_OEM_5\n * @property {VirtualKeyCode} VK_OEM_6\n * @property {VirtualKeyCode} VK_OEM_7\n * @property {VirtualKeyCode} VK_OEM_8\n * @property {VirtualKeyCode} VK_PROCESSKEY\n * @property {VirtualKeyCode} VK_ATTN\n * @property {VirtualKeyCode} VK_CRSEL\n * @property {VirtualKeyCode} VK_EXSEL\n * @property {VirtualKeyCode} VK_EREOF\n * @property {VirtualKeyCode} VK_PLAY\n * @property {VirtualKeyCode} VK_ZOOM\n * @property {VirtualKeyCode} VK_NONAME\n * @property {VirtualKeyCode} VK_PA1\n * @property {VirtualKeyCode} VK_OEM_CLEAR\n */\n\n/**\n * 仮想キーコード一覧\n * @type {VirtualKeyCodes}\n */\nconst VK_DATA = {\n\tVK_LBUTTON\t:{code:0x01},\n\tVK_RBUTTON\t:{code:0x02},\n\tVK_CANCEL\t:{code:0x03},\n\tVK_MBUTTON\t:{code:0x04},\n\tVK_XBUTTON1\t:{code:0x05},\n\tVK_XBUTTON2\t:{code:0x06},\n\tVK_BACK\t:{code:0x08},\n\tVK_TAB\t:{code:0x09},\n\tVK_CLEAR\t:{code:0x0C},\n\tVK_RETURN\t:{code:0x0D},\n\tVK_SHIFT\t:{code:0x10},\n\tVK_CONTROL\t:{code:0x11},\n\tVK_MENU\t:{code:0x12},\n\tVK_PAUSE\t:{code:0x13},\n\tVK_CAPITAL\t:{code:0x14},\n\tVK_KANA\t:{code:0x15},\n\tVK_HANGEUL\t:{code:0x15},\n\tVK_HANGUL\t:{code:0x15},\n\tVK_JUNJA\t:{code:0x17},\n\tVK_FINAL\t:{code:0x18},\n\tVK_HANJA\t:{code:0x19},\n\tVK_KANJI\t:{code:0x19},\n\tVK_ESCAPE\t:{code:0x1B},\n\tVK_CONVERT\t:{code:0x1C},\n\tVK_NONCONVERT\t:{code:0x1D},\n\tVK_ACCEPT\t:{code:0x1E},\n\tVK_MODECHANGE\t:{code:0x1F},\n\tVK_SPACE\t:{code:0x20},\n\tVK_PRIOR\t:{code:0x21},\n\tVK_NEXT\t:{code:0x22},\n\tVK_END\t:{code:0x23},\n\tVK_HOME\t:{code:0x24},\n\tVK_LEFT\t:{code:0x25},\n\tVK_UP\t:{code:0x26},\n\tVK_RIGHT\t:{code:0x27},\n\tVK_DOWN\t:{code:0x28},\n\tVK_SELECT\t:{code:0x29},\n\tVK_PRINT\t:{code:0x2A},\n\tVK_EXECUTE\t:{code:0x2B},\n\tVK_SNAPSHOT\t:{code:0x2C},\n\tVK_INSERT\t:{code:0x2D},\n\tVK_DELETE\t:{code:0x2E},\n\tVK_HELP\t:{code:0x2F},\n\tVK_0\t:{code:0x30},\n\tVK_1\t:{code:0x31},\n\tVK_2\t:{code:0x32},\n\tVK_3\t:{code:0x33},\n\tVK_4\t:{code:0x34},\n\tVK_5\t:{code:0x35},\n\tVK_6\t:{code:0x36},\n\tVK_7\t:{code:0x37},\n\tVK_8\t:{code:0x38},\n\tVK_9\t:{code:0x39},\n\tVK_A\t:{code:0x41},\n\tVK_B\t:{code:0x42},\n\tVK_C\t:{code:0x43},\n\tVK_D\t:{code:0x44},\n\tVK_E\t:{code:0x45},\n\tVK_F\t:{code:0x46},\n\tVK_G\t:{code:0x47},\n\tVK_H\t:{code:0x48},\n\tVK_I\t:{code:0x49},\n\tVK_J\t:{code:0x4A},\n\tVK_K\t:{code:0x4B},\n\tVK_L\t:{code:0x4C},\n\tVK_M\t:{code:0x4D},\n\tVK_N\t:{code:0x4E},\n\tVK_O\t:{code:0x4F},\n\tVK_P\t:{code:0x50},\n\tVK_Q\t:{code:0x51},\n\tVK_R\t:{code:0x52},\n\tVK_S\t:{code:0x53},\n\tVK_T\t:{code:0x54},\n\tVK_U\t:{code:0x55},\n\tVK_V\t:{code:0x56},\n\tVK_W\t:{code:0x57},\n\tVK_X\t:{code:0x58},\n\tVK_Y\t:{code:0x59},\n\tVK_Z\t:{code:0x5A},\n\tVK_LWIN\t:{code:0x5B},\n\tVK_RWIN\t:{code:0x5C},\n\tVK_APPS\t:{code:0x5D},\n\tVK_SLEEP\t:{code:0x5F},\n\tVK_NUMPAD0\t:{code:0x60},\n\tVK_NUMPAD1\t:{code:0x61},\n\tVK_NUMPAD2\t:{code:0x62},\n\tVK_NUMPAD3\t:{code:0x63},\n\tVK_NUMPAD4\t:{code:0x64},\n\tVK_NUMPAD5\t:{code:0x65},\n\tVK_NUMPAD6\t:{code:0x66},\n\tVK_NUMPAD7\t:{code:0x67},\n\tVK_NUMPAD8\t:{code:0x68},\n\tVK_NUMPAD9\t:{code:0x69},\n\tVK_MULTIPLY\t:{code:0x6A},\n\tVK_ADD\t:{code:0x6B},\n\tVK_SEPARATOR\t:{code:0x6C},\n\tVK_SUBTRACT\t:{code:0x6D},\n\tVK_DECIMAL\t:{code:0x6E},\n\tVK_DIVIDE\t:{code:0x6F},\n\tVK_F1\t:{code:0x70},\n\tVK_F2\t:{code:0x71},\n\tVK_F3\t:{code:0x72},\n\tVK_F4\t:{code:0x73},\n\tVK_F5\t:{code:0x74},\n\tVK_F6\t:{code:0x75},\n\tVK_F7\t:{code:0x76},\n\tVK_F8\t:{code:0x77},\n\tVK_F9\t:{code:0x78},\n\tVK_F10\t:{code:0x79},\n\tVK_F11\t:{code:0x7A},\n\tVK_F12\t:{code:0x7B},\n\tVK_F13\t:{code:0x7C},\n\tVK_F14\t:{code:0x7D},\n\tVK_F15\t:{code:0x7E},\n\tVK_F16\t:{code:0x7F},\n\tVK_F17\t:{code:0x80},\n\tVK_F18\t:{code:0x81},\n\tVK_F19\t:{code:0x82},\n\tVK_F20\t:{code:0x83},\n\tVK_F21\t:{code:0x84},\n\tVK_F22\t:{code:0x85},\n\tVK_F23\t:{code:0x86},\n\tVK_F24\t:{code:0x87},\n\tVK_NUMLOCK\t:{code:0x90},\n\tVK_SCROLL\t:{code:0x91},\n\tVK_LSHIFT\t:{code:0xA0},\n\tVK_RSHIFT\t:{code:0xA1},\n\tVK_LCONTROL\t:{code:0xA2},\n\tVK_RCONTROL\t:{code:0xA3},\n\tVK_LMENU\t:{code:0xA4},\n\tVK_RMENU\t:{code:0xA5},\n\tVK_BROWSER_BACK\t:{code:0xA6},\n\tVK_BROWSER_FORWARD\t:{code:0xA7},\n\tVK_BROWSER_REFRESH\t:{code:0xA8},\n\tVK_BROWSER_STOP\t:{code:0xA9},\n\tVK_BROWSER_SEARCH\t:{code:0xAA},\n\tVK_BROWSER_FAVORITES\t:{code:0xAB},\n\tVK_BROWSER_HOME\t:{code:0xAC},\n\tVK_VOLUME_MUTE\t:{code:0xAD},\n\tVK_VOLUME_DOWN\t:{code:0xAE},\n\tVK_VOLUME_UP\t:{code:0xAF},\n\tVK_MEDIA_NEXT_TRACK\t:{code:0xB0},\n\tVK_MEDIA_PREV_TRACK\t:{code:0xB1},\n\tVK_MEDIA_STOP\t:{code:0xB2},\n\tVK_MEDIA_PLAY_PAUSE\t:{code:0xB3},\n\tVK_LAUNCH_MAIL\t:{code:0xB4},\n\tVK_LAUNCH_MEDIA_SELECT\t:{code:0xB5},\n\tVK_LAUNCH_APP1\t:{code:0xB6},\n\tVK_LAUNCH_APP2\t:{code:0xB7},\n\tVK_OEM_1\t:{code:0xBA},\n\tVK_OEM_PLUS\t:{code:0xBB},\n\tVK_OEM_COMMA\t:{code:0xBC},\n\tVK_OEM_MINUS\t:{code:0xBD},\n\tVK_OEM_PERIOD\t:{code:0xBE},\n\tVK_OEM_2\t:{code:0xBF},\n\tVK_OEM_3\t:{code:0xC0},\n\tVK_OEM_4\t:{code:0xDB},\n\tVK_OEM_5\t:{code:0xDC},\n\tVK_OEM_6\t:{code:0xDD},\n\tVK_OEM_7\t:{code:0xDE},\n\tVK_OEM_8\t:{code:0xDF},\n\tVK_PROCESSKEY\t:{code:0xE5},\n\tVK_ATTN\t:{code:0xF6},\n\tVK_CRSEL\t:{code:0xF7},\n\tVK_EXSEL\t:{code:0xF8},\n\tVK_EREOF\t:{code:0xF9},\n\tVK_PLAY\t:{code:0xFA},\n\tVK_ZOOM\t:{code:0xFB},\n\tVK_NONAME\t:{code:0xFC},\n\tVK_PA1\t:{code:0xFD},\n\tVK_OEM_CLEAR\t:{code:0xFE}\n};\n\n/**\n * マウスイベント用コード\n * @typedef {Object} MouseEventFCodes\n * @property {number} MOUSEEVENTF_ABSOLUTE\n * @property {number} MOUSEEVENTF_MOVE\n * @property {number} MOUSEEVENTF_LEFTDOWN\n * @property {number} MOUSEEVENTF_LEFTUP\n * @property {number} MOUSEEVENTF_RIGHTDOWN\n * @property {number} MOUSEEVENTF_RIGHTUP\n * @property {number} MOUSEEVENTF_MIDDLEDOWN\n * @property {number} MOUSEEVENTF_MIDDLEUP\n * @property {number} MOUSEEVENTF_WHEEL\n * @property {number} MOUSEEVENTF_XDOWN\n * @property {number} MOUSEEVENTF_XUP\n */\n\n/**\n * マウスイベント用コード一覧\n * @type {MouseEventFCodes}\n */\nconst MOUSEEVENTF_DATA = {\n\tMOUSEEVENTF_ABSOLUTE\t:0x8000,\n\tMOUSEEVENTF_MOVE\t\t:0x0001,\n\tMOUSEEVENTF_LEFTDOWN\t:0x0002,\n\tMOUSEEVENTF_LEFTUP\t\t:0x0004,\n\tMOUSEEVENTF_RIGHTDOWN\t:0x0008,\n\tMOUSEEVENTF_RIGHTUP\t\t:0x0010,\n\tMOUSEEVENTF_MIDDLEDOWN\t:0x0020,\n\tMOUSEEVENTF_MIDDLEUP\t:0x0040,\n\tMOUSEEVENTF_WHEEL\t\t:0x0800,\n\tMOUSEEVENTF_XDOWN\t\t:0x0080,\n\tMOUSEEVENTF_XUP\t\t\t:0x0100\n};\n\n/**\n * キーイベント発生時のオプション\n * @typedef {Object} KeyEventOption\n * @property {number} [count_max=1] 繰り返す回数\n * @property {boolean} [is_not_pushed=false] 押さない\n * @property {boolean} [is_not_released=false] 離さない\n * @property {number} [push_time_sec=0] 押下時間\n * @property {boolean} [is_pressed_shift=false]\n * @property {boolean} [is_pressed_alt=false]\n * @property {boolean} [is_pressed_ctrl=false]\n */\n\n/**\n * マウスイベント発生時のオプション\n * @typedef {Object} MouseEventOption\n * @property {number} [count_max=1] 繰り返す回数\n * @property {boolean} [is_not_pushed=false] 押さない\n * @property {boolean} [is_not_released=false] 離さない\n * @property {number} [push_time_sec=0] 押下時間\n */\n\n/**\n * ハンドルを取得する際に必要なデータ\n * @typedef {Object} RobotGetHandleData\n * @property {string|number} [classname=0] クラス名\n * @property {string|number} [windowtext=0] ウィンドウ名\n */\n\n/**\n * ウィンドウやマウスなどを自動操作するためのクラス\n */\nexport default class Robot {\n\t\n\t/**\n\t * キーを入力する\n\t * @param {VirtualKeyCode} vkcode - キーコード（利用可能なコードは、Robot.getVK() で取得可能）\n\t * @param {KeyEventOption} [option] - オプション\n\t */\n\tstatic setKeyEvent(vkcode, option) {\n\t\tconst KEYEVENTF_KEYUP = 2;\n\t\tconst count_max = (option && option.count_max) ? option.count_max: 1;\n\t\tlet time_ms = (option && option.push_time_sec) ? ((option.push_time_sec * 1000) | 0 ): 0;\n\t\ttime_ms = Math.max(time_ms , 1); // 1以上にする\n\t\tlet code = \"for ($i=0; $i -lt \" + count_max + \"; $i++){\";\n\t\t{\n\t\t\tif(option && option.is_pressed_shift) {\n\t\t\t\tcode += \"$api::keybd_event(\" + VK_DATA.VK_SHIFT.code + \", 0, 0, 0);\";\n\t\t\t}\n\t\t\tif(option && option.is_pressed_alt) {\n\t\t\t\tcode += \"$api::keybd_event(\" + VK_DATA.VK_MENU.code + \", 0, 0, 0);\";\n\t\t\t}\n\t\t\tif(option && option.is_pressed_ctrl) {\n\t\t\t\tcode += \"$api::keybd_event(\" + VK_DATA.VK_CONTROL.code + \", 0, 0, 0);\";\n\t\t\t}\n\t\t\tif(!option || !option.is_not_pushed) {\n\t\t\t\tcode += \"$api::keybd_event(\" + vkcode.code + \", 0, 0, 0);\";\n\t\t\t}\n\t\t}\n\t\tif(option && option.push_time_sec) {\n\t\t\tcode += \"Start-Sleep -m \" + time_ms + \";\";\n\t\t}\n\t\t{\n\t\t\tif(!option || !option.is_not_released) {\n\t\t\t\tcode += \"$api::keybd_event(\" + vkcode.code + \", 0, \" + KEYEVENTF_KEYUP + \", 0);\";\n\t\t\t}\n\t\t\tif(option && option.is_pressed_ctrl) {\n\t\t\t\tcode += \"$api::keybd_event(\" + VK_DATA.VK_CONTROL.code + \", 0, \" + KEYEVENTF_KEYUP + \", 0);\";\n\t\t\t}\n\t\t\tif(option && option.is_pressed_alt) {\n\t\t\t\tcode += \"$api::keybd_event(\" + VK_DATA.VK_MENU.code + \", 0, \" + KEYEVENTF_KEYUP + \", 0);\";\n\t\t\t}\n\t\t\tif(option && option.is_pressed_shift) {\n\t\t\t\tcode += \"$api::keybd_event(\" + VK_DATA.VK_SHIFT.code + \", 0, \" + KEYEVENTF_KEYUP + \", 0);\";\n\t\t\t}\n\t\t}\n\t\tcode += \"}\";\n\t\tSystem.WindowsAPI(\n\t\t\t\"user32.dll\",\n\t\t\t\"void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo)\",\n\t\t\tcode\n\t\t);\n\t}\n\t\n\t/**\n\t * 仮想キーコードの一覧を取得します\n\t * @returns {VirtualKeyCodes} \n\t */\n\tstatic getVK() {\n\t\treturn VK_DATA;\n\t}\n\n\t/**\n\t * マウスのクリックを行う\n\t * @param {string} type - \"LEFT\", \"RIGHT\", \"CLICK\", \"DOUBLE_CLICK\"といった文字列\n\t * @param {KeyEventOption} [option] - オプション\n\t */\n\tstatic setMouseEvent(type, option) {\n\t\tlet count_max = (option && option.count_max) ? option.count_max: 1;\n\t\tlet time_ms = (option && option.push_time_sec) ? ((option.push_time_sec * 1000) | 0 ): 0;\n\t\ttime_ms = Math.max(time_ms , 1); // 1以上にする\n\t\tlet target = type.toUpperCase().trim();\n\t\tif(target === \"CLICK\") {\n\t\t\tcount_max = 1;\n\t\t\ttarget = \"LEFT\";\n\t\t}\n\t\telse if(target === \"DOUBLE_CLICK\") {\n\t\t\tcount_max = 2;\n\t\t\ttarget = \"LEFT\";\n\t\t}\n\t\tlet pushed_code;\n\t\tlet released_code;\n\t\tif(target === \"LEFT\") {\n\t\t\tpushed_code\t\t= MOUSEEVENTF_DATA.MOUSEEVENTF_LEFTDOWN;\n\t\t\treleased_code\t= MOUSEEVENTF_DATA.MOUSEEVENTF_LEFTUP;\n\t\t}\n\t\telse if((target === \"CENTER\") || (target === \"MIDDLE\")) {\n\t\t\tpushed_code\t\t= MOUSEEVENTF_DATA.MOUSEEVENTF_MIDDLEDOWN;\n\t\t\treleased_code\t= MOUSEEVENTF_DATA.MOUSEEVENTF_MIDDLEUP;\n\t\t}\n\t\tif(target === \"RIGHT\") {\n\t\t\tpushed_code\t\t= MOUSEEVENTF_DATA.MOUSEEVENTF_RIGHTDOWN;\n\t\t\treleased_code\t= MOUSEEVENTF_DATA.MOUSEEVENTF_RIGHTUP;\n\t\t}\n\t\tlet code = \"for ($i=0; $i -lt \" + count_max + \"; $i++){\";\n\t\tif(!option || !option.is_not_pushed) {\n\t\t\tcode += \"$api::mouse_event(\" + pushed_code + \", 0, 0, 0, 0);\";\n\t\t}\n\t\tif(option && option.push_time_sec) {\n\t\t\tcode += \"Start-Sleep -m \" + time_ms + \";\";\n\t\t}\n\t\tif(!option || !option.is_not_released) {\n\t\t\tcode += \"$api::mouse_event(\" + released_code + \", 0, 0, 0, 0);\";\n\t\t}\n\t\tcode += \"}\";\n\t\tSystem.WindowsAPI(\n\t\t\t\"user32.dll\",\n\t\t\t\"void mouse_event(long dwFlags, long dx, long dy, long cButtons, long dwExtraInfo)\",\n\t\t\tcode\n\t\t);\n\t}\n\n\t/**\n\t * マウスの座標を調べる\n\t * @returns {WSHRobotPosition}\n\t */\n\tstatic getCursorPosition() {\n\t\t/*\n\t\t以下の行を1行で実行する\n\t\t[void] [System.Reflection.Assembly]::LoadWithPartialName(\"System.Windows.Forms\");\n\t\t$X = [System.Windows.Forms.Cursor]::Position.X;\n\t\t$Y = [System.Windows.Forms.Cursor]::Position.Y;\n\t\t\"$X,$Y\"\n\t\t*/\n\t\t// eslint-disable-next-line quotes\n\t\tconst text = System.PowerShell('[void] [System.Reflection.Assembly]::LoadWithPartialName(\"System.Windows.Forms\");$X = [System.Windows.Forms.Cursor]::Position.X;$Y = [System.Windows.Forms.Cursor]::Position.Y;\"$X,$Y\"');\n\t\tconst pos_data = text.split(\",\");\n\t\tconst x = parseFloat(pos_data[0]) | 0;\n\t\tconst y = parseFloat(pos_data[1]) | 0;\n\t\treturn {\n\t\t\tx : x, y : y\n\t\t};\n\t}\n\n\t/**\n\t * マウスの座標を設定する\n\t * @param {WSHRobotPosition} position\n\t */\n\tstatic setCursorPosition(position) {\n\t\tSystem.WindowsAPI(\n\t\t\t\"user32.dll\",\n\t\t\t\"void SetCursorPos(int X, int Y)\",\n\t\t\t\"$api::SetCursorPos(\" + position.x + \", \" + position.y + \");\"\n\t\t);\n\t}\n\n\t/**\n\t * 指定したハンドルを取得する\n\t * @param {RobotGetHandleData} get_handle_data \n\t * @returns {number}\n\t */\n\tstatic getHandle(get_handle_data) {\n\t\tlet function_text;\n\t\t// 省略する場合はヌルポインタを設定する必要があるため、入力引数を変更する\n\t\tif(get_handle_data.classname && get_handle_data.windowtext) {\n\t\t\tfunction_text = \"IntPtr FindWindow(string lpClassName, string lpWindowName)\";\n\t\t}\n\t\telse if(get_handle_data.classname) {\n\t\t\tfunction_text = \"IntPtr FindWindow(string lpClassName, IntPtr lpWindowName)\";\n\t\t}\n\t\telse {\n\t\t\tfunction_text = \"IntPtr FindWindow(IntPtr lpClassName, string lpWindowName)\";\n\t\t}\n\t\tlet command = \"$api::FindWindow(\";\n\t\tcommand += (get_handle_data.classname ? \"\\\"\" + get_handle_data.classname + \"\\\"\" : \"0\") + \",\";\n\t\tcommand += (get_handle_data.windowtext ? \"\\\"\" + get_handle_data.windowtext + \"\\\"\" : \"0\") + \");\";\n\t\treturn parseFloat(System.WindowsAPI( \"user32.dll\", function_text, command));\n\t}\n\n\t/**\n\t * 指定したクラス名のハンドルを取得する\n\t * @param {string} classname \n\t * @returns {number}\n\t */\n\tstatic getHandleOfClassName(classname) {\n\t\t// console.log(Robot.getHandleOfClassName(\"Notepad\"));\n\t\treturn Robot.getHandle({classname : classname});\n\t}\n\n\t/**\n\t * 指定したハンドルのクラス名を取得する\n\t * @param {number} handle \n\t * @returns {string}\n\t */\n\tstatic getClassName(handle) {\n\t\treturn System.WindowsAPI(\n\t\t\t\"user32.dll\",\n\t\t\t\"IntPtr GetClassName(IntPtr hWnd, System.Text.StringBuilder text, int count)\",\n\t\t\t\"$buff = New-Object System.Text.StringBuilder 256;$null = $api::GetClassName(\" + handle + \", $buff, 256);$($buff.ToString());\"\n\t\t);\n\t}\n\n\t/**\n\t * 指定したウィンドウ名のハンドルを取得する\n\t * @param {string} windowname \n\t * @returns {number}\n\t */\n\tstatic getHandleOfWindowText(windowname) {\n\t\t// console.log(Robot.getHandleOfWindowName(\"無題 - メモ帳\");\n\t\treturn Robot.getHandle({windowtext : windowname});\n\t}\n\n\t/**\n\t * 指定したハンドルのウィンドウ名を取得する\n\t * @param {number} handle \n\t * @returns {string}\n\t */\n\tstatic getWindowText(handle) {\n\t\treturn System.WindowsAPI(\n\t\t\t\"user32.dll\",\n\t\t\t\"IntPtr GetWindowText(IntPtr hWnd, System.Text.StringBuilder text, int count)\",\n\t\t\t\"$buff = New-Object System.Text.StringBuilder 256;$null = $api::GetWindowText(\" + handle + \", $buff, 256);$($buff.ToString());\"\n\t\t);\n\t}\n\n\t/**\n\t * 指定したハンドルの位置とサイズを取得する\n\t * @param {number} handle \n\t * @returns {WSHRobotRect}\n\t */\n\tstatic getWindowRect(handle) {\n\t\t/*\n\t\t以下の行を1行で実行する\n\t\tAdd-Type -TypeDefinition @\"\n\t\tusing System;\n\t\tusing System.Runtime.InteropServices;\n\t\tpublic struct RECT { public int Left; public int Top; public int Right; public int Bottom; }\n\t\tpublic class API {\n\t\t\t[DllImport(\"user32.dll\")] public extern static bool GetWindowRect(IntPtr hWnd, out RECT lpRect);\n\t\t\tpublic static RECT getrect(IntPtr hwnd) { RECT rect = new RECT(); GetWindowRect(hwnd, out rect); return rect; }\n\t\t}\n\t\t\"@\n\t\t$rect = [API]::getrect(x);\n\t\t\"$($rect.Left),$($rect.Top),$($rect.Right),$($rect.Bottom)\"\n\t\t*/\n\t\t// eslint-disable-next-line quotes\n\t\tconst command = `Add-Type -TypeDefinition \"using System; using System.Runtime.InteropServices; public struct RECT { public int Left; public int Top; public int Right; public int Bottom; } public class API { [DllImport(\"\"user32.dll\"\")] public extern static bool GetWindowRect(IntPtr hWnd, out RECT lpRect); public static RECT getrect(IntPtr hwnd) { RECT rect = new RECT(); GetWindowRect(hwnd, out rect); return rect; } }\";  $rect = [API]::getrect(` + handle + `); \"$($rect.Left),$($rect.Top),$($rect.Right),$($rect.Bottom)\"`;\n\t\tconst rect = System.PowerShell(command);\n\t\tconst rect_data = rect.split(\",\");\n\t\tif(rect_data.length !== 4) {\n\t\t\treturn null;\n\t\t}\n\t\tconst left   = parseFloat(rect_data[0]) | 0;\n\t\tconst top    = parseFloat(rect_data[1]) | 0;\n\t\tconst right  = parseFloat(rect_data[2]) | 0;\n\t\tconst bottom = parseFloat(rect_data[3]) | 0;\n\t\treturn {\n\t\t\tx\t\t:left,\n\t\t\ty\t\t:top,\n\t\t\twidth\t:right - left,\n\t\t\theight\t:bottom - top\n\t\t};\n\t}\n\n\t/**\n\t * 指定したハンドルの位置とサイズを設定する\n\t * @param {number} handle \n\t * @param {WSHRobotRect} rect \n\t * @returns {void}\n\t */\n\tstatic setWindowRect(handle, rect) {\n\t\tSystem.WindowsAPI(\n\t\t\t\"user32.dll\",\n\t\t\t\"bool MoveWindow(IntPtr hWnd, int x, int y, int nWidth, int nHeight, int bRepaint)\",\n\t\t\t\"$api::MoveWindow(\" + handle + \" , \" + (rect.x|0) + \", \" + (rect.y|0) + \", \" + (rect.width|0) + \", \" + (rect.height|0) + \", 1 );\"\n\t\t);\n\t}\n\n\t/**\n\t * アクティブなウィンドウのハンドルを取得する\n\t * @returns {number}\n\t */\n\tstatic getActiveWindow() {\n\t\treturn parseFloat(System.WindowsAPI(\n\t\t\t\"user32.dll\",\n\t\t\t\"IntPtr GetForegroundWindow()\",\n\t\t\t\"$api::GetForegroundWindow();\"\n\t\t));\n\t}\n\n\t/**\n\t * アクティブなウィンドウを設定する\n\t * @param {number} handle \n\t * @returns {void}\n\t */\n\tstatic setActiveWindow(handle) {\n\t\tSystem.WindowsAPI(\n\t\t\t\"user32.dll\",\n\t\t\t\"bool SetForegroundWindow(IntPtr hWnd)\",\n\t\t\t\"$api::SetForegroundWindow(\" + handle + \");\"\n\t\t);\n\t}\n\n\t/**\n\t * 指定したハンドルのプロセスIDを取得する\n\t * @param {number} handle \n\t * @returns {number}\n\t */\n\tstatic getPID(handle) {\n\t\treturn parseFloat(System.WindowsAPI(\n\t\t\t\"user32.dll\",\n\t\t\t\"IntPtr GetWindowThreadProcessId(IntPtr hWnd, out int ProcessId)\",\n\t\t\t\"$getpid = 0;$null = $api::GetWindowThreadProcessId(\" + handle + \", [ref] $getpid);$getpid;\"\n\t\t));\n\t}\n\n\t/**\n\t * 指定したプロセスIDを修了させる\n\t * @param {number} pid \n\t */\n\tstatic terminateProcess(pid) {\n\t\treturn System.run(\"taskkill /PID \" + pid, 0, true);\n\t}\n\n\t\n\n\n\t// TODO マウスを移動させたり、キーボードを入力する操作を追加する予定\n\n}\n\n\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/senko/Robot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "typedef",
    "name": "WSHRobotRect",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~WSHRobotRect",
    "access": "public",
    "description": "大きさ情報",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "座標x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "座標y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "横幅"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "縦幅"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WSHRobotRect"
    }
  },
  {
    "__docId__": 172,
    "kind": "typedef",
    "name": "WSHRobotPosition",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~WSHRobotPosition",
    "access": "public",
    "description": "位置情報",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "座標x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "座標y"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WSHRobotPosition"
    }
  },
  {
    "__docId__": 173,
    "kind": "typedef",
    "name": "VirtualKeyCode",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~VirtualKeyCode",
    "access": "public",
    "description": "仮想キーコード",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "VirtualKeyCode"
    }
  },
  {
    "__docId__": 174,
    "kind": "typedef",
    "name": "VirtualKeyCodes",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~VirtualKeyCodes",
    "access": "public",
    "description": "仮想キーコード一覧",
    "properties": [
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_LBUTTON",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_RBUTTON",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_CANCEL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_MBUTTON",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_XBUTTON1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_XBUTTON2",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_BACK",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_TAB",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_CLEAR",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_RETURN",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_SHIFT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_CONTROL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_MENU",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_PAUSE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_CAPITAL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_KANA",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_HANGEUL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_HANGUL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_JUNJA",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_FINAL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_HANJA",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_KANJI",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_ESCAPE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_CONVERT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NONCONVERT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_ACCEPT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_MODECHANGE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_SPACE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_PRIOR",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NEXT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_END",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_HOME",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_LEFT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_UP",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_RIGHT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_DOWN",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_SELECT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_PRINT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_EXECUTE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_SNAPSHOT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_INSERT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_DELETE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_HELP",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_0",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_2",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_3",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_4",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_5",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_6",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_7",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_8",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_9",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_A",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_B",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_C",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_D",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_E",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_G",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_H",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_I",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_J",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_K",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_L",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_M",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_N",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_O",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_P",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_Q",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_R",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_S",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_T",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_U",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_V",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_W",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_X",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_Y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_Z",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_LWIN",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_RWIN",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_APPS",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_SLEEP",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMPAD0",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMPAD1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMPAD2",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMPAD3",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMPAD4",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMPAD5",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMPAD6",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMPAD7",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMPAD8",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMPAD9",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_MULTIPLY",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_ADD",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_SEPARATOR",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_SUBTRACT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_DECIMAL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_DIVIDE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F2",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F3",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F4",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F5",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F6",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F7",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F8",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F9",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F10",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F11",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F12",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F13",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F14",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F15",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F16",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F17",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F18",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F19",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F20",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F21",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F22",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F23",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_F24",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NUMLOCK",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_SCROLL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_LSHIFT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_RSHIFT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_LCONTROL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_RCONTROL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_LMENU",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_RMENU",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_BROWSER_BACK",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_BROWSER_FORWARD",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_BROWSER_REFRESH",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_BROWSER_STOP",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_BROWSER_SEARCH",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_BROWSER_FAVORITES",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_BROWSER_HOME",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_VOLUME_MUTE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_VOLUME_DOWN",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_VOLUME_UP",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_MEDIA_NEXT_TRACK",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_MEDIA_PREV_TRACK",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_MEDIA_STOP",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_MEDIA_PLAY_PAUSE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_LAUNCH_MAIL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_LAUNCH_MEDIA_SELECT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_LAUNCH_APP1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_LAUNCH_APP2",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_PLUS",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_COMMA",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_MINUS",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_PERIOD",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_2",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_3",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_4",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_5",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_6",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_7",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_8",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_PROCESSKEY",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_ATTN",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_CRSEL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_EXSEL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_EREOF",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_PLAY",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_ZOOM",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_NONAME",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_PA1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "VK_OEM_CLEAR",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "VirtualKeyCodes"
    }
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "VK_DATA",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~VK_DATA",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/senko/Robot.js",
    "importStyle": null,
    "description": "仮想キーコード一覧",
    "lineNumber": 215,
    "type": {
      "nullable": null,
      "types": [
        "VirtualKeyCodes"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "typedef",
    "name": "MouseEventFCodes",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~MouseEventFCodes",
    "access": "public",
    "description": "マウスイベント用コード",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_ABSOLUTE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_MOVE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_LEFTDOWN",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_LEFTUP",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_RIGHTDOWN",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_RIGHTUP",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_MIDDLEDOWN",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_MIDDLEUP",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_WHEEL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_XDOWN",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MOUSEEVENTF_XUP",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MouseEventFCodes"
    }
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "MOUSEEVENTF_DATA",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~MOUSEEVENTF_DATA",
    "access": "public",
    "export": false,
    "importPath": "senkowsh/src/senko/Robot.js",
    "importStyle": null,
    "description": "マウスイベント用コード一覧",
    "lineNumber": 409,
    "type": {
      "nullable": null,
      "types": [
        "MouseEventFCodes"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 178,
    "kind": "typedef",
    "name": "KeyEventOption",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~KeyEventOption",
    "access": "public",
    "description": "キーイベント発生時のオプション",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "count_max",
        "description": "繰り返す回数"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_not_pushed",
        "description": "押さない"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_not_released",
        "description": "離さない"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "push_time_sec",
        "description": "押下時間"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_pressed_shift",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_pressed_alt",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_pressed_ctrl",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KeyEventOption"
    }
  },
  {
    "__docId__": 179,
    "kind": "typedef",
    "name": "MouseEventOption",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~MouseEventOption",
    "access": "public",
    "description": "マウスイベント発生時のオプション",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "count_max",
        "description": "繰り返す回数"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_not_pushed",
        "description": "押さない"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_not_released",
        "description": "離さない"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "push_time_sec",
        "description": "押下時間"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MouseEventOption"
    }
  },
  {
    "__docId__": 180,
    "kind": "typedef",
    "name": "RobotGetHandleData",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~RobotGetHandleData",
    "access": "public",
    "description": "ハンドルを取得する際に必要なデータ",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "classname",
        "description": "クラス名"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "windowtext",
        "description": "ウィンドウ名"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RobotGetHandleData"
    }
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "Robot",
    "memberof": "src/senko/Robot.js",
    "static": true,
    "longname": "src/senko/Robot.js~Robot",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/senko/Robot.js",
    "importStyle": "Robot",
    "description": "ウィンドウやマウスなどを自動操作するためのクラス",
    "lineNumber": 454,
    "interface": false
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "setKeyEvent",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.setKeyEvent",
    "access": "public",
    "description": "キーを入力する",
    "lineNumber": 461,
    "params": [
      {
        "nullable": null,
        "types": [
          "VirtualKeyCode"
        ],
        "spread": false,
        "optional": false,
        "name": "vkcode",
        "description": "キーコード（利用可能なコードは、Robot.getVK() で取得可能）"
      },
      {
        "nullable": null,
        "types": [
          "KeyEventOption"
        ],
        "spread": false,
        "optional": true,
        "name": "option",
        "description": "オプション"
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "getVK",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.getVK",
    "access": "public",
    "description": "仮想キーコードの一覧を取得します",
    "lineNumber": 510,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{VirtualKeyCodes} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VirtualKeyCodes"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "setMouseEvent",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.setMouseEvent",
    "access": "public",
    "description": "マウスのクリックを行う",
    "lineNumber": 519,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "\"LEFT\", \"RIGHT\", \"CLICK\", \"DOUBLE_CLICK\"といった文字列"
      },
      {
        "nullable": null,
        "types": [
          "KeyEventOption"
        ],
        "spread": false,
        "optional": true,
        "name": "option",
        "description": "オプション"
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "getCursorPosition",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.getCursorPosition",
    "access": "public",
    "description": "マウスの座標を調べる",
    "lineNumber": 568,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WSHRobotPosition}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WSHRobotPosition"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "setCursorPosition",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.setCursorPosition",
    "access": "public",
    "description": "マウスの座標を設定する",
    "lineNumber": 590,
    "params": [
      {
        "nullable": null,
        "types": [
          "WSHRobotPosition"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "getHandle",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.getHandle",
    "access": "public",
    "description": "指定したハンドルを取得する",
    "lineNumber": 603,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RobotGetHandleData"
        ],
        "spread": false,
        "optional": false,
        "name": "get_handle_data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "getHandleOfClassName",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.getHandleOfClassName",
    "access": "public",
    "description": "指定したクラス名のハンドルを取得する",
    "lineNumber": 626,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "classname",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "getClassName",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.getClassName",
    "access": "public",
    "description": "指定したハンドルのクラス名を取得する",
    "lineNumber": 636,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "handle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "getHandleOfWindowText",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.getHandleOfWindowText",
    "access": "public",
    "description": "指定したウィンドウ名のハンドルを取得する",
    "lineNumber": 649,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "windowname",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "getWindowText",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.getWindowText",
    "access": "public",
    "description": "指定したハンドルのウィンドウ名を取得する",
    "lineNumber": 659,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "handle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "getWindowRect",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.getWindowRect",
    "access": "public",
    "description": "指定したハンドルの位置とサイズを取得する",
    "lineNumber": 672,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WSHRobotRect}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "handle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WSHRobotRect"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "setWindowRect",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.setWindowRect",
    "access": "public",
    "description": "指定したハンドルの位置とサイズを設定する",
    "lineNumber": 712,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "handle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "WSHRobotRect"
        ],
        "spread": false,
        "optional": false,
        "name": "rect",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "getActiveWindow",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.getActiveWindow",
    "access": "public",
    "description": "アクティブなウィンドウのハンドルを取得する",
    "lineNumber": 724,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "setActiveWindow",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.setActiveWindow",
    "access": "public",
    "description": "アクティブなウィンドウを設定する",
    "lineNumber": 737,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "handle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "getPID",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.getPID",
    "access": "public",
    "description": "指定したハンドルのプロセスIDを取得する",
    "lineNumber": 750,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "handle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "terminateProcess",
    "memberof": "src/senko/Robot.js~Robot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/Robot.js~Robot.terminateProcess",
    "access": "public",
    "description": "指定したプロセスIDを修了させる",
    "lineNumber": 762,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "src/senko/SFile.js",
    "content": "import Format from \"./Format.js\";\n\n/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * ファイル／フォルダ／URLを扱うクラス\n */\nexport default class SFile {\n\n\t/**\n\t * 初期化\n\t * @param {string|SFile} pathname ファイル名／フォルダ名／URLアドレス\n\t */\n\tconstructor(pathname) {\n\t\tif(arguments.length !== 1) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\n\t\t/**\n\t\t * @type {string}\n\t\t * @private\n\t\t */\n\t\tthis.pathname = \"\";\n\n\t\tif((typeof pathname === \"string\")||(pathname instanceof String)) {\n\t\t\t// \\を/に置き換える\n\t\t\tthis.pathname = pathname.replace(/\\\\/g, \"/\" );\n\t\t}\n\t\telse if(pathname instanceof SFile) {\n\t\t\tthis.pathname = pathname.getAbsolutePath();\n\t\t}\n\t\telse {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @private\n\t\t */\n\t\tthis.is_http = /^htt/.test(this.pathname);\n\n\t\t/**\n\t\t * @type {any}\n\t\t * @private\n\t\t */\n\t\tthis.fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n\t}\n\n\t/**\n\t * ファイルの削除（ゴミ箱には入りません）\n\t * @param {boolean} [is_force=false] - 読み取り専用でも削除する\n\t * @returns {boolean}\n\t */\n\tremove(is_force) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\ttry {\n\t\t\tif(this.isFile()) {\n\t\t\t\treturn this.fso.DeleteFile(this.pathname, is_force ? is_force : false );\n\t\t\t}\n\t\t\telse if(this.isDirectory()) {\n\t\t\t\treturn this.fso.DeleteFolder(this.pathname, is_force ? is_force : false );\n\t\t\t}\n\t\t}\n\t\tcatch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * ファイルが存在するか\n\t * @returns {boolean}\n\t */\n\texists() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tlet out = this.isFile();\n\t\tif(out === false) {\n\t\t\tout = this.isDirectory();\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * ファイルのコピー\n\t * @param {string|SFile} file_obj\n\t * @returns {boolean}\n\t */\n\tcopy(file_obj) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst file = new SFile(file_obj);\n\t\tif(this.isFile()) {\n\t\t\treturn this.fso.CopyFile(this.pathname, file.getAbsolutePath(), true);\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\treturn this.fso.CopyFolder(this.pathname, file.getAbsolutePath(), true);\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * ファイルの移動\n\t * @param {string|SFile} file_obj\n\t * @returns {boolean}\n\t */\n\tmove(file_obj) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst file = new SFile(file_obj);\n\t\tif(this.isFile()) {\n\t\t\tthis.fso.MoveFile(this.pathname, file.getAbsolutePath());\n\t\t\tthis.pathname = file.getAbsolutePath();\n\t\t\treturn true;\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\tthis.fso.MoveFolder(this.pathname, file.getAbsolutePath());\n\t\t\tthis.pathname = file.getAbsolutePath();\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * ファイル名を変更\n\t * @param {string|SFile} file_obj\n\t * @returns {boolean}\n\t */\n\trenameTo(file_obj) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isFile() && !this.isDirectory()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst file = this.isFile() ? this.fso.GetFile(this.pathname) : this.fso.GetFolder(this.pathname);\n\t\tconst name = new SFile(file_obj);\n\t\t// 例えばファイル名を大文字から小文字に変換といった場合、\n\t\t// Scripting.FileSystemObject の仕様によりエラーが発生するため、\n\t\t// 別のファイル名を経由する\n\t\tconst key = ((Math.random() * 0x7FFFFFFF) & 0x7FFFFFFF).toString(16);\n\t\tfile.Name = name.getName() + key;\n\t\tfile.Name = name.getName();\n\t\tthis.pathname = name.getAbsolutePath();\n\t\treturn true;\n\t}\n\n\t/**\n\t * 文字列化\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.getAbsolutePath();\n\t}\n\n\t/**\n\t * 名前を取得\n\t * @returns {string}\n\t */\n\tgetName() {\n\t\tif(this.is_http) {\n\t\t\t// 最後がスラッシュで終えている場合は、ファイル名取得できない\n\t\t\tif(this.isDirectory()) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tconst slashsplit = this.pathname.split(\"/\");\n\t\t\treturn slashsplit[slashsplit.length - 1];\n\t\t}\n\t\telse {\n\t\t\treturn this.fso.GetFileName(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * 親フォルダの絶対パス\n\t * @returns {string}\n\t */\n\tgetParent() {\n\t\tconst x = this.getAbsolutePath().match(/.*[/\\\\]/)[0];\n\t\treturn x.substring(0 ,x.length - 1);\n\t}\n\n\t/**\n\t * 親フォルダ\n\t * @returns {SFile}\n\t */\n\tgetParentFile() {\n\t\treturn new SFile(this.getParent());\n\t}\n\n\t/**\n\t * 拡張子（ドットを含まない）\n\t * @returns {string}\n\t */\n\tgetExtensionName() {\n\t\tif(this.is_http) {\n\t\t\tconst dotlist = this.getName().split(\".\");\n\t\t\treturn dotlist[dotlist.length - 1];\n\t\t}\n\t\telse {\n\t\t\treturn this.fso.GetExtensionName(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * 絶対パスかどうか\n\t * @returns {boolean}\n\t */\n\tisAbsolute() {\n\t\tif(this.is_http) {\n\t\t\treturn this.getAbsolutePath() === this.pathname;\n\t\t}\n\t\telse {\n\t\t\tconst name = this.pathname.replace(\"/\", \"\\\\\");\n\t\t\treturn this.fso.GetAbsolutePathName(this.pathname) === name;\n\t\t}\n\t}\n\n\t/**\n\t * フォルダかどうか\n\t * @returns {boolean}\n\t */\n\tisDirectory() {\n\t\tif(this.is_http) {\n\t\t\t// 最後がスラッシュで終えている場合はディレクトリ\n\t\t\treturn /\\/$/.test(this.pathname);\n\t\t}\n\t\telse {\n\t\t\treturn this.fso.FolderExists(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * ファイルかどうか\n\t * @returns {boolean}\n\t */\n\tisFile() {\n\t\tif(this.is_http) {\n\t\t\t// 最後がスラッシュで終えていない場合はファイル\n\t\t\treturn /[^/]$/.test(this.pathname);\n\t\t}\n\t\telse {\n\t\t\treturn this.fso.FileExists(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * 読み取り専用ファイルかどうか\n\t * @returns {boolean}\n\t */\n\tisReadOnly() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isFile() && !this.isDirectory()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst ATTRIBUTES_READONLY = 1;\n\t\tconst file = this.isFile() ? this.fso.GetFile(this.pathname) : this.fso.GetFolder(this.pathname);\n\t\treturn (file.Attributes & ATTRIBUTES_READONLY) !== 0;\n\t}\n\t\n\t/**\n\t * 読み取り専用ファイルかどうかを設定する\n\t * @param {boolean} is_readonly\n\t * @param {boolean} [is_allfiles=false]\n\t * @returns {boolean}\n\t */\n\tsetReadOnly(is_readonly, is_allfiles) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isFile() && !this.isDirectory()) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tconst ATTRIBUTES_READONLY = 1;\n\t\t\tconst file = this.isFile() ? this.fso.GetFile(this.pathname) : this.fso.GetFolder(this.pathname);\n\t\t\tif(is_readonly) {\n\t\t\t\tfile.Attributes = file.Attributes | ATTRIBUTES_READONLY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfile.Attributes = file.Attributes & ~ATTRIBUTES_READONLY;\n\t\t\t}\n\t\t}\n\t\tcatch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn false;\n\t\t}\n\t\tif(this.isFile() || !is_allfiles) {\n\t\t\treturn true;\n\t\t}\n\t\tlet ret = true;\n\t\t/**\n\t\t * @type {function(SFile): boolean}\n\t\t */\n\t\tconst func = function(file) {\n\t\t\tret = ret && file.setReadOnly(is_readonly, false);\n\t\t\treturn true;\n\t\t};\n\t\tthis.each(func);\n\t\treturn ret;\n\t}\n\n\t/**\n\t * 隠しファイルかどうか\n\t * @returns {boolean}\n\t */\n\tisHidden() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isFile() && !this.isDirectory()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst ATTRIBUTES_HIDDEN = 2;\n\t\tconst file = this.isFile() ? this.fso.GetFile(this.pathname) : this.fso.GetFolder(this.pathname);\n\t\treturn (file.Attributes & ATTRIBUTES_HIDDEN) !== 0;\n\t}\n\t\n\t/**\n\t *隠しファイルかどうかを設定する\n\t * @param {boolean} is_hidden\n\t * @param {boolean} [is_allfiles=false]\n\t * @returns {boolean}\n\t */\n\tsetHidden(is_hidden, is_allfiles) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isFile() && !this.isDirectory()) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tconst ATTRIBUTES_HIDDEN = 2;\n\t\t\tconst file = this.isFile() ? this.fso.GetFile(this.pathname) : this.fso.GetFolder(this.pathname);\n\t\t\tif(is_hidden) {\n\t\t\t\tfile.Attributes = file.Attributes | ATTRIBUTES_HIDDEN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfile.Attributes = file.Attributes & ~ATTRIBUTES_HIDDEN;\n\t\t\t}\n\t\t}\n\t\tcatch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn false;\n\t\t}\n\t\tif(this.isFile() || !is_allfiles) {\n\t\t\treturn true;\n\t\t}\n\t\tlet ret = true;\n\t\t/**\n\t\t * @type {function(SFile): boolean}\n\t\t */\n\t\tconst func = function(file) {\n\t\t\tret = ret && file.setHidden(is_hidden, false);\n\t\t\treturn true;\n\t\t};\n\t\tthis.each(func);\n\t\treturn ret;\n\t}\n\n\t/**\n\t * 更新日を取得\n\t * @returns {Date}\n\t */\n\tlastModified() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isFile() && !this.isDirectory()) {\n\t\t\treturn null;\n\t\t}\n\t\tconst file = this.isFile() ? this.fso.GetFile(this.pathname) : this.fso.GetFolder(this.pathname);\n\t\t// DateLastModified は VT_DATE 値なので変換する\n\t\treturn new Date(file.DateLastModified);\n\t}\n\n\t/**\n\t * 更新日を設定（ファイルのみ対応）\n\t * @param {Date} date\n\t * @returns {boolean}\n\t */\n\tsetLastModified(date) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isFile()) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tconst shell = new ActiveXObject(\"Shell.Application\");\n\t\t\tconst folder = shell.NameSpace(this.getParent());\n\t\t\tconst file = folder.ParseName(this.getName());\n\t\t\tconst date_string = Format.datef(\"YYYY/MM/DD hh:mm:ss\", date);\n\t\t\tfile.ModifyDate = date_string;\n\t\t\treturn true;\n\t\t}\n\t\tcatch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * ファイルサイズ\n\t * @returns {number}\n\t */\n\tlength() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isFile() && !this.isDirectory()) {\n\t\t\treturn -1;\n\t\t}\n\t\tconst file = this.isFile() ? this.fso.GetFile(this.pathname) : this.fso.GetFolder(this.pathname);\n\t\treturn file.Size;\n\t}\n\n\t/**\n\t * 配下のファイル名の一覧を取得\n\t * @returns {string[]}\n\t */\n\tgetFiles() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isDirectory) {\n\t\t\treturn null;\n\t\t}\n\t\tconst out = [];\n\t\tconst list = new Enumerator(this.fso.GetFolder(this.pathname).Files);\n\t\tfor(let i = 0; !list.atEnd(); list.moveNext()) {\n\t\t\tout[i++] = list.item().Name;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 配下のサブフォルダ名の一覧を取得\n\t * @returns {string[]}\n\t */\n\tgetSubFolders() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isDirectory) {\n\t\t\treturn null;\n\t\t}\n\t\tconst out = [];\n\t\tconst list = new Enumerator(this.fso.GetFolder(this.pathname).SubFolders);\n\t\tfor(let i = 0; !list.atEnd(); list.moveNext()) {\n\t\t\tout[i++] = list.item().Name;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 区切り文字と終端を正規化した文字列を取得\n\t * @returns {string}\n\t */\n\tgetNormalizedPathName() {\n\t\tif(this.pathname === \"\") {\n\t\t\treturn \".\\\\\";\n\t\t}\n\t\tlet name = this.pathname.replace(/\\//g, \"\\\\\");\n\t\tif(name.slice(-1) !== \"\\\\\") {\n\t\t\tname += \"\\\\\";\n\t\t}\n\t\treturn name;\n\t}\n\n\t/**\n\t * 配下のファイル名とフォルダ名を取得\n\t * @returns {string[]}\n\t */\n\tlist() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isDirectory) {\n\t\t\treturn null;\n\t\t}\n\t\tconst files = this.getFiles();\n\t\tconst subfolders = this.getSubFolders();\n\t\tconst out = [];\n\t\tfor(let j = 0; j < subfolders.length;) {\n\t\t\tout.push(subfolders[j++]);\n\t\t}\n\t\tfor(let j = 0; j < files.length;) {\n\t\t\tout.push(files[j++]);\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * 絶対パスを取得\n\t * @returns {string}\n\t */\n\tgetAbsolutePath() {\n\t\tif(this.is_http) {\n\t\t\t// ホストとファイルに分ける\n\t\t\tconst hosttext = this.pathname.match(/^http[^/]+\\/\\/[^/]+\\//)[0];\n\t\t\tconst filetext = this.pathname.substr(hosttext.length);\n\t\t\t// パスを1つずつ解析しながら辿っていく\n\t\t\tlet name = hosttext;\n\t\t\tconst namelist = filetext.split(\"/\");\n\t\t\tlet i;\n\t\t\tfor(i = 0; i < namelist.length; i++) {\n\t\t\t\tif((namelist[i] === \"\") || (namelist[i] === \".\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(namelist[i] === \"..\") {\n\t\t\t\t\tname = name.substring(0 ,name.length - 1).match(/.*\\//)[0];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tname += namelist[i];\n\t\t\t\tif(i !== namelist.length - 1) {\n\t\t\t\t\tname += \"/\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t\telse {\n\t\t\treturn this.fso.GetAbsolutePathName(this.pathname);\n\t\t}\n\t}\n\n\t/**\n\t * フォルダを作成\n\t * - フォルダは1つのみ指定可能\n\t * - すでにフォルダがある場合はエラーを返す。\n\t * @returns {boolean}\n\t */\n\tmkdir() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst filename = this.getAbsolutePath();\n\t\tif(this.fso.FileExists(filename)) {\n\t\t\t// ファイルがあるため、フォルダを作れない\n\t\t\treturn false;\n\t\t}\n\t\telse if(this.fso.FolderExists(filename)) {\n\t\t\t// フォルダが既にあるため、TRUEで返す\n\t\t\treturn true;\n\t\t}\n\t\t// フォルダがないので作成する\n\t\tthis.fso.CreateFolder(filename);\n\t\t// 10秒間作られるまで待つ\n\t\tfor(let i = 0; i < (20 * 10); i++) {\n\t\t\tif(this.fso.FolderExists(filename)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tWScript.Sleep(50); // 50ms\n\t\t}\n\t\t// いつまで待ってもフォルダが作られないので失敗\n\t\treturn false;\n\t}\n\n\t/**\n\t * フォルダを作成\n\t * - 作成したいフォルダを続けて記載が可能\n\t * - フォルダがない場合はフォルダを作成していく\n\t * @returns {boolean}\n\t */\n\tmkdirs() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst name = this.pathname.replace(/\\//g, \"\\\\\").split(\"\\\\\");\n\t\tlet dir  = \"\";\n\t\tfor(let i = 0; i < name.length; i++) {\n\t\t\tdir += name[i];\n\t\t\tif(!(new SFile(dir)).mkdir()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tdir += \"\\\\\";\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * 実行ファイルを起動する\n\t * @param {number} [style=1] - 起動オプション\n\t * @param {boolean} [is_wait=false] - プロセスが終了するまで待つ\n\t * @returns {void}\n\t */\n\trun(style, is_wait) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst NormalFocus = 1;\n\t\tconst intWindowStyle = style !== undefined ? style : NormalFocus;\n\t\tconst bWaitOnReturn = is_wait !== undefined ? is_wait : false;\n\t\tconst objWShell = new ActiveXObject(\"WScript.Shell\");\n\t\t// @ts-ignore\n\t\tobjWShell.Run(this.getAbsolutePath(), intWindowStyle, bWaitOnReturn);\n\t}\n\n\t/**\n\t * 1行書き加える\n\t * @param {string} text\n\t * @returns {boolean}\n\t */\n\twriteLine(text) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tlet file;\n\t\tif(this.isFile()) {\n\t\t\tconst ForAppending = 8;\n\t\t\tfile = this.fso.OpenTextFile(this.pathname, ForAppending);\n\t\t}\n\t\telse if(this.isDirectory()) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tfile = this.fso.CreateTextFile(this.pathname, true);\n\t\t}\n\t\tfile.WriteLine(text);\n\t\tfile.Close();\n\t\treturn true;\n\t}\n\n\t/**\n\t * テキストファイルを開く\n\t * @param {string} [charset=\"_autodetect_all\"] - 文字コード\n\t * @returns {string}\n\t */\n\tgetTextFile(charset) {\n\t\tconst icharset = charset !== undefined ? charset : \"_autodetect_all\";\n\t\tconst inewline = \"\\n\"; //javascript上での改行\n\t\tlet text = null;\n\t\tif(/^htt/.test(this.pathname)) {\n\t\t\tconst http = SFile.createXMLHttpRequest();\n\t\t\tif(http === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\thttp.open(\"GET\", this.pathname, false);\n\t\t\ttry {\n\t\t\t\thttp.send(null);\n\t\t\t\ttext = http.responseText;\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\ttext = \"error\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(/shift_jis|sjis|ascii|unicode|utf-16le/i.test(icharset)) {\n\t\t\t\t// Scripting.FileSystemObject で開く\n\t\t\t\tconst forreading = 1;\n\t\t\t\tlet tristate = 0;\n\t\t\t\tif(/ascii/i.test(icharset)) {\n\t\t\t\t\t// ASCII\n\t\t\t\t\ttristate = 0;\n\t\t\t\t}\n\t\t\t\telse if(/shift_jis|sjis/i.test(icharset)) {\n\t\t\t\t\t// システムのデフォルト(日本語のOSだと仮定)\n\t\t\t\t\ttristate = -2;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// utf-16le\n\t\t\t\t\ttristate = -1;\n\t\t\t\t}\n\t\t\t\tconst open_file = this.fso.OpenTextFile(this.pathname, forreading, true, tristate );\n\t\t\t\ttext = open_file.ReadAll();\n\t\t\t\topen_file.Close();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// より自由なコードで開く（速度は遅い）\n\t\t\t\t// 使用可能な charset については下記を参照\n\t\t\t\t// HKEY_CLASSES_ROOT\\MIME\\Database\\Charset\n\t\t\t\tconst adTypeText = 2;\n\t\t\t\tconst adReadAll = -1;\n\t\t\t\tconst stream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\t\tstream.type = adTypeText;\n\t\t\t\tstream.charset = icharset;\n\t\t\t\tstream.open();\n\t\t\t\tstream.loadFromFile(this.pathname);\n\t\t\t\ttext = stream.readText(adReadAll);\n\t\t\t\tstream.close();\n\t\t\t\t// 文字コードが自動取得の場合、BOMまで読み込んでしまうのを防止する\n\t\t\t\tif((icharset === \"_autodetect_all\")||(icharset === \"_autodetect\")) {\n\t\t\t\t\tlet newcharset = \"\";\n\t\t\t\t\t// 1文字以上のとき\n\t\t\t\t\tif(text.length > 1) {\n\t\t\t\t\t\t// utf-16le\n\t\t\t\t\t\tif(text.charCodeAt(0) === 0xfeff) {\n\t\t\t\t\t\t\t// 通常は、このルートはBOM付きutf-16leのときに通るが、\n\t\t\t\t\t\t\t// BOM付きutf-8でも通る場合がなぜかある。（後述）\n\t\t\t\t\t\t\tnewcharset = \"unicode\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// utf-16be\n\t\t\t\t\t\telse if(text.charCodeAt(0) === 0xfffe) {\n\t\t\t\t\t\t\tnewcharset = \"unicodeFFFE\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 2文字以上のとき\n\t\t\t\t\tif(text.length > 2) {\n\t\t\t\t\t\t// BOM付きutf-8でなぜかこの文字がくっつく場合がある。\n\t\t\t\t\t\tif(\t(text.charCodeAt(0) === 0x30fb) &&\n\t\t\t\t\t\t\t(text.charCodeAt(1) === 0xff7f)) {\n\t\t\t\t\t\t\tnewcharset = \"utf-8\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 3文字以上のとき\n\t\t\t\t\tif(text.length > 3) {\n\t\t\t\t\t\t// utf-8\n\t\t\t\t\t\tif(\t(text.charCodeAt(0) === 0xef) &&\n\t\t\t\t\t\t\t(text.charCodeAt(1) === 0xbb) &&\n\t\t\t\t\t\t\t(text.charCodeAt(2) === 0xbf)) {\n\t\t\t\t\t\t\tnewcharset = \"utf-8\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 上判定でBOM付きが分かった場合、正しい文字コードで取得する\n\t\t\t\t\tif(newcharset !== \"\") {\n\t\t\t\t\t\tconst stream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\t\t\t\tstream.type = adTypeText;\n\t\t\t\t\t\tstream.charset = newcharset;\n\t\t\t\t\t\tstream.open();\n\t\t\t\t\t\tstream.loadFromFile(this.pathname);\n\t\t\t\t\t\ttext = stream.readText(adReadAll);\n\t\t\t\t\t\tstream.close();\n\t\t\t\t\t}\n\t\t\t\t\t// BOM付きutf-8 でも BOM付きutf-16le と判定した場合の対処\n\t\t\t\t\tif((text.length > 1) && (text.charCodeAt(0) === 0xbbef)) {\n\t\t\t\t\t\tconst stream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\t\t\t\tstream.type = adTypeText;\n\t\t\t\t\t\tstream.charset = \"utf-8\";\n\t\t\t\t\t\tstream.open();\n\t\t\t\t\t\tstream.loadFromFile(this.pathname);\n\t\t\t\t\t\ttext = stream.readText(adReadAll);\n\t\t\t\t\t\tstream.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(text !== null) {\n\t\t\treturn text.replace(/\\r\\n?|\\n/g, inewline); //改行コードを統一\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * テキストファイルを保存\n\t * @param {string} text\n\t * @param {string} [charset=\"utf-8\"] - 文字コード\n\t * @param {string} [newline=\"\\n\"] - 改行コード\n\t * @param {boolean} [issetBOM=true] - BOMの有無(utf-8のみ有効 )\n\t * @returns {boolean}\n\t */\n\tsetTextFile(text, charset, newline, issetBOM) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst icharset = charset !== undefined ? charset : \"utf-8\";\n\t\tconst inewline = newline !== undefined ? newline : \"\\n\";\n\t\tconst iissetBOM = issetBOM !== undefined ? issetBOM : true; //utf-8のみ有効 BOMありかなし\n\t\tif(/shift_jis|sjis|ascii|unicode|utf-16le/i.test(icharset)) {\n\t\t\t// Scripting.FileSystemObject で書き込む\n\t\t\tconst forwriting = 2;\n\t\t\tlet tristate = 0;\n\t\t\tif(/ascii/i.test(icharset)) {\n\t\t\t\t// ASCII\n\t\t\t\ttristate = 0;\n\t\t\t}\n\t\t\telse if(/shift_jis|sjis/i.test(icharset)) {\n\t\t\t\t// システムのデフォルト(日本語のOSだと仮定)\n\t\t\t\ttristate = -2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// utf-16le\n\t\t\t\ttristate = -1;\n\t\t\t}\n\t\t\tconst open_file = this.fso.OpenTextFile(this.pathname, forwriting, true, tristate );\n\t\t\topen_file.Write(text.replace(/\\r\\n?|\\n/g, inewline));\n\t\t\topen_file.Close();\n\t\t}\n\t\telse {\n\t\t\t// ADODB.Streamで書き込む\n\t\t\tconst adTypeBinary = 1;\n\t\t\tconst adTypeText = 2;\n\t\t\tconst adSaveCreateOverWrite = 2;\n\t\t\t// 使用可能な charset については下記を参照\n\t\t\t// HKEY_CLASSES_ROOT\\MIME\\Database\\Charset\n\t\t\tlet stream;\n\t\t\tstream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\tstream.type = adTypeText;\n\t\t\tstream.charset = icharset;\n\t\t\tstream.open();\n\t\t\tstream.writeText(text.replace(/\\r\\n?|\\n/g, inewline)); //改行コードを統一\n\t\t\tif(/utf-8/.test(icharset.toLowerCase()) && (!iissetBOM)) {\n\t\t\t\tstream.position = 0;\n\t\t\t\tstream.type = adTypeBinary;\n\t\t\t\tstream.position = 3;\n\t\t\t\tconst binary = stream.read();\n\t\t\t\tstream.close();\n\t\t\t\tstream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\t\tstream.type = adTypeBinary;\n\t\t\t\tstream.open();\n\t\t\t\tstream.write(binary);\n\t\t\t}\n\t\t\tstream.saveToFile(this.pathname, adSaveCreateOverWrite);\n\t\t\tstream.close();\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * バイナリファイルを開く（激重）\n\t * @returns {number[]}\n\t */\n\tgetBinaryFile() {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tconst adTypeText = 2;\n\t\tconst adReadAll = -1;\n\t\tconst charset = \"iso-8859-1\";\n\t\t\n\t\t/**\n\t\t * @type {Object<number, number>}\n\t\t * @private\n\t\t */\n\t\tconst map = {\n\t\t\t0x20AC\t:\t0x80\t,\t//\t8364\t128\n\t\t\t0x201A\t:\t0x82\t,\t//\t8218\t130\n\t\t\t0x0192\t:\t0x83\t,\t//\t402\t131\n\t\t\t0x201E\t:\t0x84\t,\t//\t8222\t132\n\t\t\t0x2026\t:\t0x85\t,\t//\t8230\t133\n\t\t\t0x2020\t:\t0x86\t,\t//\t8224\t134\n\t\t\t0x2021\t:\t0x87\t,\t//\t8225\t135\n\t\t\t0x02C6\t:\t0x88\t,\t//\t710\t136\n\t\t\t0x2030\t:\t0x89\t,\t//\t8240\t137\n\t\t\t0x0160\t:\t0x8A\t,\t//\t352\t138\n\t\t\t0x2039\t:\t0x8B\t,\t//\t8249\t139\n\t\t\t0x0152\t:\t0x8C\t,\t//\t338\t140\n\t\t\t0x017D\t:\t0x8E\t,\t//\t381\t142\n\t\t\t0x2018\t:\t0x91\t,\t//\t8216\t145\n\t\t\t0x2019\t:\t0x92\t,\t//\t8217\t146\n\t\t\t0x201C\t:\t0x93\t,\t//\t8220\t147\n\t\t\t0x201D\t:\t0x94\t,\t//\t8221\t148\n\t\t\t0x2022\t:\t0x95\t,\t//\t8226\t149\n\t\t\t0x2013\t:\t0x96\t,\t//\t8211\t150\n\t\t\t0x2014\t:\t0x97\t,\t//\t8212\t151\n\t\t\t0x02DC\t:\t0x98\t,\t//\t732\t152\n\t\t\t0x2122\t:\t0x99\t,\t//\t8482\t153\n\t\t\t0x0161\t:\t0x9A\t,\t//\t353\t154\n\t\t\t0x203A\t:\t0x9B\t,\t//\t8250\t155\n\t\t\t0x0153\t:\t0x9C\t,\t//\t339\t156\n\t\t\t0x017E\t:\t0x9E\t,\t//\t382\t158\n\t\t\t0x0178\t:\t0x9F\t\t//\t376\t159\n\t\t};\n\t\ttry {\n\t\t\tconst stream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\tstream.type = adTypeText;\n\t\t\tstream.charset = charset;\n\t\t\tstream.open();\n\t\t\tstream.loadFromFile(this.pathname);\n\t\t\tconst text = stream.readText(adReadAll);\n\t\t\tstream.close();\n\t\t\tconst out = new Array(text.length);\n\t\t\tfor(let i = 0;i < text.length;i++) {\n\t\t\t\tconst x = text.charCodeAt(i);\n\t\t\t\tif(0xFF < x) {\n\t\t\t\t\tout[i] = map[x];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout[i] = x;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\tcatch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * バイナリファイルを保存（激重）\n\t * @param {number[]} array_\n\t * @returns {boolean}\n\t */\n\tsetBinaryFile(array_) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tlet is_write = true;\n\t\tconst adTypeText = 2;\n\t\tconst adSaveCreateOverWrite = 2;\n\t\tconst charset = \"iso-8859-1\";\n\t\tconst buffersize = 512;\n\t\ttry {\n\t\t\tconst stream = new ActiveXObject(\"ADODB.Stream\");\n\t\t\tstream.type = adTypeText;\n\t\t\tstream.charset = charset;\n\t\t\tstream.open();\n\t\t\tfor(let i = 0;i < array_.length;) {\n\t\t\t\tconst text = [];\n\t\t\t\tfor(let j = 0; (j < buffersize) && (i < array_.length); j++, i++) {\n\t\t\t\t\ttext[j] = String.fromCharCode(array_[i]);\n\t\t\t\t}\n\t\t\t\tstream.writeText(text.join(\"\"));\n\t\t\t}\n\t\t\tstream.saveToFile(this.pathname, adSaveCreateOverWrite);\n\t\t\tstream.close();\n\t\t}\n\t\tcatch (e) {\n\t\t\tconsole.log(e);\n\t\t\tis_write = false;\n\t\t}\n\t\treturn is_write;\n\t}\n\n\t/**\n\t * XMLHttpRequestを作成\n\t * @returns {XMLHttpRequest}\n\t */\n\tstatic createXMLHttpRequest() {\n\t\ttry {\n\t\t\treturn new XMLHttpRequest();\n\t\t}\n\t\tcatch (e) {\n\t\t\tconst MSXMLHTTP = [\n\t\t\t\t\"WinHttp.WinHttpRequest.5.1\",\n\t\t\t\t\"WinHttp.WinHttpRequest.5\",\n\t\t\t\t\"WinHttp.WinHttpRequest\",\n\t\t\t\t\"Msxml2.ServerXMLHTTP.6.0\",\n\t\t\t\t\"Msxml2.ServerXMLHTTP.5.0\",\n\t\t\t\t\"Msxml2.ServerXMLHTTP.4.0\",\n\t\t\t\t\"Msxml2.ServerXMLHTTP.3.0\",\n\t\t\t\t\"Msxml2.ServerXMLHTTP\",\n\t\t\t\t\"Microsoft.ServerXMLHTTP\",\n\t\t\t\t\"Msxml2.XMLHTTP.6.0\",\n\t\t\t\t\"Msxml2.XMLHTTP.5.0\",\n\t\t\t\t\"Msxml2.XMLHTTP.4.0\",\n\t\t\t\t\"Msxml2.XMLHTTP.3.0\",\n\t\t\t\t\"Msxml2.XMLHTTP\",\n\t\t\t\t\"Microsoft.XMLHTTP\"\n\t\t\t];\n\t\t\t// ※ WinHttp.WinHttpRequest は onreadystatechange の書き換えができない\n\t\t\tlet i;\n\t\t\tfor(i = 0; i < MSXMLHTTP.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\treturn new ActiveXObject(MSXMLHTTP[i]);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\t/**\n\t * テンポラリフォルダ内の適当なファイル名を取得\n\t * @returns {SFile}\n\t */\n\tstatic createTempFile() {\n\t\tconst TemporaryFolder = 2;\n\t\tconst fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n\t\t// テンポラリフォルダ内の適当なファイル名を取得します\n\t\treturn new SFile(fso.GetSpecialFolder(TemporaryFolder) + \"\\\\\" + fso.GetTempName());\n\t}\n\n\t/**\n\t * カレントディレクトリを取得\n\t * @returns {SFile}\n\t */\n\tstatic getCurrentDirectory() {\n\t\tconst shell = new ActiveXObject(\"WScript.Shell\");\n\t\treturn new SFile(shell.CurrentDirectory);\n\t}\n\n\t/**\n\t * カレントディレクトリを設定\n\t * @param {string|SFile} file_obj\n\t */\n\tstatic setCurrentDirectory(file_obj) {\n\t\tconst file = new SFile(file_obj);\n\t\tconst shell = WScript.CreateObject (\"WScript.Shell\");\n\t\tconst fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n\t\tshell.CurrentDirectory = fso.GetFolder(file.getAbsolutePath()).Name;\n\t}\n\n\t/**\n\t * フォルダの中のフォルダとファイルに対して指定した関数を実行する\n\t * @param {function(SFile): boolean} func 戻り値がfalseで処理を終了。\n\t * @returns {boolean} result\n\t */\n\teach(func) {\n\t\tif(this.is_http) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t\tif(!this.isDirectory) {\n\t\t\treturn func.call(func, this);\n\t\t}\n\t\tconst path = [];\n\t\tconst collection = [];\n\t\tlet file;\n\t\tlet pointer = 0;\n\t\tlet list;\n\t\tlet targetfolder;\n\t\tpath[pointer] = this.getNormalizedPathName();\n\n\t\t// 1階層目を処理する\n\t\ttargetfolder = this.fso.GetFolder(path[pointer]);\n\t\tlist = new Enumerator(this.fso.GetFolder(targetfolder).Files);\n\t\tfor(; !list.atEnd(); list.moveNext()) {\n\t\t\tfile = new SFile(path[pointer] + list.item().Name);\n\t\t\tif(!func.call(func, file)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// 2階層目以降を処理する\n\t\tif(targetfolder.SubFolders.Count === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tcollection[pointer] = new Enumerator(targetfolder.SubFolders);\n\t\tpointer++;\n\t\twhile(true) {\n\t\t\tpath[pointer] = path[pointer - 1] + collection[pointer - 1].item().Name;\n\t\t\tfile = new SFile(path[pointer]);\n\t\t\tif(!func.call(func, file)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tpath[pointer] += \"\\\\\";\n\t\t\ttargetfolder = this.fso.GetFolder(path[pointer]);\n\t\t\tlist = new Enumerator(targetfolder.Files);\n\t\t\tfor(; !list.atEnd(); list.moveNext()) {\n\t\t\t\tfile = new SFile(path[pointer] + list.item().Name);\n\t\t\t\tif(!func.call(func, file)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(targetfolder.SubFolders.Count === 0) {\n\t\t\t\twhile(true) {\n\t\t\t\t\tif(pointer === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcollection[pointer - 1].moveNext();\n\t\t\t\t\tif(collection[pointer - 1].atEnd()) {\n\t\t\t\t\t\tpointer--;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(pointer === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcollection[pointer] = new Enumerator(targetfolder.SubFolders);\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * サブフォルダの中まで探索して全てのファイルとフォルダを取得\n\t * @returns {SFile[]}\n\t */\n\tgetAllFiles() {\n\t\t/**\n\t\t * @type {SFile[]}\n\t\t */\n\t\tconst out = [];\n\t\t/**\n\t\t * @type {function(SFile): boolean}\n\t\t */\n\t\tconst func = function(file) {\n\t\t\tout.push(file);\n\t\t\treturn true;\n\t\t};\n\t\tthis.each(func);\n\t\treturn out;\n\t}\n\n\t/**\n\t * 指定した条件にあうファイルを探す\n\t * 関数を指定する場合は、ファイル名とフルパスが引数に渡されます\n\t * @param {string|SFile|function(string, string): boolean} file_obj\n\t * @returns {SFile|null}\n\t */\n\tsearchFile(file_obj) {\n\t\tlet target_file = null;\n\t\t/**\n\t\t * @type {function(string, string): boolean}\n\t\t * @private\n\t\t */\n\t\tlet isTarget;\n\t\tif(typeof file_obj !== \"function\") {\n\t\t\tconst file = new SFile(file_obj);\n\t\t\tconst buffer = file.getName();\n\t\t\tisTarget = function(name, fullpath) {\n\t\t\t\treturn name === buffer;\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tisTarget = file_obj;\n\t\t}\n\t\t/**\n\t\t * @type {function(SFile): boolean}\n\t\t */\n\t\tconst func = function(file) {\n\t\t\tif(isTarget(file.getName(), file.getAbsolutePath())) {\n\t\t\t\ttarget_file = file;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\tthis.each(func);\n\t\treturn target_file;\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/senko/SFile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "SFile",
    "memberof": "src/senko/SFile.js",
    "static": true,
    "longname": "src/senko/SFile.js~SFile",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/senko/SFile.js",
    "importStyle": "SFile",
    "description": "ファイル／フォルダ／URLを扱うクラス",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#constructor",
    "access": "public",
    "description": "初期化",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile"
        ],
        "spread": false,
        "optional": false,
        "name": "pathname",
        "description": "ファイル名／フォルダ名／URLアドレス"
      }
    ]
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "pathname",
    "memberof": "src/senko/SFile.js~SFile",
    "static": false,
    "longname": "src/senko/SFile.js~SFile#pathname",
    "access": "private",
    "description": "",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "is_http",
    "memberof": "src/senko/SFile.js~SFile",
    "static": false,
    "longname": "src/senko/SFile.js~SFile#is_http",
    "access": "private",
    "description": "",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "fso",
    "memberof": "src/senko/SFile.js~SFile",
    "static": false,
    "longname": "src/senko/SFile.js~SFile#fso",
    "access": "private",
    "description": "",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "remove",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#remove",
    "access": "public",
    "description": "ファイルの削除（ゴミ箱には入りません）",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_force",
        "description": "読み取り専用でも削除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "exists",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#exists",
    "access": "public",
    "description": "ファイルが存在するか",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "copy",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#copy",
    "access": "public",
    "description": "ファイルのコピー",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file_obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "move",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#move",
    "access": "public",
    "description": "ファイルの移動",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file_obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "renameTo",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#renameTo",
    "access": "public",
    "description": "ファイル名を変更",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file_obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "toString",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "getName",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getName",
    "access": "public",
    "description": "名前を取得",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "getParent",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getParent",
    "access": "public",
    "description": "親フォルダの絶対パス",
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "getParentFile",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getParentFile",
    "access": "public",
    "description": "親フォルダ",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "getExtensionName",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getExtensionName",
    "access": "public",
    "description": "拡張子（ドットを含まない）",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "isAbsolute",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#isAbsolute",
    "access": "public",
    "description": "絶対パスかどうか",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "isDirectory",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#isDirectory",
    "access": "public",
    "description": "フォルダかどうか",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "isFile",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#isFile",
    "access": "public",
    "description": "ファイルかどうか",
    "lineNumber": 254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "isReadOnly",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#isReadOnly",
    "access": "public",
    "description": "読み取り専用ファイルかどうか",
    "lineNumber": 268,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "setReadOnly",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#setReadOnly",
    "access": "public",
    "description": "読み取り専用ファイルかどうかを設定する",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "is_readonly",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_allfiles",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "isHidden",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#isHidden",
    "access": "public",
    "description": "隠しファイルかどうか",
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "setHidden",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#setHidden",
    "access": "public",
    "description": "隠しファイルかどうかを設定する",
    "lineNumber": 344,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "is_hidden",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_allfiles",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "lastModified",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#lastModified",
    "access": "public",
    "description": "更新日を取得",
    "lineNumber": 384,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Date}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "setLastModified",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#setLastModified",
    "access": "public",
    "description": "更新日を設定（ファイルのみ対応）",
    "lineNumber": 401,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "length",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#length",
    "access": "public",
    "description": "ファイルサイズ",
    "lineNumber": 426,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "getFiles",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getFiles",
    "access": "public",
    "description": "配下のファイル名の一覧を取得",
    "lineNumber": 441,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "getSubFolders",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getSubFolders",
    "access": "public",
    "description": "配下のサブフォルダ名の一覧を取得",
    "lineNumber": 460,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "getNormalizedPathName",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getNormalizedPathName",
    "access": "public",
    "description": "区切り文字と終端を正規化した文字列を取得",
    "lineNumber": 479,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "list",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#list",
    "access": "public",
    "description": "配下のファイル名とフォルダ名を取得",
    "lineNumber": 494,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "getAbsolutePath",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getAbsolutePath",
    "access": "public",
    "description": "絶対パスを取得",
    "lineNumber": 517,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "mkdir",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#mkdir",
    "access": "public",
    "description": "フォルダを作成\n- フォルダは1つのみ指定可能\n- すでにフォルダがある場合はエラーを返す。",
    "lineNumber": 552,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "mkdirs",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#mkdirs",
    "access": "public",
    "description": "フォルダを作成\n- 作成したいフォルダを続けて記載が可能\n- フォルダがない場合はフォルダを作成していく",
    "lineNumber": 584,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "run",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#run",
    "access": "public",
    "description": "実行ファイルを起動する",
    "lineNumber": 606,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "style",
        "description": "起動オプション"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_wait",
        "description": "プロセスが終了するまで待つ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "writeLine",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#writeLine",
    "access": "public",
    "description": "1行書き加える",
    "lineNumber": 623,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "getTextFile",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getTextFile",
    "access": "public",
    "description": "テキストファイルを開く",
    "lineNumber": 648,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"_autodetect_all\"",
        "defaultRaw": "_autodetect_all",
        "name": "charset",
        "description": "文字コード"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "setTextFile",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#setTextFile",
    "access": "public",
    "description": "テキストファイルを保存",
    "lineNumber": 773,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"utf-8\"",
        "defaultRaw": "utf-8",
        "name": "charset",
        "description": "文字コード"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\\n\"",
        "defaultRaw": "\n",
        "name": "newline",
        "description": "改行コード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "issetBOM",
        "description": "BOMの有無(utf-8のみ有効 )"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "getBinaryFile",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getBinaryFile",
    "access": "public",
    "description": "バイナリファイルを開く（激重）",
    "lineNumber": 834,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "setBinaryFile",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#setBinaryFile",
    "access": "public",
    "description": "バイナリファイルを保存（激重）",
    "lineNumber": 906,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array_",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "createXMLHttpRequest",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/SFile.js~SFile.createXMLHttpRequest",
    "access": "public",
    "description": "XMLHttpRequestを作成",
    "lineNumber": 941,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XMLHttpRequest}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XMLHttpRequest"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "createTempFile",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/SFile.js~SFile.createTempFile",
    "access": "public",
    "description": "テンポラリフォルダ内の適当なファイル名を取得",
    "lineNumber": 981,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "getCurrentDirectory",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/SFile.js~SFile.getCurrentDirectory",
    "access": "public",
    "description": "カレントディレクトリを取得",
    "lineNumber": 992,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "setCurrentDirectory",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/SFile.js~SFile.setCurrentDirectory",
    "access": "public",
    "description": "カレントディレクトリを設定",
    "lineNumber": 1001,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file_obj",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "each",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#each",
    "access": "public",
    "description": "フォルダの中のフォルダとファイルに対して指定した関数を実行する",
    "lineNumber": 1013,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(SFile): boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "戻り値がfalseで処理を終了。"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "result"
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "getAllFiles",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#getAllFiles",
    "access": "public",
    "description": "サブフォルダの中まで探索して全てのファイルとフォルダを取得",
    "lineNumber": 1089,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "searchFile",
    "memberof": "src/senko/SFile.js~SFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/senko/SFile.js~SFile#searchFile",
    "access": "public",
    "description": "指定した条件にあうファイルを探す\n関数を指定する場合は、ファイル名とフルパスが引数に渡されます",
    "lineNumber": 1111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SFile|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "SFile",
          "function(string, string): boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "file_obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFile",
        "null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "src/senko/System.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Format from \"./Format.js\";\n\n/**\n * @type {boolean}\n * @private\n */\nconst is_wscript = /wscript\\.exe$/i.test(WSH.FullName);\n\n/**\n * @type {boolean}\n * @private\n */\nconst is_cscript = /cscript\\.exe$/i.test(WSH.FullName);\n\n/**\n * 文字列へ変換します。\n * @param {any} data \n * @private\n */\nconst toString = function(data) {\n\tif(data === null) {\n\t\treturn \"[null]\";\n\t}\n\telse if(data === undefined) {\n\t\treturn \"[undefined]\";\n\t}\n\tconst string_data = data.toString();\n\tif(string_data === \"[object Error]\") {\n\t\tconst e = data;\n\t\tconst error_name\t= e.name ? e.name : \"Error\";\n\t\tconst error_number\t= e.number ? Format.textf(\"0x%08X\", e.number) : \"0x00000000\";\n\t\tconst error_message\t= e.message ? e.message : \"エラーが発生しました。\";\n\t\treturn Format.textf(\"%s(%s) %s\", error_name, error_number, error_message);\n\t}\n\treturn string_data;\n};\n\n\n/**\n * 実行結果\n * @typedef {Object} SystemExecResult\n * @property {string} out\n * @property {string} error\n * @property {number} exit_code\n */\n\n/**\n * システム用のクラス\n * - 文字列の入出力\n * - スリープ、停止\n * - GUIモード、CUIモードの切り替え\n * - バッチファイルへの引数の情報\n * - カレントディレクトリ情報\n */\nexport default class System {\n\n\t/**\n\t * 文字列を表示（最終行で自動で改行されない）\n\t * @param {any} text\n\t */\n\tstatic print(text) {\n\t\tconst output = toString(text);\n\t\tif(is_cscript) {\n\t\t\tWSH.StdOut.Write(output);\n\t\t}\n\t\telse {\n\t\t\tWScript.Echo(output);\n\t\t}\n\t}\n\n\t/**\n\t * 文字列を表示（最終行で自動で改行される）\n\t * @param {any} text\n\t */\n\tstatic println(text) {\n\t\tconst output = toString(text);\n\t\tif(is_cscript) {\n\t\t\tSystem.print(output + \"\\n\");\n\t\t}\n\t\telse {\n\t\t\tSystem.print(output);\n\t\t}\n\t}\n\n\t/**\n\t * 指定したフォーマットで整形した文字列を表示\n\t * @param {any} text \n\t * @param {...any} parm パラメータは可変引数\n\t */\n\tstatic printf() {\n\t\tconst x = [];\n\t\tfor(let i = 0 ; i < arguments.length ; i++) {\n\t\t\tx[i] = arguments[i];\n\t\t\tif(i === 0) {\n\t\t\t\tx[i] = toString(x[i]);\n\t\t\t}\n\t\t}\n\t\tSystem.println(Format.textf.apply(this, x));\n\t}\n\n\t/**\n\t * キーボードのテキスト入力を取得\n\t * @returns {string}\n\t */\n\tstatic readLine() {\n\t\treturn WScript.StdIn.ReadLine();\n\t}\n\t\n\t/**\n\t * UNIX時間をミリ秒で取得\n\t * @returns {number}\n\t */\n\tstatic currentTimeMillis() {\n\t\tconst date = new Date();\n\t\treturn date.getTime();\n\t}\n\n\t/**\n\t * 処理を一時停止\n\t * @param {number} time_sec\n\t */\n\tstatic sleep(time_sec) {\n\t\tWScript.Sleep((time_sec * 1000) | 0);\n\t}\n\t\n\t/**\n\t * 処理を停止\n\t */\n\tstatic stop() {\n\t\twhile(true) {\n\t\t\tWScript.Sleep(1000);\n\t\t}\n\t}\n\t\n\t/**\n\t * ビープ音を鳴らす\n\t * @param {number} frequency_hz - 周波数\n\t * @param {number} time_sec - 鳴らす秒数\n\t */\n\tstatic beep(frequency_hz, time_sec) {\n\t\tSystem.WindowsAPI(\n\t\t\t\"kernel32.dll\",\n\t\t\t\"bool Beep(uint dwFreq, uint dwDuration)\",\n\t\t\t\"$api::Beep(\" + (frequency_hz | 0) + \", \" + ((time_sec * 1000) | 0) + \");\"\n\t\t);\n\t}\n\n\t/**\n\t * 指定したコマンドを別プロセスとして実行する\n\t * @param {string} command - コマンド\n\t * @param {number} [style=1] - 起動オプション\n\t * @param {boolean} [is_wait=false] - プロセスが終了するまで待つ\n\t */\n\tstatic run(command, style, is_wait) {\n\t\tconst NormalFocus = 1;\n\t\tconst intWindowStyle = style !== undefined ? style : NormalFocus;\n\t\tconst bWaitOnReturn = is_wait !== undefined ? is_wait : false;\n\t\tconst shell = WScript.CreateObject(\"WScript.Shell\");\n\t\t// @ts-ignore\n\t\treturn shell.Run(command, intWindowStyle, bWaitOnReturn);\n\t}\n\n\t/**\n\t * 指定したコマンドを子プロセスとして実行する\n\t * @param {string} command \n\t * @returns {SystemExecResult}\n\t */\n\tstatic exec(command) {\n\t\tconst shell = WScript.CreateObject(\"WScript.Shell\");\n\t\tconst exec = shell.Exec(command);\n\t\tconst stdin = exec.StdIn;\n\t\tconst stdout = exec.StdOut;\n\t\tconst stderr = exec.StdErr;\n\t\twhile(exec.Status === 0) {\n\t\t\tWScript.Sleep(10);\n\t\t}\n\t\tconst exit_code = exec.ExitCode;\n\t\tstdin.Close();\n\t\t// @ts-ignore\n\t\tconst out = stdout.ReadAll().replace(/\\r?\\n$/, \"\");\n\t\tstdout.Close();\n\t\t// @ts-ignore\n\t\tconst error = stderr.ReadAll().replace(/\\r?\\n$/, \"\");\n\t\tstderr.Close();\n\t\treturn {\n\t\t\texit_code : exit_code,\n\t\t\tout : out,\n\t\t\terror : error\n\t\t};\n\t}\n\n\t/**\n\t * プログラムを終了させます。\n\t * @param {number} [exit_code=0] \n\t */\n\tstatic exit(exit_code) {\n\t\tWScript.Quit(exit_code ? exit_code : 0);\n\t}\n\t\n\t/**\n\t * CUIで起動しなおす\n\t * @param {boolean} is_use_chakra - 高速なChakraエンジンを利用する（wsfが開けなくなる）\n\t */\n\tstatic executeOnCScript(is_use_chakra) {\n\t\tconst iis_use_chakra = is_use_chakra !== undefined ? is_use_chakra : false;\n\t\tif(is_wscript) {\n\t\t\t// CScript で起動しなおす\n\t\t\tconst code = [];\n\t\t\tconst args = System.getArguments();\n\t\t\tcode.push(\"\\\"C:\\\\Windows\\\\System32\\\\cscript.exe\\\"\");\n\t\t\tcode.push(\"//NoLogo\");\n\t\t\tif(iis_use_chakra) {\n\t\t\t\tcode.push(\"//E:{16d51579-a30b-4c8b-a276-0ff4dc41e755}\");\n\t\t\t}\n\t\t\tcode.push(\"\\\"\" + WScript.ScriptFullName + \"\\\"\");\n\t\t\tfor(let i = 0; i < args.length; i++) {\n\t\t\t\tcode.push(\"\\\"\" + args[i] + \"\\\"\");\n\t\t\t}\n\t\t\tSystem.run(code.join(\" \"));\n\t\t\tSystem.exit();\n\t\t}\n\t}\n\t\n\t/**\n\t * GUIで起動しなおす\n\t */\n\tstatic executeOnWScript() {\n\t\t// cscriptで起動しているか\n\t\tif(is_cscript) {\n\t\t\t// WScript で起動しなおす\n\t\t\tconst code = [];\n\t\t\tconst args = System.getArguments();\n\t\t\tcode.push(\"\\\"C:\\\\Windows\\\\System32\\\\wscript.exe\\\"\");\n\t\t\tcode.push(\"\\\"\" + WScript.ScriptFullName + \"\\\"\");\n\t\t\tfor(let i = 0; i < args.length; i++) {\n\t\t\t\tcode.push(\"\\\"\" + args[i] + \"\\\"\");\n\t\t\t}\n\t\t\tSystem.run(code.join(\" \"));\n\t\t\tSystem.exit();\n\t\t}\n\t}\n\t\n\t/**\n\t * スクリプトファイルへの引数を取得\n\t * @returns {string[]}\n\t */\n\tstatic getArguments() {\n\t\tconst args = [];\n\t\tfor(let i = 0; i < WScript.Arguments.length; i++) {\n\t\t\targs[i] = WScript.Arguments(i);\n\t\t}\n\t\treturn args;\n\t}\n\t\n\t/**\n\t * カレントディレクトリを設定\n\t * @param {string} filename\n\t */\n\tstatic setCurrentDirectory(filename) {\n\t\tconst shell = new ActiveXObject(\"WScript.Shell\");\n\t\tshell.CurrentDirectory = filename.toString();\n\t}\n\t\n\t/**\n\t * カレントディレクトリを取得\n\t * @returns {string}\n\t */\n\tstatic getCurrentDirectory() {\n\t\tconst shell = new ActiveXObject(\"WScript.Shell\");\n\t\treturn shell.CurrentDirectory;\n\t}\n\n\t/**\n\t * 実行中のスクリプトがあるカレントディレクトリを取得\n\t * @returns {string}\n\t */\n\tstatic getScriptDirectory() {\n\t\tconst x = WSH.ScriptFullName.match(/.*\\\\/)[0];\n\t\treturn(x.substring(0 ,x.length - 1));\n\t}\n\t\n\t/**\n\t * 実行中のスクリプトがあるディレクトリをカレントディレクトリに設定\n\t */\n\tstatic initializeCurrentDirectory() {\n\t\tconst shell = WScript.CreateObject(\"WScript.Shell\");\n\t\tshell.CurrentDirectory = System.getScriptDirectory();\n\t}\n\n\t/**\n\t * PowerShell を実行する\n\t * @param {string} source\n\t * @returns {string}\n\t */\n\tstatic PowerShell(source) {\n\t\tconst powershell_base = \"powershell -sta -Command\";\n\t\tconst command = (powershell_base + \" \" + source).replace(/([\\\\\"])/g, \"\\\\$1\");\n\t\treturn System.exec(command).out.replace(/\\r?\\n$/, \"\");\n\t}\n\n\t/**\n\t * WindowsAPI を実行する\n\t * \n\t * 例\n\t * - dll_name : user32.dll\n\t * - function_text : int MessageBox(IntPtr hWnd, string lpText, string lpCaption, UInt32 uType)\n\t * - exec_text : $api::MessageBox(0, \"テキスト\", \"キャプション\", 0);\n\t * @param {string} dll_name - 利用するdll\n\t * @param {string} function_text - 関数の定義データ($apiに代入されます。)\n\t * @param {string} exec_text - 実行コマンド\n\t * @returns {string}\n\t */\n\tstatic WindowsAPI(dll_name, function_text, exec_text) {\n\t\t// 利用例\n\t\t// System.WindowsAPI(\n\t\t// \t\"user32.dll\",\n\t\t// \t\"int MessageBox(IntPtr hWnd, string lpText, string lpCaption, UInt32 uType)\",\n\t\t// \t\"$api::MessageBox(0, \\\"テキスト\\\", \\\"キャプション\\\", 0);\"\n\t\t// );\n\t\t// ダブルクォーテーションだとエスケープが面倒なので、ここはシングルクォーテーションを使用する\n\t\t// eslint-disable-next-line quotes\n\t\tconst api_base = `$api = Add-Type -Name \"api\" -MemberDefinition \"[DllImport(\"\"` + dll_name + `\"\")] public extern static ` + function_text + `;\" -PassThru;`;\n\t\tconst command = api_base + \" \" + exec_text;\n\t\treturn System.PowerShell(command);\n\t}\n\n\t/**\n\t * クリップボードからテキストを取得する\n\t * @returns {string}\n\t */\n\tstatic getClipBoardText() {\n\t\tconst command = \"Add-Type -Assembly System.Windows.Forms; [System.Windows.Forms.Clipboard]::GetText();\";\n\t\treturn System.PowerShell(command);\n\t}\n\n\t/**\n\t * クリップボードへテキストを設定する\n\t * @param {string} text\n\t */\n\tstatic setClipBoardText(text) {\n\t\t// PowerShell 5.0以降\n\t\t// command = \"Set-Clipboard \\\"これでもコピー可能\\\"\";\n\t\tconst command = \"Add-Type -Assembly System.Windows.Forms; [System.Windows.Forms.Clipboard]::SetText(\\\"\" + text + \"\\\", 1);\";\n\t\tSystem.PowerShell(command);\n\t}\n\n}\n\n\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/senko/System.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "variable",
    "name": "is_wscript",
    "memberof": "src/senko/System.js",
    "static": true,
    "longname": "src/senko/System.js~is_wscript",
    "access": "private",
    "export": false,
    "importPath": "senkowsh/src/senko/System.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "is_cscript",
    "memberof": "src/senko/System.js",
    "static": true,
    "longname": "src/senko/System.js~is_cscript",
    "access": "private",
    "export": false,
    "importPath": "senkowsh/src/senko/System.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "toString",
    "memberof": "src/senko/System.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~toString",
    "access": "private",
    "export": false,
    "importPath": "senkowsh/src/senko/System.js",
    "importStyle": null,
    "description": "文字列へ変換します。",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "typedef",
    "name": "SystemExecResult",
    "memberof": "src/senko/System.js",
    "static": true,
    "longname": "src/senko/System.js~SystemExecResult",
    "access": "public",
    "description": "実行結果",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "exit_code",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SystemExecResult"
    }
  },
  {
    "__docId__": 254,
    "kind": "class",
    "name": "System",
    "memberof": "src/senko/System.js",
    "static": true,
    "longname": "src/senko/System.js~System",
    "access": "public",
    "export": true,
    "importPath": "senkowsh/src/senko/System.js",
    "importStyle": "System",
    "description": "システム用のクラス\n- 文字列の入出力\n- スリープ、停止\n- GUIモード、CUIモードの切り替え\n- バッチファイルへの引数の情報\n- カレントディレクトリ情報",
    "lineNumber": 65,
    "interface": false
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "print",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.print",
    "access": "public",
    "description": "文字列を表示（最終行で自動で改行されない）",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "println",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.println",
    "access": "public",
    "description": "文字列を表示（最終行で自動で改行される）",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "printf",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.printf",
    "access": "public",
    "description": "指定したフォーマットで整形した文字列を表示",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "parm",
        "description": "パラメータは可変引数"
      }
    ],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "readLine",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.readLine",
    "access": "public",
    "description": "キーボードのテキスト入力を取得",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "currentTimeMillis",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.currentTimeMillis",
    "access": "public",
    "description": "UNIX時間をミリ秒で取得",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "sleep",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.sleep",
    "access": "public",
    "description": "処理を一時停止",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time_sec",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "stop",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.stop",
    "access": "public",
    "description": "処理を停止",
    "lineNumber": 139,
    "params": [],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "beep",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.beep",
    "access": "public",
    "description": "ビープ音を鳴らす",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "frequency_hz",
        "description": "周波数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time_sec",
        "description": "鳴らす秒数"
      }
    ],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "run",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.run",
    "access": "public",
    "description": "指定したコマンドを別プロセスとして実行する",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "コマンド"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "style",
        "description": "起動オプション"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_wait",
        "description": "プロセスが終了するまで待つ"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "exec",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.exec",
    "access": "public",
    "description": "指定したコマンドを子プロセスとして実行する",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SystemExecResult}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SystemExecResult"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "exit",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.exit",
    "access": "public",
    "description": "プログラムを終了させます。",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "exit_code",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "executeOnCScript",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.executeOnCScript",
    "access": "public",
    "description": "CUIで起動しなおす",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "is_use_chakra",
        "description": "高速なChakraエンジンを利用する（wsfが開けなくなる）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "executeOnWScript",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.executeOnWScript",
    "access": "public",
    "description": "GUIで起動しなおす",
    "lineNumber": 237,
    "params": [],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "getArguments",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.getArguments",
    "access": "public",
    "description": "スクリプトファイルへの引数を取得",
    "lineNumber": 257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "setCurrentDirectory",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.setCurrentDirectory",
    "access": "public",
    "description": "カレントディレクトリを設定",
    "lineNumber": 269,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "getCurrentDirectory",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.getCurrentDirectory",
    "access": "public",
    "description": "カレントディレクトリを取得",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "getScriptDirectory",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.getScriptDirectory",
    "access": "public",
    "description": "実行中のスクリプトがあるカレントディレクトリを取得",
    "lineNumber": 287,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "initializeCurrentDirectory",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.initializeCurrentDirectory",
    "access": "public",
    "description": "実行中のスクリプトがあるディレクトリをカレントディレクトリに設定",
    "lineNumber": 295,
    "params": [],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "PowerShell",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.PowerShell",
    "access": "public",
    "description": "PowerShell を実行する",
    "lineNumber": 305,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "WindowsAPI",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.WindowsAPI",
    "access": "public",
    "description": "WindowsAPI を実行する\n\n例\n- dll_name : user32.dll\n- function_text : int MessageBox(IntPtr hWnd, string lpText, string lpCaption, UInt32 uType)\n- exec_text : $api::MessageBox(0, \"テキスト\", \"キャプション\", 0);",
    "lineNumber": 323,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dll_name",
        "description": "利用するdll"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "function_text",
        "description": "関数の定義データ($apiに代入されます。)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "exec_text",
        "description": "実行コマンド"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "getClipBoardText",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.getClipBoardText",
    "access": "public",
    "description": "クリップボードからテキストを取得する",
    "lineNumber": 341,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "setClipBoardText",
    "memberof": "src/senko/System.js~System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/senko/System.js~System.setClipBoardText",
    "access": "public",
    "description": "クリップボードへテキストを設定する",
    "lineNumber": 350,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "src/SenkoWSH.js",
    "content": "/**\n * The script is part of SenkoWSH.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport typeCSV from \"./senko/CSV.js\";\nimport typeDialog from \"./senko/Dialog.js\";\nimport typeSFile from \"./senko/SFile.js\";\nimport typeRobot from \"./senko/Robot.js\";\nimport typeFormat from \"./senko/Format.js\";\nimport typeRandom from \"./konpeito/Random.js\";\nimport typeJapanese from \"./mojijs/Japanese.js\";\nimport typeStringComparator from \"./mojijs/StringComparator.js\";\nimport typeSystem from \"./senko/System.js\";\n\n/**\n * @type {typeof typeCSV}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nCSV = typeCSV;\n\n/**\n * @type {typeof typeDialog}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nDialog = typeDialog;\n\n/**\n * @type {typeof typeSFile}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nSFile = typeSFile;\n\n/**\n * @type {typeof typeRobot}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nRobot = typeRobot;\n\n/**\n * @type {typeof typeFormat}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nFormat = typeFormat;\n\n/**\n * @type {typeof typeRandom}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nRandom = typeRandom;\n\n/**\n * @type {typeof typeJapanese}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nJapanese = typeJapanese;\n\n/**\n * @type {typeof typeStringComparator}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nStringComparator = typeStringComparator;\n\n/**\n * @type {typeof typeSystem}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nSystem = typeSystem;\n\n/**\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-global-assign\nconsole = {\n\t// @ts-ignore\n\tlog : function(text) {\n\t\t// @ts-ignore\n\t\t// eslint-disable-next-line no-undef\n\t\tSystem.println(text);\n\t}\n};\n\nimport typeExtendsArray from \"./senko/ExtendsArray.js\";\nimport typeExtendsObject from \"./senko/ExtendsObject.js\";\nimport typeExtendsString from \"./senko/ExtendsString.js\";\n\n/**\n * @type {typeof typeExtendsArray}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nExtendsArray = typeExtendsArray;\n\n/**\n * @type {typeof typeExtendsObject}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nExtendsObject = typeExtendsObject;\n\n/**\n * @type {typeof typeExtendsString}\n * @private\n */\n// @ts-ignore\n// eslint-disable-next-line no-undef\nExtendsString = typeExtendsString;\n\n/**\n * @param {any} original \n * @param {any} extension\n * @returns {any}\n * @private\n * @ignore\n */\nconst extendClass = function(original, extension) {\n\tfor(const key in extension) {\n\t\toriginal.prototype[key] = function() {\n\t\t\tconst x = [];\n\t\t\tx.push(this);\n\t\t\tfor(let i = 0 ; i < arguments.length ; i++) {\n\t\t\t\tx.push(arguments[i]);\n\t\t\t}\n\t\t\treturn extension[key].apply(this, x);\n\t\t};\n\t}\n};\n\nextendClass(Array, typeExtendsArray);\nextendClass(Object, typeExtendsObject);\nextendClass(String, typeExtendsString);\n",
    "static": true,
    "longname": "D:/JavaScript/SenkoWSH/src/SenkoWSH.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "function",
    "name": "extendClass",
    "memberof": "src/SenkoWSH.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/SenkoWSH.js~extendClass",
    "access": "private",
    "export": false,
    "importPath": "senkowsh/src/SenkoWSH.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 142,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "original",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "# SenkoWSH\r\n\r\n## 概要\r\n- Windows 上で動作する WSH JScript 用汎用ライブラリ\r\n- Visual Studio Code で JScript での開発を目的とする\r\n- ES3相当の機能しかなかった JScript を強化\r\n\r\n本ライブラリを用いることで、`JScript` によるバッチ処理で以下のような機能が利用できます。\r\n動作環境は、Windows 7以上（一部powershellを利用しているため）とします。\r\n\r\n1. `SFile`クラスを用いてファイルのテキストの読み書きやファイル操作\r\n2. `CSV`クラスを用いてCSV形式を扱う\r\n3. `System.sleep(1)`で1秒停止や、`System.stop()`で処理を停止\r\n4. `Format.textf`で`sprintf` のような文字列のフォーマット変換\r\n5. `StringComparator.DEFAULT` で自然準ソート\r\n6. `String.prototype.trim()` などES3になかった機能の追加\r\n7. `Robot`クラスを用いて外部アプリケーションを操作する\r\n\r\nとりあえず`examples`の`Example.wsf`を実行してみればわかります。\r\n詳しい関数の説明は、[ヘルプファイル](https://natade-jp.github.io/SenkoWSH/)を参照すること\r\n\r\n## フォルダ構成\r\n- build - `JScirpt` で動作するようにコンパイルしたライブラリ及び、Visual Studio Code 用の型定義ファイル\r\n- src - コンパイル前のソースコードフォルダ\r\n- docs - 自動生成したヘルプファイル\r\n- scripts - `Node.js` で実行するスクリプトファイル（`package.json`の`scripts`を参照）\r\n\r\n## 開発環境構築方法\r\n1. プロジェクトフォルダ全体をダウンロードして、`package.json`があるディレクトリをカレントディレクトリとする\r\n2. [Node.js / npm](https://nodejs.org/ja/) をインストールして`npm install`を実行する。\r\n3. [Visual Studio Code](https://code.visualstudio.com/) をインストール\r\n4. VSCode上で、拡張機能の [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) をインストール\r\n5. `examples`の中身をいじって作りたいマクロを作る。\r\n\r\n次のような操作が行えます。\r\n- ビルドは、`npm run build`\r\n- 型定義ファイル(`d.ts`)の作成は、`npm run dts`\r\n- ヘルプファイルの作成は、`npm run doc`\r\n- サンプルファイルの実行は、`npm run start` (`JScript`でサンプルファイルが実行される)\r\n\r\n## Author\r\n- [natade-jp](https://github.com/natade-jp/)\r\n",
    "longname": "D:\\JavaScript\\SenkoWSH\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n\t\"name\": \"senkowsh\",\n\t\"version\": \"3.3.0\",\n\t\"description\": \"JScirpt library for WSH that gathers various functions.\",\n\t\"author\": \"natade-jp <natade3@gmail.com> (https://github.com/natade-jp)\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/natade-jp/SenkoWSH\"\n\t},\n\t\"license\": \"MIT\",\n\t\"main\": \"./build/SenkoWSH.js\",\n\t\"keywords\": [\n\t\t\"wsh\"\n\t],\n\t\"directories\": {\n\t\t\"src\": \"src\",\n\t\t\"build\": \"build\",\n\t\t\"example\": \"examples\"\n\t},\n\t\"scripts\": {\n\t\t\"build\": \"node ./scripts/package.build.js\",\n\t\t\"dts\": \"node ./scripts/package.dts.js\",\n\t\t\"doc\": \"node ./scripts/package.doc.js\",\n\t\t\"start\": \"node ./scripts/execExample.js\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@types/windows-script-host\": \"^5.8.3\",\n\t\t\"esdoc\": \"^1.1.0\",\n\t\t\"esdoc-standard-plugin\": \"^1.0.0\",\n\t\t\"eslint\": \"^6.5.1\",\n\t\t\"jsdoc\": \"^3.6.3\",\n\t\t\"jsdoc-export-default-interop\": \"^0.3.1\",\n\t\t\"mojijs\": \"^3.0.3\",\n\t\t\"rollup\": \"^1.23.1\",\n\t\t\"rollup-plugin-buble\": \"^0.19.8\",\n\t\t\"rollup-plugin-uglify\": \"^6.0.3\",\n\t\t\"rollup-plugin-uglify-es\": \"0.0.1\",\n\t\t\"tsd-jsdoc\": \"^2.4.0\"\n\t}\n}\n",
    "longname": "D:\\JavaScript\\SenkoWSH\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]